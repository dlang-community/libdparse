// symbol index generated by DDOX - do not edit
var symbols = [
{name: 'dparse.ast', kind: "module", path: './dparse/ast.html', attributes: []},
{name: 'dparse.ast.AddExpression', kind: "classdeclaration", path: './dparse/ast/AddExpression.html', attributes: []},
{name: 'dparse.ast.AddExpression.accept', kind: "functiondeclaration", path: './dparse/ast/AddExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AddExpression.operator', kind: "variabledeclaration", path: './dparse/ast/AddExpression.operator.html', attributes: []},
{name: 'dparse.ast.BaseNode.tokens', kind: "variabledeclaration", path: './dparse/ast/BaseNode.tokens.html', attributes: []},
{name: 'dparse.ast.AliasAssign', kind: "classdeclaration", path: './dparse/ast/AliasAssign.html', attributes: []},
{name: 'dparse.ast.AliasAssign.accept', kind: "functiondeclaration", path: './dparse/ast/AliasAssign.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AliasAssign.comment', kind: "variabledeclaration", path: './dparse/ast/AliasAssign.comment.html', attributes: []},
{name: 'dparse.ast.AliasAssign.identifier', kind: "variabledeclaration", path: './dparse/ast/AliasAssign.identifier.html', attributes: []},
{name: 'dparse.ast.AliasAssign.type', kind: "variabledeclaration", path: './dparse/ast/AliasAssign.type.html', attributes: []},
{name: 'dparse.ast.AliasDeclaration', kind: "classdeclaration", path: './dparse/ast/AliasDeclaration.html', attributes: []},
{name: 'dparse.ast.AliasDeclaration.accept', kind: "functiondeclaration", path: './dparse/ast/AliasDeclaration.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AliasDeclaration.comment', kind: "variabledeclaration", path: './dparse/ast/AliasDeclaration.comment.html', attributes: []},
{name: 'dparse.ast.AliasDeclaration.declaratorIdentifierList', kind: "variabledeclaration", path: './dparse/ast/AliasDeclaration.declaratorIdentifierList.html', attributes: []},
{name: 'dparse.ast.AliasDeclaration.initializers', kind: "variabledeclaration", path: './dparse/ast/AliasDeclaration.initializers.html', attributes: []},
{name: 'dparse.ast.AliasDeclaration.memberFunctionAttributes', kind: "variabledeclaration", path: './dparse/ast/AliasDeclaration.memberFunctionAttributes.html', attributes: []},
{name: 'dparse.ast.AliasDeclaration.parameters', kind: "variabledeclaration", path: './dparse/ast/AliasDeclaration.parameters.html', attributes: []},
{name: 'dparse.ast.AliasDeclaration.storageClasses', kind: "variabledeclaration", path: './dparse/ast/AliasDeclaration.storageClasses.html', attributes: []},
{name: 'dparse.ast.AliasDeclaration.type', kind: "variabledeclaration", path: './dparse/ast/AliasDeclaration.type.html', attributes: []},
{name: 'dparse.ast.AliasInitializer', kind: "classdeclaration", path: './dparse/ast/AliasInitializer.html', attributes: []},
{name: 'dparse.ast.AliasInitializer.accept', kind: "functiondeclaration", path: './dparse/ast/AliasInitializer.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AliasInitializer.functionLiteralExpression', kind: "variabledeclaration", path: './dparse/ast/AliasInitializer.functionLiteralExpression.html', attributes: []},
{name: 'dparse.ast.AliasInitializer.memberFunctionAttributes', kind: "variabledeclaration", path: './dparse/ast/AliasInitializer.memberFunctionAttributes.html', attributes: []},
{name: 'dparse.ast.AliasInitializer.name', kind: "variabledeclaration", path: './dparse/ast/AliasInitializer.name.html', attributes: []},
{name: 'dparse.ast.AliasInitializer.parameters', kind: "variabledeclaration", path: './dparse/ast/AliasInitializer.parameters.html', attributes: []},
{name: 'dparse.ast.AliasInitializer.storageClasses', kind: "variabledeclaration", path: './dparse/ast/AliasInitializer.storageClasses.html', attributes: []},
{name: 'dparse.ast.AliasInitializer.templateParameters', kind: "variabledeclaration", path: './dparse/ast/AliasInitializer.templateParameters.html', attributes: []},
{name: 'dparse.ast.AliasInitializer.type', kind: "variabledeclaration", path: './dparse/ast/AliasInitializer.type.html', attributes: []},
{name: 'dparse.ast.AliasThisDeclaration', kind: "classdeclaration", path: './dparse/ast/AliasThisDeclaration.html', attributes: []},
{name: 'dparse.ast.AliasThisDeclaration.accept', kind: "functiondeclaration", path: './dparse/ast/AliasThisDeclaration.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AliasThisDeclaration.comment', kind: "variabledeclaration", path: './dparse/ast/AliasThisDeclaration.comment.html', attributes: []},
{name: 'dparse.ast.AliasThisDeclaration.identifier', kind: "variabledeclaration", path: './dparse/ast/AliasThisDeclaration.identifier.html', attributes: []},
{name: 'dparse.ast.AlignAttribute', kind: "classdeclaration", path: './dparse/ast/AlignAttribute.html', attributes: []},
{name: 'dparse.ast.AlignAttribute.accept', kind: "functiondeclaration", path: './dparse/ast/AlignAttribute.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AlignAttribute.assignExpression', kind: "variabledeclaration", path: './dparse/ast/AlignAttribute.assignExpression.html', attributes: []},
{name: 'dparse.ast.AndAndExpression', kind: "classdeclaration", path: './dparse/ast/AndAndExpression.html', attributes: []},
{name: 'dparse.ast.AndAndExpression.accept', kind: "functiondeclaration", path: './dparse/ast/AndAndExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AndExpression', kind: "classdeclaration", path: './dparse/ast/AndExpression.html', attributes: []},
{name: 'dparse.ast.AndExpression.accept', kind: "functiondeclaration", path: './dparse/ast/AndExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AnonymousEnumDeclaration', kind: "classdeclaration", path: './dparse/ast/AnonymousEnumDeclaration.html', attributes: []},
{name: 'dparse.ast.AnonymousEnumDeclaration.accept', kind: "functiondeclaration", path: './dparse/ast/AnonymousEnumDeclaration.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AnonymousEnumDeclaration.baseType', kind: "variabledeclaration", path: './dparse/ast/AnonymousEnumDeclaration.baseType.html', attributes: []},
{name: 'dparse.ast.AnonymousEnumDeclaration.members', kind: "variabledeclaration", path: './dparse/ast/AnonymousEnumDeclaration.members.html', attributes: []},
{name: 'dparse.ast.AnonymousEnumMember', kind: "classdeclaration", path: './dparse/ast/AnonymousEnumMember.html', attributes: []},
{name: 'dparse.ast.AnonymousEnumMember.accept', kind: "functiondeclaration", path: './dparse/ast/AnonymousEnumMember.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AnonymousEnumMember.assignExpression', kind: "variabledeclaration", path: './dparse/ast/AnonymousEnumMember.assignExpression.html', attributes: []},
{name: 'dparse.ast.AnonymousEnumMember.comment', kind: "variabledeclaration", path: './dparse/ast/AnonymousEnumMember.comment.html', attributes: []},
{name: 'dparse.ast.AnonymousEnumMember.name', kind: "variabledeclaration", path: './dparse/ast/AnonymousEnumMember.name.html', attributes: []},
{name: 'dparse.ast.AnonymousEnumMember.type', kind: "variabledeclaration", path: './dparse/ast/AnonymousEnumMember.type.html', attributes: []},
{name: 'dparse.ast.ArgumentList', kind: "classdeclaration", path: './dparse/ast/ArgumentList.html', attributes: []},
{name: 'dparse.ast.ArgumentList.accept', kind: "functiondeclaration", path: './dparse/ast/ArgumentList.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.ArgumentList.endLocation', kind: "variabledeclaration", path: './dparse/ast/ArgumentList.endLocation.html', attributes: []},
{name: 'dparse.ast.ArgumentList.items', kind: "variabledeclaration", path: './dparse/ast/ArgumentList.items.html', attributes: []},
{name: 'dparse.ast.ArgumentList.startLocation', kind: "variabledeclaration", path: './dparse/ast/ArgumentList.startLocation.html', attributes: []},
{name: 'dparse.ast.Arguments', kind: "classdeclaration", path: './dparse/ast/Arguments.html', attributes: []},
{name: 'dparse.ast.Arguments.accept', kind: "functiondeclaration", path: './dparse/ast/Arguments.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Arguments.namedArgumentList', kind: "variabledeclaration", path: './dparse/ast/Arguments.namedArgumentList.html', attributes: []},
{name: 'dparse.ast.ArrayInitializer', kind: "classdeclaration", path: './dparse/ast/ArrayInitializer.html', attributes: []},
{name: 'dparse.ast.ArrayInitializer.accept', kind: "functiondeclaration", path: './dparse/ast/ArrayInitializer.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.ArrayInitializer.arrayMemberInitializations', kind: "variabledeclaration", path: './dparse/ast/ArrayInitializer.arrayMemberInitializations.html', attributes: []},
{name: 'dparse.ast.ArrayInitializer.endLocation', kind: "variabledeclaration", path: './dparse/ast/ArrayInitializer.endLocation.html', attributes: []},
{name: 'dparse.ast.ArrayInitializer.startLocation', kind: "variabledeclaration", path: './dparse/ast/ArrayInitializer.startLocation.html', attributes: []},
{name: 'dparse.ast.ArrayLiteral', kind: "classdeclaration", path: './dparse/ast/ArrayLiteral.html', attributes: []},
{name: 'dparse.ast.ArrayLiteral.accept', kind: "functiondeclaration", path: './dparse/ast/ArrayLiteral.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.ArrayLiteral.argumentList', kind: "variabledeclaration", path: './dparse/ast/ArrayLiteral.argumentList.html', attributes: []},
{name: 'dparse.ast.ArrayMemberInitialization', kind: "classdeclaration", path: './dparse/ast/ArrayMemberInitialization.html', attributes: []},
{name: 'dparse.ast.ArrayMemberInitialization.accept', kind: "functiondeclaration", path: './dparse/ast/ArrayMemberInitialization.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.ArrayMemberInitialization.assignExpression', kind: "variabledeclaration", path: './dparse/ast/ArrayMemberInitialization.assignExpression.html', attributes: []},
{name: 'dparse.ast.ArrayMemberInitialization.nonVoidInitializer', kind: "variabledeclaration", path: './dparse/ast/ArrayMemberInitialization.nonVoidInitializer.html', attributes: []},
{name: 'dparse.ast.AsmAddExp', kind: "classdeclaration", path: './dparse/ast/AsmAddExp.html', attributes: []},
{name: 'dparse.ast.AsmAddExp.accept', kind: "functiondeclaration", path: './dparse/ast/AsmAddExp.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AsmAddExp.operator', kind: "variabledeclaration", path: './dparse/ast/AsmAddExp.operator.html', attributes: []},
{name: 'dparse.ast.AsmAndExp', kind: "classdeclaration", path: './dparse/ast/AsmAndExp.html', attributes: []},
{name: 'dparse.ast.AsmAndExp.accept', kind: "functiondeclaration", path: './dparse/ast/AsmAndExp.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AsmBrExp', kind: "classdeclaration", path: './dparse/ast/AsmBrExp.html', attributes: []},
{name: 'dparse.ast.AsmBrExp.accept', kind: "functiondeclaration", path: './dparse/ast/AsmBrExp.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AsmBrExp.asmBrExp', kind: "variabledeclaration", path: './dparse/ast/AsmBrExp.asmBrExp.html', attributes: []},
{name: 'dparse.ast.AsmBrExp.asmExp', kind: "variabledeclaration", path: './dparse/ast/AsmBrExp.asmExp.html', attributes: []},
{name: 'dparse.ast.AsmBrExp.asmUnaExp', kind: "variabledeclaration", path: './dparse/ast/AsmBrExp.asmUnaExp.html', attributes: []},
{name: 'dparse.ast.AsmBrExp.column', kind: "variabledeclaration", path: './dparse/ast/AsmBrExp.column.html', attributes: []},
{name: 'dparse.ast.AsmBrExp.line', kind: "variabledeclaration", path: './dparse/ast/AsmBrExp.line.html', attributes: []},
{name: 'dparse.ast.AsmEqualExp', kind: "classdeclaration", path: './dparse/ast/AsmEqualExp.html', attributes: []},
{name: 'dparse.ast.AsmEqualExp.accept', kind: "functiondeclaration", path: './dparse/ast/AsmEqualExp.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AsmEqualExp.operator', kind: "variabledeclaration", path: './dparse/ast/AsmEqualExp.operator.html', attributes: []},
{name: 'dparse.ast.AsmExp', kind: "classdeclaration", path: './dparse/ast/AsmExp.html', attributes: []},
{name: 'dparse.ast.AsmExp.accept', kind: "functiondeclaration", path: './dparse/ast/AsmExp.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AsmExp.left', kind: "variabledeclaration", path: './dparse/ast/AsmExp.left.html', attributes: []},
{name: 'dparse.ast.AsmExp.middle', kind: "variabledeclaration", path: './dparse/ast/AsmExp.middle.html', attributes: []},
{name: 'dparse.ast.AsmExp.right', kind: "variabledeclaration", path: './dparse/ast/AsmExp.right.html', attributes: []},
{name: 'dparse.ast.AsmInstruction', kind: "classdeclaration", path: './dparse/ast/AsmInstruction.html', attributes: []},
{name: 'dparse.ast.AsmInstruction.accept', kind: "functiondeclaration", path: './dparse/ast/AsmInstruction.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AsmInstruction.asmInstruction', kind: "variabledeclaration", path: './dparse/ast/AsmInstruction.asmInstruction.html', attributes: []},
{name: 'dparse.ast.AsmInstruction.hasAlign', kind: "variabledeclaration", path: './dparse/ast/AsmInstruction.hasAlign.html', attributes: []},
{name: 'dparse.ast.AsmInstruction.identifierOrIntegerOrOpcode', kind: "variabledeclaration", path: './dparse/ast/AsmInstruction.identifierOrIntegerOrOpcode.html', attributes: []},
{name: 'dparse.ast.AsmInstruction.isLabel', kind: "variabledeclaration", path: './dparse/ast/AsmInstruction.isLabel.html', attributes: []},
{name: 'dparse.ast.AsmInstruction.operands', kind: "variabledeclaration", path: './dparse/ast/AsmInstruction.operands.html', attributes: []},
{name: 'dparse.ast.AsmLogAndExp', kind: "classdeclaration", path: './dparse/ast/AsmLogAndExp.html', attributes: []},
{name: 'dparse.ast.AsmLogAndExp.accept', kind: "functiondeclaration", path: './dparse/ast/AsmLogAndExp.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AsmLogOrExp', kind: "classdeclaration", path: './dparse/ast/AsmLogOrExp.html', attributes: []},
{name: 'dparse.ast.AsmLogOrExp.accept', kind: "functiondeclaration", path: './dparse/ast/AsmLogOrExp.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AsmMulExp', kind: "classdeclaration", path: './dparse/ast/AsmMulExp.html', attributes: []},
{name: 'dparse.ast.AsmMulExp.accept', kind: "functiondeclaration", path: './dparse/ast/AsmMulExp.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AsmMulExp.operator', kind: "variabledeclaration", path: './dparse/ast/AsmMulExp.operator.html', attributes: []},
{name: 'dparse.ast.AsmOrExp', kind: "classdeclaration", path: './dparse/ast/AsmOrExp.html', attributes: []},
{name: 'dparse.ast.AsmOrExp.accept', kind: "functiondeclaration", path: './dparse/ast/AsmOrExp.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AsmPrimaryExp', kind: "classdeclaration", path: './dparse/ast/AsmPrimaryExp.html', attributes: []},
{name: 'dparse.ast.AsmPrimaryExp.accept', kind: "functiondeclaration", path: './dparse/ast/AsmPrimaryExp.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AsmPrimaryExp.asmExp', kind: "variabledeclaration", path: './dparse/ast/AsmPrimaryExp.asmExp.html', attributes: []},
{name: 'dparse.ast.AsmPrimaryExp.identifierChain', kind: "variabledeclaration", path: './dparse/ast/AsmPrimaryExp.identifierChain.html', attributes: []},
{name: 'dparse.ast.AsmPrimaryExp.register', kind: "variabledeclaration", path: './dparse/ast/AsmPrimaryExp.register.html', attributes: []},
{name: 'dparse.ast.AsmPrimaryExp.segmentOverrideSuffix', kind: "variabledeclaration", path: './dparse/ast/AsmPrimaryExp.segmentOverrideSuffix.html', attributes: []},
{name: 'dparse.ast.AsmPrimaryExp.token', kind: "variabledeclaration", path: './dparse/ast/AsmPrimaryExp.token.html', attributes: []},
{name: 'dparse.ast.AsmRelExp', kind: "classdeclaration", path: './dparse/ast/AsmRelExp.html', attributes: []},
{name: 'dparse.ast.AsmRelExp.accept', kind: "functiondeclaration", path: './dparse/ast/AsmRelExp.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AsmRelExp.operator', kind: "variabledeclaration", path: './dparse/ast/AsmRelExp.operator.html', attributes: []},
{name: 'dparse.ast.AsmShiftExp', kind: "classdeclaration", path: './dparse/ast/AsmShiftExp.html', attributes: []},
{name: 'dparse.ast.AsmShiftExp.accept', kind: "functiondeclaration", path: './dparse/ast/AsmShiftExp.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AsmShiftExp.operator', kind: "variabledeclaration", path: './dparse/ast/AsmShiftExp.operator.html', attributes: []},
{name: 'dparse.ast.AsmStatement', kind: "classdeclaration", path: './dparse/ast/AsmStatement.html', attributes: []},
{name: 'dparse.ast.AsmStatement.accept', kind: "functiondeclaration", path: './dparse/ast/AsmStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AsmStatement.asmInstructions', kind: "variabledeclaration", path: './dparse/ast/AsmStatement.asmInstructions.html', attributes: []},
{name: 'dparse.ast.AsmStatement.functionAttributes', kind: "variabledeclaration", path: './dparse/ast/AsmStatement.functionAttributes.html', attributes: []},
{name: 'dparse.ast.AsmStatement.gccAsmInstructions', kind: "variabledeclaration", path: './dparse/ast/AsmStatement.gccAsmInstructions.html', attributes: []},
{name: 'dparse.ast.AsmTypePrefix', kind: "classdeclaration", path: './dparse/ast/AsmTypePrefix.html', attributes: []},
{name: 'dparse.ast.AsmTypePrefix.accept', kind: "functiondeclaration", path: './dparse/ast/AsmTypePrefix.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AsmTypePrefix.left', kind: "variabledeclaration", path: './dparse/ast/AsmTypePrefix.left.html', attributes: []},
{name: 'dparse.ast.AsmTypePrefix.right', kind: "variabledeclaration", path: './dparse/ast/AsmTypePrefix.right.html', attributes: []},
{name: 'dparse.ast.AsmUnaExp', kind: "classdeclaration", path: './dparse/ast/AsmUnaExp.html', attributes: []},
{name: 'dparse.ast.AsmUnaExp.accept', kind: "functiondeclaration", path: './dparse/ast/AsmUnaExp.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AsmUnaExp.asmExp', kind: "variabledeclaration", path: './dparse/ast/AsmUnaExp.asmExp.html', attributes: []},
{name: 'dparse.ast.AsmUnaExp.asmPrimaryExp', kind: "variabledeclaration", path: './dparse/ast/AsmUnaExp.asmPrimaryExp.html', attributes: []},
{name: 'dparse.ast.AsmUnaExp.asmTypePrefix', kind: "variabledeclaration", path: './dparse/ast/AsmUnaExp.asmTypePrefix.html', attributes: []},
{name: 'dparse.ast.AsmUnaExp.asmUnaExp', kind: "variabledeclaration", path: './dparse/ast/AsmUnaExp.asmUnaExp.html', attributes: []},
{name: 'dparse.ast.AsmUnaExp.prefix', kind: "variabledeclaration", path: './dparse/ast/AsmUnaExp.prefix.html', attributes: []},
{name: 'dparse.ast.AsmXorExp', kind: "classdeclaration", path: './dparse/ast/AsmXorExp.html', attributes: []},
{name: 'dparse.ast.AsmXorExp.accept', kind: "functiondeclaration", path: './dparse/ast/AsmXorExp.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AssertArguments', kind: "classdeclaration", path: './dparse/ast/AssertArguments.html', attributes: []},
{name: 'dparse.ast.AssertArguments.accept', kind: "functiondeclaration", path: './dparse/ast/AssertArguments.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AssertArguments.assertion', kind: "variabledeclaration", path: './dparse/ast/AssertArguments.assertion.html', attributes: []},
{name: 'dparse.ast.AssertArguments.firstMessage', kind: "functiondeclaration", path: './dparse/ast/AssertArguments.firstMessage.html', attributes: ["pure", "nothrow", "nogc", "safe", "inout"]},
{name: 'dparse.ast.AssertArguments.message', kind: "aliasdeclaration", path: './dparse/ast/AssertArguments.message.html', attributes: ["deprecated"]},
{name: 'dparse.ast.AssertArguments.messageParts', kind: "variabledeclaration", path: './dparse/ast/AssertArguments.messageParts.html', attributes: []},
{name: 'dparse.ast.AssertExpression', kind: "classdeclaration", path: './dparse/ast/AssertExpression.html', attributes: []},
{name: 'dparse.ast.AssertExpression.accept', kind: "functiondeclaration", path: './dparse/ast/AssertExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AssertExpression.assertArguments', kind: "variabledeclaration", path: './dparse/ast/AssertExpression.assertArguments.html', attributes: []},
{name: 'dparse.ast.AssertExpression.column', kind: "variabledeclaration", path: './dparse/ast/AssertExpression.column.html', attributes: []},
{name: 'dparse.ast.AssertExpression.line', kind: "variabledeclaration", path: './dparse/ast/AssertExpression.line.html', attributes: []},
{name: 'dparse.ast.AssignExpression', kind: "classdeclaration", path: './dparse/ast/AssignExpression.html', attributes: []},
{name: 'dparse.ast.AssignExpression.accept', kind: "functiondeclaration", path: './dparse/ast/AssignExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AssignExpression.column', kind: "variabledeclaration", path: './dparse/ast/AssignExpression.column.html', attributes: []},
{name: 'dparse.ast.AssignExpression.expression', kind: "variabledeclaration", path: './dparse/ast/AssignExpression.expression.html', attributes: []},
{name: 'dparse.ast.AssignExpression.line', kind: "variabledeclaration", path: './dparse/ast/AssignExpression.line.html', attributes: []},
{name: 'dparse.ast.AssignExpression.operator', kind: "variabledeclaration", path: './dparse/ast/AssignExpression.operator.html', attributes: []},
{name: 'dparse.ast.AssignExpression.ternaryExpression', kind: "variabledeclaration", path: './dparse/ast/AssignExpression.ternaryExpression.html', attributes: []},
{name: 'dparse.ast.AssocArrayLiteral', kind: "classdeclaration", path: './dparse/ast/AssocArrayLiteral.html', attributes: []},
{name: 'dparse.ast.AssocArrayLiteral.accept', kind: "functiondeclaration", path: './dparse/ast/AssocArrayLiteral.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AssocArrayLiteral.keyValuePairs', kind: "variabledeclaration", path: './dparse/ast/AssocArrayLiteral.keyValuePairs.html', attributes: []},
{name: 'dparse.ast.ASTNode', kind: "interfacedeclaration", path: './dparse/ast/ASTNode.html', attributes: []},
{name: 'dparse.ast.ASTNode.accept', kind: "functiondeclaration", path: './dparse/ast/ASTNode.accept.html', attributes: ["abstract", "const"]},
{name: 'dparse.ast.ASTVisitor', kind: "classdeclaration", path: './dparse/ast/ASTVisitor.html', attributes: []},
{name: 'dparse.ast.ASTVisitor.dynamicDispatch', kind: "functiondeclaration", path: './dparse/ast/ASTVisitor.dynamicDispatch.html', attributes: []},
{name: 'dparse.ast.ASTVisitor.visit', kind: "functiondeclaration", path: './dparse/ast/ASTVisitor.visit.html', attributes: []},
{name: 'dparse.ast.AtAttribute', kind: "classdeclaration", path: './dparse/ast/AtAttribute.html', attributes: []},
{name: 'dparse.ast.AtAttribute.accept', kind: "functiondeclaration", path: './dparse/ast/AtAttribute.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AtAttribute.argumentList', kind: "variabledeclaration", path: './dparse/ast/AtAttribute.argumentList.html', attributes: []},
{name: 'dparse.ast.AtAttribute.endLocation', kind: "variabledeclaration", path: './dparse/ast/AtAttribute.endLocation.html', attributes: []},
{name: 'dparse.ast.AtAttribute.identifier', kind: "variabledeclaration", path: './dparse/ast/AtAttribute.identifier.html', attributes: []},
{name: 'dparse.ast.AtAttribute.startLocation', kind: "variabledeclaration", path: './dparse/ast/AtAttribute.startLocation.html', attributes: []},
{name: 'dparse.ast.AtAttribute.templateInstance', kind: "variabledeclaration", path: './dparse/ast/AtAttribute.templateInstance.html', attributes: []},
{name: 'dparse.ast.AtAttribute.templateSingleArgument', kind: "variabledeclaration", path: './dparse/ast/AtAttribute.templateSingleArgument.html', attributes: []},
{name: 'dparse.ast.AtAttribute.token', kind: "functiondeclaration", path: './dparse/ast/AtAttribute.token.html', attributes: ["pure", "nothrow", "nogc", "scope", "safe", "const"]},
{name: 'dparse.ast.AtAttribute.useParen', kind: "variabledeclaration", path: './dparse/ast/AtAttribute.useParen.html', attributes: []},
{name: 'dparse.ast.Attribute', kind: "classdeclaration", path: './dparse/ast/Attribute.html', attributes: []},
{name: 'dparse.ast.Attribute.accept', kind: "functiondeclaration", path: './dparse/ast/Attribute.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Attribute.alignAttribute', kind: "variabledeclaration", path: './dparse/ast/Attribute.alignAttribute.html', attributes: []},
{name: 'dparse.ast.Attribute.atAttribute', kind: "variabledeclaration", path: './dparse/ast/Attribute.atAttribute.html', attributes: []},
{name: 'dparse.ast.Attribute.attribute', kind: "variabledeclaration", path: './dparse/ast/Attribute.attribute.html', attributes: []},
{name: 'dparse.ast.Attribute.deprecated_', kind: "variabledeclaration", path: './dparse/ast/Attribute.deprecated_.html', attributes: []},
{name: 'dparse.ast.Attribute.identifierChain', kind: "variabledeclaration", path: './dparse/ast/Attribute.identifierChain.html', attributes: []},
{name: 'dparse.ast.Attribute.linkageAttribute', kind: "variabledeclaration", path: './dparse/ast/Attribute.linkageAttribute.html', attributes: []},
{name: 'dparse.ast.Attribute.pragmaExpression', kind: "variabledeclaration", path: './dparse/ast/Attribute.pragmaExpression.html', attributes: []},
{name: 'dparse.ast.AttributeDeclaration', kind: "classdeclaration", path: './dparse/ast/AttributeDeclaration.html', attributes: []},
{name: 'dparse.ast.AttributeDeclaration.accept', kind: "functiondeclaration", path: './dparse/ast/AttributeDeclaration.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AttributeDeclaration.attribute', kind: "variabledeclaration", path: './dparse/ast/AttributeDeclaration.attribute.html', attributes: []},
{name: 'dparse.ast.AttributeDeclaration.line', kind: "variabledeclaration", path: './dparse/ast/AttributeDeclaration.line.html', attributes: []},
{name: 'dparse.ast.AutoDeclaration', kind: "classdeclaration", path: './dparse/ast/AutoDeclaration.html', attributes: []},
{name: 'dparse.ast.AutoDeclaration.accept', kind: "functiondeclaration", path: './dparse/ast/AutoDeclaration.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AutoDeclaration.comment', kind: "variabledeclaration", path: './dparse/ast/AutoDeclaration.comment.html', attributes: []},
{name: 'dparse.ast.AutoDeclaration.parts', kind: "variabledeclaration", path: './dparse/ast/AutoDeclaration.parts.html', attributes: []},
{name: 'dparse.ast.AutoDeclaration.storageClasses', kind: "variabledeclaration", path: './dparse/ast/AutoDeclaration.storageClasses.html', attributes: []},
{name: 'dparse.ast.AutoDeclarationPart', kind: "classdeclaration", path: './dparse/ast/AutoDeclarationPart.html', attributes: []},
{name: 'dparse.ast.AutoDeclarationPart.accept', kind: "functiondeclaration", path: './dparse/ast/AutoDeclarationPart.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.AutoDeclarationPart.identifier', kind: "variabledeclaration", path: './dparse/ast/AutoDeclarationPart.identifier.html', attributes: []},
{name: 'dparse.ast.AutoDeclarationPart.initializer', kind: "variabledeclaration", path: './dparse/ast/AutoDeclarationPart.initializer.html', attributes: []},
{name: 'dparse.ast.AutoDeclarationPart.templateParameters', kind: "variabledeclaration", path: './dparse/ast/AutoDeclarationPart.templateParameters.html', attributes: []},
{name: 'dparse.ast.BaseClass', kind: "classdeclaration", path: './dparse/ast/BaseClass.html', attributes: []},
{name: 'dparse.ast.BaseClass.accept', kind: "functiondeclaration", path: './dparse/ast/BaseClass.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.BaseClass.type2', kind: "variabledeclaration", path: './dparse/ast/BaseClass.type2.html', attributes: []},
{name: 'dparse.ast.BaseClassList', kind: "classdeclaration", path: './dparse/ast/BaseClassList.html', attributes: []},
{name: 'dparse.ast.BaseClassList.accept', kind: "functiondeclaration", path: './dparse/ast/BaseClassList.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.BaseClassList.items', kind: "variabledeclaration", path: './dparse/ast/BaseClassList.items.html', attributes: []},
{name: 'dparse.ast.BaseNode', kind: "classdeclaration", path: './dparse/ast/BaseNode.html', attributes: []},
{name: 'dparse.ast.BaseNode.accept', kind: "functiondeclaration", path: './dparse/ast/BaseNode.accept.html', attributes: ["abstract", "const"]},
{name: 'dparse.ast.BinaryExpressionBody', kind: "templatedeclaration", path: './dparse/ast/BinaryExpressionBody.html', attributes: []},
{name: 'dparse.ast.BinaryExpressionBody.column', kind: "variabledeclaration", path: './dparse/ast/BinaryExpressionBody.column.html', attributes: []},
{name: 'dparse.ast.BinaryExpressionBody.left', kind: "variabledeclaration", path: './dparse/ast/BinaryExpressionBody.left.html', attributes: []},
{name: 'dparse.ast.BinaryExpressionBody.line', kind: "variabledeclaration", path: './dparse/ast/BinaryExpressionBody.line.html', attributes: []},
{name: 'dparse.ast.BinaryExpressionBody.right', kind: "variabledeclaration", path: './dparse/ast/BinaryExpressionBody.right.html', attributes: []},
{name: 'dparse.ast.BitfieldWidth', kind: "classdeclaration", path: './dparse/ast/BitfieldWidth.html', attributes: []},
{name: 'dparse.ast.BitfieldWidth.accept', kind: "functiondeclaration", path: './dparse/ast/BitfieldWidth.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.BitfieldWidth.expression', kind: "variabledeclaration", path: './dparse/ast/BitfieldWidth.expression.html', attributes: []},
{name: 'dparse.ast.BlockStatement', kind: "classdeclaration", path: './dparse/ast/BlockStatement.html', attributes: []},
{name: 'dparse.ast.BlockStatement.accept', kind: "functiondeclaration", path: './dparse/ast/BlockStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.BlockStatement.declarationsAndStatements', kind: "variabledeclaration", path: './dparse/ast/BlockStatement.declarationsAndStatements.html', attributes: []},
{name: 'dparse.ast.BlockStatement.endLocation', kind: "variabledeclaration", path: './dparse/ast/BlockStatement.endLocation.html', attributes: []},
{name: 'dparse.ast.BlockStatement.startLocation', kind: "variabledeclaration", path: './dparse/ast/BlockStatement.startLocation.html', attributes: []},
{name: 'dparse.ast.BreakStatement', kind: "classdeclaration", path: './dparse/ast/BreakStatement.html', attributes: []},
{name: 'dparse.ast.BreakStatement.accept', kind: "functiondeclaration", path: './dparse/ast/BreakStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.BreakStatement.label', kind: "variabledeclaration", path: './dparse/ast/BreakStatement.label.html', attributes: []},
{name: 'dparse.ast.CaseRangeStatement', kind: "classdeclaration", path: './dparse/ast/CaseRangeStatement.html', attributes: []},
{name: 'dparse.ast.CaseRangeStatement.accept', kind: "functiondeclaration", path: './dparse/ast/CaseRangeStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.CaseRangeStatement.colonLocation', kind: "variabledeclaration", path: './dparse/ast/CaseRangeStatement.colonLocation.html', attributes: []},
{name: 'dparse.ast.CaseRangeStatement.declarationsAndStatements', kind: "variabledeclaration", path: './dparse/ast/CaseRangeStatement.declarationsAndStatements.html', attributes: []},
{name: 'dparse.ast.CaseRangeStatement.high', kind: "variabledeclaration", path: './dparse/ast/CaseRangeStatement.high.html', attributes: []},
{name: 'dparse.ast.CaseRangeStatement.low', kind: "variabledeclaration", path: './dparse/ast/CaseRangeStatement.low.html', attributes: []},
{name: 'dparse.ast.CaseStatement', kind: "classdeclaration", path: './dparse/ast/CaseStatement.html', attributes: []},
{name: 'dparse.ast.CaseStatement.accept', kind: "functiondeclaration", path: './dparse/ast/CaseStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.CaseStatement.argumentList', kind: "variabledeclaration", path: './dparse/ast/CaseStatement.argumentList.html', attributes: []},
{name: 'dparse.ast.CaseStatement.colonLocation', kind: "variabledeclaration", path: './dparse/ast/CaseStatement.colonLocation.html', attributes: []},
{name: 'dparse.ast.CaseStatement.declarationsAndStatements', kind: "variabledeclaration", path: './dparse/ast/CaseStatement.declarationsAndStatements.html', attributes: []},
{name: 'dparse.ast.CastExpression', kind: "classdeclaration", path: './dparse/ast/CastExpression.html', attributes: []},
{name: 'dparse.ast.CastExpression.accept', kind: "functiondeclaration", path: './dparse/ast/CastExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.CastExpression.castQualifier', kind: "variabledeclaration", path: './dparse/ast/CastExpression.castQualifier.html', attributes: []},
{name: 'dparse.ast.CastExpression.type', kind: "variabledeclaration", path: './dparse/ast/CastExpression.type.html', attributes: []},
{name: 'dparse.ast.CastExpression.unaryExpression', kind: "variabledeclaration", path: './dparse/ast/CastExpression.unaryExpression.html', attributes: []},
{name: 'dparse.ast.CastQualifier', kind: "classdeclaration", path: './dparse/ast/CastQualifier.html', attributes: []},
{name: 'dparse.ast.CastQualifier.accept', kind: "functiondeclaration", path: './dparse/ast/CastQualifier.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.CastQualifier.first', kind: "variabledeclaration", path: './dparse/ast/CastQualifier.first.html', attributes: []},
{name: 'dparse.ast.CastQualifier.second', kind: "variabledeclaration", path: './dparse/ast/CastQualifier.second.html', attributes: []},
{name: 'dparse.ast.Catch', kind: "classdeclaration", path: './dparse/ast/Catch.html', attributes: []},
{name: 'dparse.ast.Catch.accept', kind: "functiondeclaration", path: './dparse/ast/Catch.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Catch.declarationOrStatement', kind: "variabledeclaration", path: './dparse/ast/Catch.declarationOrStatement.html', attributes: []},
{name: 'dparse.ast.Catch.identifier', kind: "variabledeclaration", path: './dparse/ast/Catch.identifier.html', attributes: []},
{name: 'dparse.ast.Catch.type', kind: "variabledeclaration", path: './dparse/ast/Catch.type.html', attributes: []},
{name: 'dparse.ast.Catches', kind: "classdeclaration", path: './dparse/ast/Catches.html', attributes: []},
{name: 'dparse.ast.Catches.accept', kind: "functiondeclaration", path: './dparse/ast/Catches.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Catches.catches', kind: "variabledeclaration", path: './dparse/ast/Catches.catches.html', attributes: []},
{name: 'dparse.ast.Catches.lastCatch', kind: "variabledeclaration", path: './dparse/ast/Catches.lastCatch.html', attributes: []},
{name: 'dparse.ast.ClassDeclaration', kind: "classdeclaration", path: './dparse/ast/ClassDeclaration.html', attributes: []},
{name: 'dparse.ast.ClassDeclaration.accept', kind: "functiondeclaration", path: './dparse/ast/ClassDeclaration.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.ClassDeclaration.baseClassList', kind: "variabledeclaration", path: './dparse/ast/ClassDeclaration.baseClassList.html', attributes: []},
{name: 'dparse.ast.ClassDeclaration.comment', kind: "variabledeclaration", path: './dparse/ast/ClassDeclaration.comment.html', attributes: []},
{name: 'dparse.ast.ClassDeclaration.constraint', kind: "variabledeclaration", path: './dparse/ast/ClassDeclaration.constraint.html', attributes: []},
{name: 'dparse.ast.ClassDeclaration.name', kind: "variabledeclaration", path: './dparse/ast/ClassDeclaration.name.html', attributes: []},
{name: 'dparse.ast.ClassDeclaration.structBody', kind: "variabledeclaration", path: './dparse/ast/ClassDeclaration.structBody.html', attributes: []},
{name: 'dparse.ast.ClassDeclaration.templateParameters', kind: "variabledeclaration", path: './dparse/ast/ClassDeclaration.templateParameters.html', attributes: []},
{name: 'dparse.ast.CmpExpression', kind: "classdeclaration", path: './dparse/ast/CmpExpression.html', attributes: []},
{name: 'dparse.ast.CmpExpression.accept', kind: "functiondeclaration", path: './dparse/ast/CmpExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.CmpExpression.equalExpression', kind: "variabledeclaration", path: './dparse/ast/CmpExpression.equalExpression.html', attributes: []},
{name: 'dparse.ast.CmpExpression.identityExpression', kind: "variabledeclaration", path: './dparse/ast/CmpExpression.identityExpression.html', attributes: []},
{name: 'dparse.ast.CmpExpression.inExpression', kind: "variabledeclaration", path: './dparse/ast/CmpExpression.inExpression.html', attributes: []},
{name: 'dparse.ast.CmpExpression.relExpression', kind: "variabledeclaration", path: './dparse/ast/CmpExpression.relExpression.html', attributes: []},
{name: 'dparse.ast.CmpExpression.shiftExpression', kind: "variabledeclaration", path: './dparse/ast/CmpExpression.shiftExpression.html', attributes: []},
{name: 'dparse.ast.CompileCondition', kind: "classdeclaration", path: './dparse/ast/CompileCondition.html', attributes: []},
{name: 'dparse.ast.CompileCondition.accept', kind: "functiondeclaration", path: './dparse/ast/CompileCondition.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.CompileCondition.debugCondition', kind: "variabledeclaration", path: './dparse/ast/CompileCondition.debugCondition.html', attributes: []},
{name: 'dparse.ast.CompileCondition.staticIfCondition', kind: "variabledeclaration", path: './dparse/ast/CompileCondition.staticIfCondition.html', attributes: []},
{name: 'dparse.ast.CompileCondition.versionCondition', kind: "variabledeclaration", path: './dparse/ast/CompileCondition.versionCondition.html', attributes: []},
{name: 'dparse.ast.ConditionalDeclaration', kind: "classdeclaration", path: './dparse/ast/ConditionalDeclaration.html', attributes: []},
{name: 'dparse.ast.ConditionalDeclaration.accept', kind: "functiondeclaration", path: './dparse/ast/ConditionalDeclaration.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.ConditionalDeclaration.compileCondition', kind: "variabledeclaration", path: './dparse/ast/ConditionalDeclaration.compileCondition.html', attributes: []},
{name: 'dparse.ast.ConditionalDeclaration.falseDeclarations', kind: "variabledeclaration", path: './dparse/ast/ConditionalDeclaration.falseDeclarations.html', attributes: []},
{name: 'dparse.ast.ConditionalDeclaration.falseStyle', kind: "variabledeclaration", path: './dparse/ast/ConditionalDeclaration.falseStyle.html', attributes: []},
{name: 'dparse.ast.ConditionalDeclaration.hasElse', kind: "variabledeclaration", path: './dparse/ast/ConditionalDeclaration.hasElse.html', attributes: []},
{name: 'dparse.ast.ConditionalDeclaration.trueDeclarations', kind: "variabledeclaration", path: './dparse/ast/ConditionalDeclaration.trueDeclarations.html', attributes: []},
{name: 'dparse.ast.ConditionalDeclaration.trueStyle', kind: "variabledeclaration", path: './dparse/ast/ConditionalDeclaration.trueStyle.html', attributes: []},
{name: 'dparse.ast.ConditionalStatement', kind: "classdeclaration", path: './dparse/ast/ConditionalStatement.html', attributes: []},
{name: 'dparse.ast.ConditionalStatement.accept', kind: "functiondeclaration", path: './dparse/ast/ConditionalStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.ConditionalStatement.compileCondition', kind: "variabledeclaration", path: './dparse/ast/ConditionalStatement.compileCondition.html', attributes: []},
{name: 'dparse.ast.ConditionalStatement.falseStatement', kind: "variabledeclaration", path: './dparse/ast/ConditionalStatement.falseStatement.html', attributes: []},
{name: 'dparse.ast.ConditionalStatement.trueStatement', kind: "variabledeclaration", path: './dparse/ast/ConditionalStatement.trueStatement.html', attributes: []},
{name: 'dparse.ast.Constraint', kind: "classdeclaration", path: './dparse/ast/Constraint.html', attributes: []},
{name: 'dparse.ast.Constraint.accept', kind: "functiondeclaration", path: './dparse/ast/Constraint.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Constraint.expression', kind: "variabledeclaration", path: './dparse/ast/Constraint.expression.html', attributes: []},
{name: 'dparse.ast.Constraint.location', kind: "variabledeclaration", path: './dparse/ast/Constraint.location.html', attributes: []},
{name: 'dparse.ast.Constructor', kind: "classdeclaration", path: './dparse/ast/Constructor.html', attributes: []},
{name: 'dparse.ast.Constructor.accept', kind: "functiondeclaration", path: './dparse/ast/Constructor.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Constructor.column', kind: "variabledeclaration", path: './dparse/ast/Constructor.column.html', attributes: []},
{name: 'dparse.ast.Constructor.comment', kind: "variabledeclaration", path: './dparse/ast/Constructor.comment.html', attributes: []},
{name: 'dparse.ast.Constructor.constraint', kind: "variabledeclaration", path: './dparse/ast/Constructor.constraint.html', attributes: []},
{name: 'dparse.ast.Constructor.functionBody', kind: "variabledeclaration", path: './dparse/ast/Constructor.functionBody.html', attributes: []},
{name: 'dparse.ast.Constructor.line', kind: "variabledeclaration", path: './dparse/ast/Constructor.line.html', attributes: []},
{name: 'dparse.ast.Constructor.location', kind: "variabledeclaration", path: './dparse/ast/Constructor.location.html', attributes: []},
{name: 'dparse.ast.Constructor.memberFunctionAttributes', kind: "variabledeclaration", path: './dparse/ast/Constructor.memberFunctionAttributes.html', attributes: []},
{name: 'dparse.ast.Constructor.parameters', kind: "variabledeclaration", path: './dparse/ast/Constructor.parameters.html', attributes: []},
{name: 'dparse.ast.Constructor.templateParameters', kind: "variabledeclaration", path: './dparse/ast/Constructor.templateParameters.html', attributes: []},
{name: 'dparse.ast.ContinueStatement', kind: "classdeclaration", path: './dparse/ast/ContinueStatement.html', attributes: []},
{name: 'dparse.ast.ContinueStatement.accept', kind: "functiondeclaration", path: './dparse/ast/ContinueStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.ContinueStatement.label', kind: "variabledeclaration", path: './dparse/ast/ContinueStatement.label.html', attributes: []},
{name: 'dparse.ast.DebugCondition', kind: "classdeclaration", path: './dparse/ast/DebugCondition.html', attributes: []},
{name: 'dparse.ast.DebugCondition.accept', kind: "functiondeclaration", path: './dparse/ast/DebugCondition.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.DebugCondition.debugIndex', kind: "variabledeclaration", path: './dparse/ast/DebugCondition.debugIndex.html', attributes: []},
{name: 'dparse.ast.DebugCondition.identifierOrInteger', kind: "variabledeclaration", path: './dparse/ast/DebugCondition.identifierOrInteger.html', attributes: []},
{name: 'dparse.ast.DebugSpecification', kind: "classdeclaration", path: './dparse/ast/DebugSpecification.html', attributes: []},
{name: 'dparse.ast.DebugSpecification.accept', kind: "functiondeclaration", path: './dparse/ast/DebugSpecification.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.DebugSpecification.identifierOrInteger', kind: "variabledeclaration", path: './dparse/ast/DebugSpecification.identifierOrInteger.html', attributes: []},
{name: 'dparse.ast.Declaration', kind: "classdeclaration", path: './dparse/ast/Declaration.html', attributes: []},
{name: 'dparse.ast.Declaration.accept', kind: "functiondeclaration", path: './dparse/ast/Declaration.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Declaration.aliasAssign', kind: "functiondeclaration", path: './dparse/ast/Declaration.aliasAssign.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.aliasDeclaration', kind: "functiondeclaration", path: './dparse/ast/Declaration.aliasDeclaration.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.aliasThisDeclaration', kind: "functiondeclaration", path: './dparse/ast/Declaration.aliasThisDeclaration.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.anonymousEnumDeclaration', kind: "functiondeclaration", path: './dparse/ast/Declaration.anonymousEnumDeclaration.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.attributeDeclaration', kind: "functiondeclaration", path: './dparse/ast/Declaration.attributeDeclaration.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.attributes', kind: "variabledeclaration", path: './dparse/ast/Declaration.attributes.html', attributes: []},
{name: 'dparse.ast.Declaration.classDeclaration', kind: "functiondeclaration", path: './dparse/ast/Declaration.classDeclaration.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.conditionalDeclaration', kind: "functiondeclaration", path: './dparse/ast/Declaration.conditionalDeclaration.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.constructor', kind: "functiondeclaration", path: './dparse/ast/Declaration.constructor.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.debugSpecification', kind: "functiondeclaration", path: './dparse/ast/Declaration.debugSpecification.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.declarations', kind: "variabledeclaration", path: './dparse/ast/Declaration.declarations.html', attributes: []},
{name: 'dparse.ast.Declaration.DeclarationTypes', kind: "aliasdeclaration", path: './dparse/ast/Declaration.DeclarationTypes.html', attributes: []},
{name: 'dparse.ast.Declaration.destructor', kind: "functiondeclaration", path: './dparse/ast/Declaration.destructor.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.enumDeclaration', kind: "functiondeclaration", path: './dparse/ast/Declaration.enumDeclaration.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.eponymousTemplateDeclaration', kind: "functiondeclaration", path: './dparse/ast/Declaration.eponymousTemplateDeclaration.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.functionDeclaration', kind: "functiondeclaration", path: './dparse/ast/Declaration.functionDeclaration.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.importDeclaration', kind: "functiondeclaration", path: './dparse/ast/Declaration.importDeclaration.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.interfaceDeclaration', kind: "functiondeclaration", path: './dparse/ast/Declaration.interfaceDeclaration.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.invariant_', kind: "functiondeclaration", path: './dparse/ast/Declaration.invariant_.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.mixinDeclaration', kind: "functiondeclaration", path: './dparse/ast/Declaration.mixinDeclaration.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.mixinTemplateDeclaration', kind: "functiondeclaration", path: './dparse/ast/Declaration.mixinTemplateDeclaration.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.opEquals', kind: "functiondeclaration", path: './dparse/ast/Declaration.opEquals.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Declaration.postblit', kind: "functiondeclaration", path: './dparse/ast/Declaration.postblit.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.pragmaDeclaration', kind: "functiondeclaration", path: './dparse/ast/Declaration.pragmaDeclaration.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.sharedStaticConstructor', kind: "functiondeclaration", path: './dparse/ast/Declaration.sharedStaticConstructor.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.sharedStaticDestructor', kind: "functiondeclaration", path: './dparse/ast/Declaration.sharedStaticDestructor.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.staticAssertDeclaration', kind: "functiondeclaration", path: './dparse/ast/Declaration.staticAssertDeclaration.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.staticConstructor', kind: "functiondeclaration", path: './dparse/ast/Declaration.staticConstructor.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.staticDestructor', kind: "functiondeclaration", path: './dparse/ast/Declaration.staticDestructor.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.staticForeachDeclaration', kind: "functiondeclaration", path: './dparse/ast/Declaration.staticForeachDeclaration.html', attributes: ["property"]},
{name: 'dparse.ast.Declaration.structDeclaration', kind: "functiondeclaration", path: './dparse/ast/Declaration.structDeclaration.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.templateDeclaration', kind: "functiondeclaration", path: './dparse/ast/Declaration.templateDeclaration.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.unionDeclaration', kind: "functiondeclaration", path: './dparse/ast/Declaration.unionDeclaration.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.unittest_', kind: "functiondeclaration", path: './dparse/ast/Declaration.unittest_.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.variableDeclaration', kind: "functiondeclaration", path: './dparse/ast/Declaration.variableDeclaration.html', attributes: ["property", "const"]},
{name: 'dparse.ast.Declaration.versionSpecification', kind: "functiondeclaration", path: './dparse/ast/Declaration.versionSpecification.html', attributes: ["property", "const"]},
{name: 'dparse.ast.DeclarationListStyle', kind: "enumdeclaration", path: './dparse/ast/DeclarationListStyle.html', attributes: []},
{name: 'dparse.ast.DeclarationListStyle.block', kind: "enummemberdeclaration", path: './dparse/ast/DeclarationListStyle.html#block', attributes: []},
{name: 'dparse.ast.DeclarationListStyle.colon', kind: "enummemberdeclaration", path: './dparse/ast/DeclarationListStyle.html#colon', attributes: []},
{name: 'dparse.ast.DeclarationListStyle.single', kind: "enummemberdeclaration", path: './dparse/ast/DeclarationListStyle.html#single', attributes: []},
{name: 'dparse.ast.DeclarationOrStatement', kind: "classdeclaration", path: './dparse/ast/DeclarationOrStatement.html', attributes: []},
{name: 'dparse.ast.DeclarationOrStatement.accept', kind: "functiondeclaration", path: './dparse/ast/DeclarationOrStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.DeclarationOrStatement.declaration', kind: "variabledeclaration", path: './dparse/ast/DeclarationOrStatement.declaration.html', attributes: []},
{name: 'dparse.ast.DeclarationOrStatement.endLocation', kind: "variabledeclaration", path: './dparse/ast/DeclarationOrStatement.endLocation.html', attributes: []},
{name: 'dparse.ast.DeclarationOrStatement.startLocation', kind: "variabledeclaration", path: './dparse/ast/DeclarationOrStatement.startLocation.html', attributes: []},
{name: 'dparse.ast.DeclarationOrStatement.statement', kind: "variabledeclaration", path: './dparse/ast/DeclarationOrStatement.statement.html', attributes: []},
{name: 'dparse.ast.DeclarationsAndStatements', kind: "classdeclaration", path: './dparse/ast/DeclarationsAndStatements.html', attributes: []},
{name: 'dparse.ast.DeclarationsAndStatements.accept', kind: "functiondeclaration", path: './dparse/ast/DeclarationsAndStatements.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.DeclarationsAndStatements.declarationsAndStatements', kind: "variabledeclaration", path: './dparse/ast/DeclarationsAndStatements.declarationsAndStatements.html', attributes: []},
{name: 'dparse.ast.Declarator', kind: "classdeclaration", path: './dparse/ast/Declarator.html', attributes: []},
{name: 'dparse.ast.Declarator.accept', kind: "functiondeclaration", path: './dparse/ast/Declarator.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Declarator.bitfieldWidth', kind: "variabledeclaration", path: './dparse/ast/Declarator.bitfieldWidth.html', attributes: []},
{name: 'dparse.ast.Declarator.comment', kind: "variabledeclaration", path: './dparse/ast/Declarator.comment.html', attributes: []},
{name: 'dparse.ast.Declarator.cstyle', kind: "variabledeclaration", path: './dparse/ast/Declarator.cstyle.html', attributes: []},
{name: 'dparse.ast.Declarator.initializer', kind: "variabledeclaration", path: './dparse/ast/Declarator.initializer.html', attributes: []},
{name: 'dparse.ast.Declarator.name', kind: "variabledeclaration", path: './dparse/ast/Declarator.name.html', attributes: []},
{name: 'dparse.ast.Declarator.templateParameters', kind: "variabledeclaration", path: './dparse/ast/Declarator.templateParameters.html', attributes: []},
{name: 'dparse.ast.DeclaratorIdentifierList', kind: "classdeclaration", path: './dparse/ast/DeclaratorIdentifierList.html', attributes: []},
{name: 'dparse.ast.DeclaratorIdentifierList.accept', kind: "functiondeclaration", path: './dparse/ast/DeclaratorIdentifierList.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.DeclaratorIdentifierList.identifiers', kind: "variabledeclaration", path: './dparse/ast/DeclaratorIdentifierList.identifiers.html', attributes: []},
{name: 'dparse.ast.DefaultStatement', kind: "classdeclaration", path: './dparse/ast/DefaultStatement.html', attributes: []},
{name: 'dparse.ast.DefaultStatement.accept', kind: "functiondeclaration", path: './dparse/ast/DefaultStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.DefaultStatement.colonLocation', kind: "variabledeclaration", path: './dparse/ast/DefaultStatement.colonLocation.html', attributes: []},
{name: 'dparse.ast.DefaultStatement.declarationsAndStatements', kind: "variabledeclaration", path: './dparse/ast/DefaultStatement.declarationsAndStatements.html', attributes: []},
{name: 'dparse.ast.DeleteExpression', kind: "classdeclaration", path: './dparse/ast/DeleteExpression.html', attributes: []},
{name: 'dparse.ast.DeleteExpression.accept', kind: "functiondeclaration", path: './dparse/ast/DeleteExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.DeleteExpression.column', kind: "variabledeclaration", path: './dparse/ast/DeleteExpression.column.html', attributes: []},
{name: 'dparse.ast.DeleteExpression.line', kind: "variabledeclaration", path: './dparse/ast/DeleteExpression.line.html', attributes: []},
{name: 'dparse.ast.DeleteExpression.unaryExpression', kind: "variabledeclaration", path: './dparse/ast/DeleteExpression.unaryExpression.html', attributes: []},
{name: 'dparse.ast.DeleteStatement', kind: "classdeclaration", path: './dparse/ast/DeleteStatement.html', attributes: []},
{name: 'dparse.ast.DeleteStatement.accept', kind: "functiondeclaration", path: './dparse/ast/DeleteStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.DeleteStatement.deleteExpression', kind: "variabledeclaration", path: './dparse/ast/DeleteStatement.deleteExpression.html', attributes: []},
{name: 'dparse.ast.Deprecated', kind: "classdeclaration", path: './dparse/ast/Deprecated.html', attributes: []},
{name: 'dparse.ast.Deprecated.accept', kind: "functiondeclaration", path: './dparse/ast/Deprecated.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Deprecated.assignExpression', kind: "variabledeclaration", path: './dparse/ast/Deprecated.assignExpression.html', attributes: []},
{name: 'dparse.ast.Destructor', kind: "classdeclaration", path: './dparse/ast/Destructor.html', attributes: []},
{name: 'dparse.ast.Destructor.accept', kind: "functiondeclaration", path: './dparse/ast/Destructor.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Destructor.column', kind: "variabledeclaration", path: './dparse/ast/Destructor.column.html', attributes: []},
{name: 'dparse.ast.Destructor.comment', kind: "variabledeclaration", path: './dparse/ast/Destructor.comment.html', attributes: []},
{name: 'dparse.ast.Destructor.functionBody', kind: "variabledeclaration", path: './dparse/ast/Destructor.functionBody.html', attributes: []},
{name: 'dparse.ast.Destructor.index', kind: "variabledeclaration", path: './dparse/ast/Destructor.index.html', attributes: []},
{name: 'dparse.ast.Destructor.line', kind: "variabledeclaration", path: './dparse/ast/Destructor.line.html', attributes: []},
{name: 'dparse.ast.Destructor.memberFunctionAttributes', kind: "variabledeclaration", path: './dparse/ast/Destructor.memberFunctionAttributes.html', attributes: []},
{name: 'dparse.ast.DoStatement', kind: "classdeclaration", path: './dparse/ast/DoStatement.html', attributes: []},
{name: 'dparse.ast.DoStatement.accept', kind: "functiondeclaration", path: './dparse/ast/DoStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.DoStatement.expression', kind: "variabledeclaration", path: './dparse/ast/DoStatement.expression.html', attributes: []},
{name: 'dparse.ast.DoStatement.statementNoCaseNoDefault', kind: "variabledeclaration", path: './dparse/ast/DoStatement.statementNoCaseNoDefault.html', attributes: []},
{name: 'dparse.ast.EnumBody', kind: "classdeclaration", path: './dparse/ast/EnumBody.html', attributes: []},
{name: 'dparse.ast.EnumBody.accept', kind: "functiondeclaration", path: './dparse/ast/EnumBody.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.EnumBody.endLocation', kind: "variabledeclaration", path: './dparse/ast/EnumBody.endLocation.html', attributes: []},
{name: 'dparse.ast.EnumBody.enumMembers', kind: "variabledeclaration", path: './dparse/ast/EnumBody.enumMembers.html', attributes: []},
{name: 'dparse.ast.EnumBody.startLocation', kind: "variabledeclaration", path: './dparse/ast/EnumBody.startLocation.html', attributes: []},
{name: 'dparse.ast.EnumDeclaration', kind: "classdeclaration", path: './dparse/ast/EnumDeclaration.html', attributes: []},
{name: 'dparse.ast.EnumDeclaration.accept', kind: "functiondeclaration", path: './dparse/ast/EnumDeclaration.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.EnumDeclaration.comment', kind: "variabledeclaration", path: './dparse/ast/EnumDeclaration.comment.html', attributes: []},
{name: 'dparse.ast.EnumDeclaration.enumBody', kind: "variabledeclaration", path: './dparse/ast/EnumDeclaration.enumBody.html', attributes: []},
{name: 'dparse.ast.EnumDeclaration.name', kind: "variabledeclaration", path: './dparse/ast/EnumDeclaration.name.html', attributes: []},
{name: 'dparse.ast.EnumDeclaration.type', kind: "variabledeclaration", path: './dparse/ast/EnumDeclaration.type.html', attributes: []},
{name: 'dparse.ast.EnumMember', kind: "classdeclaration", path: './dparse/ast/EnumMember.html', attributes: []},
{name: 'dparse.ast.EnumMember.accept', kind: "functiondeclaration", path: './dparse/ast/EnumMember.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.EnumMember.assignExpression', kind: "variabledeclaration", path: './dparse/ast/EnumMember.assignExpression.html', attributes: []},
{name: 'dparse.ast.EnumMember.comment', kind: "variabledeclaration", path: './dparse/ast/EnumMember.comment.html', attributes: []},
{name: 'dparse.ast.EnumMember.enumMemberAttributes', kind: "variabledeclaration", path: './dparse/ast/EnumMember.enumMemberAttributes.html', attributes: []},
{name: 'dparse.ast.EnumMember.name', kind: "variabledeclaration", path: './dparse/ast/EnumMember.name.html', attributes: []},
{name: 'dparse.ast.EnumMember.type', kind: "variabledeclaration", path: './dparse/ast/EnumMember.type.html', attributes: []},
{name: 'dparse.ast.EnumMemberAttribute', kind: "classdeclaration", path: './dparse/ast/EnumMemberAttribute.html', attributes: []},
{name: 'dparse.ast.EnumMemberAttribute.accept', kind: "functiondeclaration", path: './dparse/ast/EnumMemberAttribute.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.EnumMemberAttribute.atAttribute', kind: "variabledeclaration", path: './dparse/ast/EnumMemberAttribute.atAttribute.html', attributes: []},
{name: 'dparse.ast.EnumMemberAttribute.deprecated_', kind: "variabledeclaration", path: './dparse/ast/EnumMemberAttribute.deprecated_.html', attributes: []},
{name: 'dparse.ast.EponymousTemplateDeclaration', kind: "classdeclaration", path: './dparse/ast/EponymousTemplateDeclaration.html', attributes: []},
{name: 'dparse.ast.EponymousTemplateDeclaration.accept', kind: "functiondeclaration", path: './dparse/ast/EponymousTemplateDeclaration.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.EponymousTemplateDeclaration.assignExpression', kind: "variabledeclaration", path: './dparse/ast/EponymousTemplateDeclaration.assignExpression.html', attributes: []},
{name: 'dparse.ast.EponymousTemplateDeclaration.comment', kind: "variabledeclaration", path: './dparse/ast/EponymousTemplateDeclaration.comment.html', attributes: []},
{name: 'dparse.ast.EponymousTemplateDeclaration.name', kind: "variabledeclaration", path: './dparse/ast/EponymousTemplateDeclaration.name.html', attributes: []},
{name: 'dparse.ast.EponymousTemplateDeclaration.templateParameters', kind: "variabledeclaration", path: './dparse/ast/EponymousTemplateDeclaration.templateParameters.html', attributes: []},
{name: 'dparse.ast.EponymousTemplateDeclaration.type', kind: "variabledeclaration", path: './dparse/ast/EponymousTemplateDeclaration.type.html', attributes: []},
{name: 'dparse.ast.EqualExpression', kind: "classdeclaration", path: './dparse/ast/EqualExpression.html', attributes: []},
{name: 'dparse.ast.EqualExpression.accept', kind: "functiondeclaration", path: './dparse/ast/EqualExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.EqualExpression.operator', kind: "variabledeclaration", path: './dparse/ast/EqualExpression.operator.html', attributes: []},
{name: 'dparse.ast.Expression', kind: "classdeclaration", path: './dparse/ast/Expression.html', attributes: []},
{name: 'dparse.ast.Expression.accept', kind: "functiondeclaration", path: './dparse/ast/Expression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Expression.column', kind: "variabledeclaration", path: './dparse/ast/Expression.column.html', attributes: []},
{name: 'dparse.ast.Expression.items', kind: "variabledeclaration", path: './dparse/ast/Expression.items.html', attributes: []},
{name: 'dparse.ast.Expression.line', kind: "variabledeclaration", path: './dparse/ast/Expression.line.html', attributes: []},
{name: 'dparse.ast.ExpressionNode', kind: "classdeclaration", path: './dparse/ast/ExpressionNode.html', attributes: []},
{name: 'dparse.ast.ExpressionNode.accept', kind: "functiondeclaration", path: './dparse/ast/ExpressionNode.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.ExpressionStatement', kind: "classdeclaration", path: './dparse/ast/ExpressionStatement.html', attributes: []},
{name: 'dparse.ast.ExpressionStatement.accept', kind: "functiondeclaration", path: './dparse/ast/ExpressionStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.ExpressionStatement.expression', kind: "variabledeclaration", path: './dparse/ast/ExpressionStatement.expression.html', attributes: []},
{name: 'dparse.ast.Finally', kind: "classdeclaration", path: './dparse/ast/Finally.html', attributes: []},
{name: 'dparse.ast.Finally.accept', kind: "functiondeclaration", path: './dparse/ast/Finally.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Finally.declarationOrStatement', kind: "variabledeclaration", path: './dparse/ast/Finally.declarationOrStatement.html', attributes: []},
{name: 'dparse.ast.FinalSwitchStatement', kind: "classdeclaration", path: './dparse/ast/FinalSwitchStatement.html', attributes: []},
{name: 'dparse.ast.FinalSwitchStatement.accept', kind: "functiondeclaration", path: './dparse/ast/FinalSwitchStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.FinalSwitchStatement.switchStatement', kind: "variabledeclaration", path: './dparse/ast/FinalSwitchStatement.switchStatement.html', attributes: []},
{name: 'dparse.ast.Foreach', kind: "classdeclaration", path: './dparse/ast/Foreach.html', attributes: []},
{name: 'dparse.ast.Foreach.accept', kind: "functiondeclaration", path: './dparse/ast/Foreach.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Foreach.declarations', kind: "variabledeclaration", path: './dparse/ast/Foreach.declarations.html', attributes: []},
{name: 'dparse.ast.Foreach.foreachType', kind: "variabledeclaration", path: './dparse/ast/Foreach.foreachType.html', attributes: []},
{name: 'dparse.ast.Foreach.foreachTypeList', kind: "variabledeclaration", path: './dparse/ast/Foreach.foreachTypeList.html', attributes: []},
{name: 'dparse.ast.Foreach.high', kind: "variabledeclaration", path: './dparse/ast/Foreach.high.html', attributes: []},
{name: 'dparse.ast.Foreach.low', kind: "variabledeclaration", path: './dparse/ast/Foreach.low.html', attributes: []},
{name: 'dparse.ast.Foreach.startIndex', kind: "variabledeclaration", path: './dparse/ast/Foreach.startIndex.html', attributes: []},
{name: 'dparse.ast.Foreach.style', kind: "variabledeclaration", path: './dparse/ast/Foreach.style.html', attributes: []},
{name: 'dparse.ast.Foreach.type', kind: "variabledeclaration", path: './dparse/ast/Foreach.type.html', attributes: []},
{name: 'dparse.ast.ForeachStatement', kind: "aliasdeclaration", path: './dparse/ast/ForeachStatement.html', attributes: []},
{name: 'dparse.ast.ForeachType', kind: "classdeclaration", path: './dparse/ast/ForeachType.html', attributes: []},
{name: 'dparse.ast.ForeachType.accept', kind: "functiondeclaration", path: './dparse/ast/ForeachType.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.ForeachType.identifier', kind: "variabledeclaration", path: './dparse/ast/ForeachType.identifier.html', attributes: []},
{name: 'dparse.ast.ForeachType.isAlias', kind: "variabledeclaration", path: './dparse/ast/ForeachType.isAlias.html', attributes: []},
{name: 'dparse.ast.ForeachType.isEnum', kind: "variabledeclaration", path: './dparse/ast/ForeachType.isEnum.html', attributes: []},
{name: 'dparse.ast.ForeachType.isRef', kind: "variabledeclaration", path: './dparse/ast/ForeachType.isRef.html', attributes: []},
{name: 'dparse.ast.ForeachType.isScope', kind: "variabledeclaration", path: './dparse/ast/ForeachType.isScope.html', attributes: []},
{name: 'dparse.ast.ForeachType.type', kind: "variabledeclaration", path: './dparse/ast/ForeachType.type.html', attributes: []},
{name: 'dparse.ast.ForeachType.typeConstructors', kind: "variabledeclaration", path: './dparse/ast/ForeachType.typeConstructors.html', attributes: []},
{name: 'dparse.ast.ForeachTypeList', kind: "classdeclaration", path: './dparse/ast/ForeachTypeList.html', attributes: []},
{name: 'dparse.ast.ForeachTypeList.accept', kind: "functiondeclaration", path: './dparse/ast/ForeachTypeList.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.ForeachTypeList.items', kind: "variabledeclaration", path: './dparse/ast/ForeachTypeList.items.html', attributes: []},
{name: 'dparse.ast.ForStatement', kind: "classdeclaration", path: './dparse/ast/ForStatement.html', attributes: []},
{name: 'dparse.ast.ForStatement.accept', kind: "functiondeclaration", path: './dparse/ast/ForStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.ForStatement.declarationOrStatement', kind: "variabledeclaration", path: './dparse/ast/ForStatement.declarationOrStatement.html', attributes: []},
{name: 'dparse.ast.ForStatement.increment', kind: "variabledeclaration", path: './dparse/ast/ForStatement.increment.html', attributes: []},
{name: 'dparse.ast.ForStatement.initialization', kind: "variabledeclaration", path: './dparse/ast/ForStatement.initialization.html', attributes: []},
{name: 'dparse.ast.ForStatement.startIndex', kind: "variabledeclaration", path: './dparse/ast/ForStatement.startIndex.html', attributes: []},
{name: 'dparse.ast.ForStatement.test', kind: "variabledeclaration", path: './dparse/ast/ForStatement.test.html', attributes: []},
{name: 'dparse.ast.FunctionAttribute', kind: "classdeclaration", path: './dparse/ast/FunctionAttribute.html', attributes: []},
{name: 'dparse.ast.FunctionAttribute.accept', kind: "functiondeclaration", path: './dparse/ast/FunctionAttribute.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.FunctionAttribute.atAttribute', kind: "variabledeclaration", path: './dparse/ast/FunctionAttribute.atAttribute.html', attributes: []},
{name: 'dparse.ast.FunctionAttribute.token', kind: "variabledeclaration", path: './dparse/ast/FunctionAttribute.token.html', attributes: []},
{name: 'dparse.ast.FunctionBody', kind: "classdeclaration", path: './dparse/ast/FunctionBody.html', attributes: []},
{name: 'dparse.ast.FunctionBody.accept', kind: "functiondeclaration", path: './dparse/ast/FunctionBody.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.FunctionBody.endLocation', kind: "variabledeclaration", path: './dparse/ast/FunctionBody.endLocation.html', attributes: []},
{name: 'dparse.ast.FunctionBody.missingFunctionBody', kind: "variabledeclaration", path: './dparse/ast/FunctionBody.missingFunctionBody.html', attributes: []},
{name: 'dparse.ast.FunctionBody.shortenedFunctionBody', kind: "variabledeclaration", path: './dparse/ast/FunctionBody.shortenedFunctionBody.html', attributes: []},
{name: 'dparse.ast.FunctionBody.specifiedFunctionBody', kind: "variabledeclaration", path: './dparse/ast/FunctionBody.specifiedFunctionBody.html', attributes: []},
{name: 'dparse.ast.FunctionCallExpression', kind: "classdeclaration", path: './dparse/ast/FunctionCallExpression.html', attributes: []},
{name: 'dparse.ast.FunctionCallExpression.accept', kind: "functiondeclaration", path: './dparse/ast/FunctionCallExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.FunctionCallExpression.arguments', kind: "variabledeclaration", path: './dparse/ast/FunctionCallExpression.arguments.html', attributes: []},
{name: 'dparse.ast.FunctionCallExpression.templateArguments', kind: "variabledeclaration", path: './dparse/ast/FunctionCallExpression.templateArguments.html', attributes: []},
{name: 'dparse.ast.FunctionCallExpression.type', kind: "variabledeclaration", path: './dparse/ast/FunctionCallExpression.type.html', attributes: []},
{name: 'dparse.ast.FunctionCallExpression.unaryExpression', kind: "variabledeclaration", path: './dparse/ast/FunctionCallExpression.unaryExpression.html', attributes: []},
{name: 'dparse.ast.FunctionContract', kind: "classdeclaration", path: './dparse/ast/FunctionContract.html', attributes: []},
{name: 'dparse.ast.FunctionContract.accept', kind: "functiondeclaration", path: './dparse/ast/FunctionContract.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.FunctionContract.inOutContractExpression', kind: "variabledeclaration", path: './dparse/ast/FunctionContract.inOutContractExpression.html', attributes: []},
{name: 'dparse.ast.FunctionContract.inOutStatement', kind: "variabledeclaration", path: './dparse/ast/FunctionContract.inOutStatement.html', attributes: []},
{name: 'dparse.ast.FunctionDeclaration', kind: "classdeclaration", path: './dparse/ast/FunctionDeclaration.html', attributes: []},
{name: 'dparse.ast.FunctionDeclaration.accept', kind: "functiondeclaration", path: './dparse/ast/FunctionDeclaration.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.FunctionDeclaration.attributes', kind: "variabledeclaration", path: './dparse/ast/FunctionDeclaration.attributes.html', attributes: []},
{name: 'dparse.ast.FunctionDeclaration.comment', kind: "variabledeclaration", path: './dparse/ast/FunctionDeclaration.comment.html', attributes: []},
{name: 'dparse.ast.FunctionDeclaration.constraint', kind: "variabledeclaration", path: './dparse/ast/FunctionDeclaration.constraint.html', attributes: []},
{name: 'dparse.ast.FunctionDeclaration.functionBody', kind: "variabledeclaration", path: './dparse/ast/FunctionDeclaration.functionBody.html', attributes: []},
{name: 'dparse.ast.FunctionDeclaration.hasAuto', kind: "variabledeclaration", path: './dparse/ast/FunctionDeclaration.hasAuto.html', attributes: []},
{name: 'dparse.ast.FunctionDeclaration.hasRef', kind: "variabledeclaration", path: './dparse/ast/FunctionDeclaration.hasRef.html', attributes: []},
{name: 'dparse.ast.FunctionDeclaration.memberFunctionAttributes', kind: "variabledeclaration", path: './dparse/ast/FunctionDeclaration.memberFunctionAttributes.html', attributes: []},
{name: 'dparse.ast.FunctionDeclaration.name', kind: "variabledeclaration", path: './dparse/ast/FunctionDeclaration.name.html', attributes: []},
{name: 'dparse.ast.FunctionDeclaration.parameters', kind: "variabledeclaration", path: './dparse/ast/FunctionDeclaration.parameters.html', attributes: []},
{name: 'dparse.ast.FunctionDeclaration.returnType', kind: "variabledeclaration", path: './dparse/ast/FunctionDeclaration.returnType.html', attributes: []},
{name: 'dparse.ast.FunctionDeclaration.storageClasses', kind: "variabledeclaration", path: './dparse/ast/FunctionDeclaration.storageClasses.html', attributes: []},
{name: 'dparse.ast.FunctionDeclaration.templateParameters', kind: "variabledeclaration", path: './dparse/ast/FunctionDeclaration.templateParameters.html', attributes: []},
{name: 'dparse.ast.FunctionLiteralExpression', kind: "classdeclaration", path: './dparse/ast/FunctionLiteralExpression.html', attributes: []},
{name: 'dparse.ast.FunctionLiteralExpression.accept', kind: "functiondeclaration", path: './dparse/ast/FunctionLiteralExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.FunctionLiteralExpression.assignExpression', kind: "variabledeclaration", path: './dparse/ast/FunctionLiteralExpression.assignExpression.html', attributes: []},
{name: 'dparse.ast.FunctionLiteralExpression.column', kind: "variabledeclaration", path: './dparse/ast/FunctionLiteralExpression.column.html', attributes: []},
{name: 'dparse.ast.FunctionLiteralExpression.functionAttributes', kind: "variabledeclaration", path: './dparse/ast/FunctionLiteralExpression.functionAttributes.html', attributes: []},
{name: 'dparse.ast.FunctionLiteralExpression.functionOrDelegate', kind: "variabledeclaration", path: './dparse/ast/FunctionLiteralExpression.functionOrDelegate.html', attributes: []},
{name: 'dparse.ast.FunctionLiteralExpression.identifier', kind: "variabledeclaration", path: './dparse/ast/FunctionLiteralExpression.identifier.html', attributes: []},
{name: 'dparse.ast.FunctionLiteralExpression.isReturnRef', kind: "functiondeclaration", path: './dparse/ast/FunctionLiteralExpression.isReturnRef.html', attributes: ["deprecated", "const"]},
{name: 'dparse.ast.FunctionLiteralExpression.line', kind: "variabledeclaration", path: './dparse/ast/FunctionLiteralExpression.line.html', attributes: []},
{name: 'dparse.ast.FunctionLiteralExpression.memberFunctionAttributes', kind: "variabledeclaration", path: './dparse/ast/FunctionLiteralExpression.memberFunctionAttributes.html', attributes: []},
{name: 'dparse.ast.FunctionLiteralExpression.parameters', kind: "variabledeclaration", path: './dparse/ast/FunctionLiteralExpression.parameters.html', attributes: []},
{name: 'dparse.ast.FunctionLiteralExpression.returnRefType', kind: "variabledeclaration", path: './dparse/ast/FunctionLiteralExpression.returnRefType.html', attributes: []},
{name: 'dparse.ast.FunctionLiteralExpression.returnType', kind: "variabledeclaration", path: './dparse/ast/FunctionLiteralExpression.returnType.html', attributes: []},
{name: 'dparse.ast.FunctionLiteralExpression.specifiedFunctionBody', kind: "variabledeclaration", path: './dparse/ast/FunctionLiteralExpression.specifiedFunctionBody.html', attributes: []},
{name: 'dparse.ast.GccAsmInstruction', kind: "classdeclaration", path: './dparse/ast/GccAsmInstruction.html', attributes: []},
{name: 'dparse.ast.GccAsmInstruction.accept', kind: "functiondeclaration", path: './dparse/ast/GccAsmInstruction.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.GccAsmInstruction.assemblerTemplate', kind: "variabledeclaration", path: './dparse/ast/GccAsmInstruction.assemblerTemplate.html', attributes: []},
{name: 'dparse.ast.GccAsmInstruction.gotos', kind: "variabledeclaration", path: './dparse/ast/GccAsmInstruction.gotos.html', attributes: []},
{name: 'dparse.ast.GccAsmInstruction.inputOperands', kind: "variabledeclaration", path: './dparse/ast/GccAsmInstruction.inputOperands.html', attributes: []},
{name: 'dparse.ast.GccAsmInstruction.outputOperands', kind: "variabledeclaration", path: './dparse/ast/GccAsmInstruction.outputOperands.html', attributes: []},
{name: 'dparse.ast.GccAsmInstruction.registers', kind: "variabledeclaration", path: './dparse/ast/GccAsmInstruction.registers.html', attributes: []},
{name: 'dparse.ast.GccAsmOperand', kind: "classdeclaration", path: './dparse/ast/GccAsmOperand.html', attributes: []},
{name: 'dparse.ast.GccAsmOperand.accept', kind: "functiondeclaration", path: './dparse/ast/GccAsmOperand.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.GccAsmOperand.constraint', kind: "variabledeclaration", path: './dparse/ast/GccAsmOperand.constraint.html', attributes: []},
{name: 'dparse.ast.GccAsmOperand.expression', kind: "variabledeclaration", path: './dparse/ast/GccAsmOperand.expression.html', attributes: []},
{name: 'dparse.ast.GccAsmOperand.symbolicName', kind: "variabledeclaration", path: './dparse/ast/GccAsmOperand.symbolicName.html', attributes: []},
{name: 'dparse.ast.GccAsmOperandList', kind: "classdeclaration", path: './dparse/ast/GccAsmOperandList.html', attributes: []},
{name: 'dparse.ast.GccAsmOperandList.accept', kind: "functiondeclaration", path: './dparse/ast/GccAsmOperandList.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.GccAsmOperandList.items', kind: "variabledeclaration", path: './dparse/ast/GccAsmOperandList.items.html', attributes: []},
{name: 'dparse.ast.GotoStatement', kind: "classdeclaration", path: './dparse/ast/GotoStatement.html', attributes: []},
{name: 'dparse.ast.GotoStatement.accept', kind: "functiondeclaration", path: './dparse/ast/GotoStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.GotoStatement.expression', kind: "variabledeclaration", path: './dparse/ast/GotoStatement.expression.html', attributes: []},
{name: 'dparse.ast.GotoStatement.label', kind: "variabledeclaration", path: './dparse/ast/GotoStatement.label.html', attributes: []},
{name: 'dparse.ast.IdentifierChain', kind: "classdeclaration", path: './dparse/ast/IdentifierChain.html', attributes: []},
{name: 'dparse.ast.IdentifierChain.accept', kind: "functiondeclaration", path: './dparse/ast/IdentifierChain.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.IdentifierChain.identifiers', kind: "variabledeclaration", path: './dparse/ast/IdentifierChain.identifiers.html', attributes: []},
{name: 'dparse.ast.IdentifierOrTemplateChain', kind: "classdeclaration", path: './dparse/ast/IdentifierOrTemplateChain.html', attributes: []},
{name: 'dparse.ast.IdentifierOrTemplateChain.accept', kind: "functiondeclaration", path: './dparse/ast/IdentifierOrTemplateChain.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.IdentifierOrTemplateChain.identifiersOrTemplateInstances', kind: "variabledeclaration", path: './dparse/ast/IdentifierOrTemplateChain.identifiersOrTemplateInstances.html', attributes: []},
{name: 'dparse.ast.IdentifierOrTemplateInstance', kind: "classdeclaration", path: './dparse/ast/IdentifierOrTemplateInstance.html', attributes: []},
{name: 'dparse.ast.IdentifierOrTemplateInstance.accept', kind: "functiondeclaration", path: './dparse/ast/IdentifierOrTemplateInstance.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.IdentifierOrTemplateInstance.identifier', kind: "variabledeclaration", path: './dparse/ast/IdentifierOrTemplateInstance.identifier.html', attributes: []},
{name: 'dparse.ast.IdentifierOrTemplateInstance.templateInstance', kind: "variabledeclaration", path: './dparse/ast/IdentifierOrTemplateInstance.templateInstance.html', attributes: []},
{name: 'dparse.ast.IdentityExpression', kind: "classdeclaration", path: './dparse/ast/IdentityExpression.html', attributes: []},
{name: 'dparse.ast.IdentityExpression.accept', kind: "functiondeclaration", path: './dparse/ast/IdentityExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.IdentityExpression.negated', kind: "variabledeclaration", path: './dparse/ast/IdentityExpression.negated.html', attributes: []},
{name: 'dparse.ast.IfCondition', kind: "classdeclaration", path: './dparse/ast/IfCondition.html', attributes: []},
{name: 'dparse.ast.IfCondition.accept', kind: "functiondeclaration", path: './dparse/ast/IfCondition.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.IfCondition.expression', kind: "variabledeclaration", path: './dparse/ast/IfCondition.expression.html', attributes: []},
{name: 'dparse.ast.IfCondition.identifier', kind: "variabledeclaration", path: './dparse/ast/IfCondition.identifier.html', attributes: []},
{name: 'dparse.ast.IfCondition.scope_', kind: "variabledeclaration", path: './dparse/ast/IfCondition.scope_.html', attributes: []},
{name: 'dparse.ast.IfCondition.type', kind: "variabledeclaration", path: './dparse/ast/IfCondition.type.html', attributes: []},
{name: 'dparse.ast.IfCondition.typeCtors', kind: "variabledeclaration", path: './dparse/ast/IfCondition.typeCtors.html', attributes: []},
{name: 'dparse.ast.IfStatement', kind: "classdeclaration", path: './dparse/ast/IfStatement.html', attributes: []},
{name: 'dparse.ast.IfStatement.accept', kind: "functiondeclaration", path: './dparse/ast/IfStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.IfStatement.column', kind: "variabledeclaration", path: './dparse/ast/IfStatement.column.html', attributes: []},
{name: 'dparse.ast.IfStatement.condition', kind: "variabledeclaration", path: './dparse/ast/IfStatement.condition.html', attributes: []},
{name: 'dparse.ast.IfStatement.elseStatement', kind: "variabledeclaration", path: './dparse/ast/IfStatement.elseStatement.html', attributes: []},
{name: 'dparse.ast.IfStatement.expression', kind: "functiondeclaration", path: './dparse/ast/IfStatement.expression.html', attributes: ["deprecated", "property", "inout"]},
{name: 'dparse.ast.IfStatement.identifier', kind: "functiondeclaration", path: './dparse/ast/IfStatement.identifier.html', attributes: ["deprecated", "property", "inout"]},
{name: 'dparse.ast.IfStatement.line', kind: "variabledeclaration", path: './dparse/ast/IfStatement.line.html', attributes: []},
{name: 'dparse.ast.IfStatement.startIndex', kind: "variabledeclaration", path: './dparse/ast/IfStatement.startIndex.html', attributes: []},
{name: 'dparse.ast.IfStatement.thenStatement', kind: "variabledeclaration", path: './dparse/ast/IfStatement.thenStatement.html', attributes: []},
{name: 'dparse.ast.IfStatement.type', kind: "functiondeclaration", path: './dparse/ast/IfStatement.type.html', attributes: ["deprecated", "property", "inout"]},
{name: 'dparse.ast.IfStatement.typeCtors', kind: "functiondeclaration", path: './dparse/ast/IfStatement.typeCtors.html', attributes: ["deprecated", "property", "inout"]},
{name: 'dparse.ast.ImportBind', kind: "classdeclaration", path: './dparse/ast/ImportBind.html', attributes: []},
{name: 'dparse.ast.ImportBind.accept', kind: "functiondeclaration", path: './dparse/ast/ImportBind.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.ImportBind.left', kind: "variabledeclaration", path: './dparse/ast/ImportBind.left.html', attributes: []},
{name: 'dparse.ast.ImportBind.right', kind: "variabledeclaration", path: './dparse/ast/ImportBind.right.html', attributes: []},
{name: 'dparse.ast.ImportBindings', kind: "classdeclaration", path: './dparse/ast/ImportBindings.html', attributes: []},
{name: 'dparse.ast.ImportBindings.accept', kind: "functiondeclaration", path: './dparse/ast/ImportBindings.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.ImportBindings.importBinds', kind: "variabledeclaration", path: './dparse/ast/ImportBindings.importBinds.html', attributes: []},
{name: 'dparse.ast.ImportBindings.singleImport', kind: "variabledeclaration", path: './dparse/ast/ImportBindings.singleImport.html', attributes: []},
{name: 'dparse.ast.ImportDeclaration', kind: "classdeclaration", path: './dparse/ast/ImportDeclaration.html', attributes: []},
{name: 'dparse.ast.ImportDeclaration.accept', kind: "functiondeclaration", path: './dparse/ast/ImportDeclaration.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.ImportDeclaration.endIndex', kind: "variabledeclaration", path: './dparse/ast/ImportDeclaration.endIndex.html', attributes: []},
{name: 'dparse.ast.ImportDeclaration.importBindings', kind: "variabledeclaration", path: './dparse/ast/ImportDeclaration.importBindings.html', attributes: []},
{name: 'dparse.ast.ImportDeclaration.singleImports', kind: "variabledeclaration", path: './dparse/ast/ImportDeclaration.singleImports.html', attributes: []},
{name: 'dparse.ast.ImportDeclaration.startIndex', kind: "variabledeclaration", path: './dparse/ast/ImportDeclaration.startIndex.html', attributes: []},
{name: 'dparse.ast.ImportExpression', kind: "classdeclaration", path: './dparse/ast/ImportExpression.html', attributes: []},
{name: 'dparse.ast.ImportExpression.accept', kind: "functiondeclaration", path: './dparse/ast/ImportExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.ImportExpression.assignExpression', kind: "variabledeclaration", path: './dparse/ast/ImportExpression.assignExpression.html', attributes: []},
{name: 'dparse.ast.InContractExpression', kind: "classdeclaration", path: './dparse/ast/InContractExpression.html', attributes: []},
{name: 'dparse.ast.InContractExpression.accept', kind: "functiondeclaration", path: './dparse/ast/InContractExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.InContractExpression.assertArguments', kind: "variabledeclaration", path: './dparse/ast/InContractExpression.assertArguments.html', attributes: []},
{name: 'dparse.ast.InContractExpression.inTokenLocation', kind: "variabledeclaration", path: './dparse/ast/InContractExpression.inTokenLocation.html', attributes: []},
{name: 'dparse.ast.Index', kind: "classdeclaration", path: './dparse/ast/Index.html', attributes: []},
{name: 'dparse.ast.Index.accept', kind: "functiondeclaration", path: './dparse/ast/Index.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Index.high', kind: "variabledeclaration", path: './dparse/ast/Index.high.html', attributes: []},
{name: 'dparse.ast.Index.low', kind: "variabledeclaration", path: './dparse/ast/Index.low.html', attributes: []},
{name: 'dparse.ast.IndexExpression', kind: "classdeclaration", path: './dparse/ast/IndexExpression.html', attributes: []},
{name: 'dparse.ast.IndexExpression.accept', kind: "functiondeclaration", path: './dparse/ast/IndexExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.IndexExpression.indexes', kind: "variabledeclaration", path: './dparse/ast/IndexExpression.indexes.html', attributes: []},
{name: 'dparse.ast.IndexExpression.unaryExpression', kind: "variabledeclaration", path: './dparse/ast/IndexExpression.unaryExpression.html', attributes: []},
{name: 'dparse.ast.InExpression', kind: "classdeclaration", path: './dparse/ast/InExpression.html', attributes: []},
{name: 'dparse.ast.InExpression.accept', kind: "functiondeclaration", path: './dparse/ast/InExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.InExpression.negated', kind: "variabledeclaration", path: './dparse/ast/InExpression.negated.html', attributes: []},
{name: 'dparse.ast.Initialize', kind: "classdeclaration", path: './dparse/ast/Initialize.html', attributes: []},
{name: 'dparse.ast.Initialize.accept', kind: "functiondeclaration", path: './dparse/ast/Initialize.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Initialize.statementNoCaseNoDefault', kind: "variabledeclaration", path: './dparse/ast/Initialize.statementNoCaseNoDefault.html', attributes: []},
{name: 'dparse.ast.Initializer', kind: "classdeclaration", path: './dparse/ast/Initializer.html', attributes: []},
{name: 'dparse.ast.Initializer.accept', kind: "functiondeclaration", path: './dparse/ast/Initializer.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Initializer.nonVoidInitializer', kind: "variabledeclaration", path: './dparse/ast/Initializer.nonVoidInitializer.html', attributes: []},
{name: 'dparse.ast.InOutContractExpression', kind: "classdeclaration", path: './dparse/ast/InOutContractExpression.html', attributes: []},
{name: 'dparse.ast.InOutContractExpression.accept', kind: "functiondeclaration", path: './dparse/ast/InOutContractExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.InOutContractExpression.inContractExpression', kind: "variabledeclaration", path: './dparse/ast/InOutContractExpression.inContractExpression.html', attributes: []},
{name: 'dparse.ast.InOutContractExpression.outContractExpression', kind: "variabledeclaration", path: './dparse/ast/InOutContractExpression.outContractExpression.html', attributes: []},
{name: 'dparse.ast.InOutStatement', kind: "classdeclaration", path: './dparse/ast/InOutStatement.html', attributes: []},
{name: 'dparse.ast.InOutStatement.accept', kind: "functiondeclaration", path: './dparse/ast/InOutStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.InOutStatement.inStatement', kind: "variabledeclaration", path: './dparse/ast/InOutStatement.inStatement.html', attributes: []},
{name: 'dparse.ast.InOutStatement.outStatement', kind: "variabledeclaration", path: './dparse/ast/InOutStatement.outStatement.html', attributes: []},
{name: 'dparse.ast.InStatement', kind: "classdeclaration", path: './dparse/ast/InStatement.html', attributes: []},
{name: 'dparse.ast.InStatement.accept', kind: "functiondeclaration", path: './dparse/ast/InStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.InStatement.blockStatement', kind: "variabledeclaration", path: './dparse/ast/InStatement.blockStatement.html', attributes: []},
{name: 'dparse.ast.InStatement.inTokenLocation', kind: "variabledeclaration", path: './dparse/ast/InStatement.inTokenLocation.html', attributes: []},
{name: 'dparse.ast.InterfaceDeclaration', kind: "classdeclaration", path: './dparse/ast/InterfaceDeclaration.html', attributes: []},
{name: 'dparse.ast.InterfaceDeclaration.accept', kind: "functiondeclaration", path: './dparse/ast/InterfaceDeclaration.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.InterfaceDeclaration.baseClassList', kind: "variabledeclaration", path: './dparse/ast/InterfaceDeclaration.baseClassList.html', attributes: []},
{name: 'dparse.ast.InterfaceDeclaration.comment', kind: "variabledeclaration", path: './dparse/ast/InterfaceDeclaration.comment.html', attributes: []},
{name: 'dparse.ast.InterfaceDeclaration.constraint', kind: "variabledeclaration", path: './dparse/ast/InterfaceDeclaration.constraint.html', attributes: []},
{name: 'dparse.ast.InterfaceDeclaration.name', kind: "variabledeclaration", path: './dparse/ast/InterfaceDeclaration.name.html', attributes: []},
{name: 'dparse.ast.InterfaceDeclaration.structBody', kind: "variabledeclaration", path: './dparse/ast/InterfaceDeclaration.structBody.html', attributes: []},
{name: 'dparse.ast.InterfaceDeclaration.templateParameters', kind: "variabledeclaration", path: './dparse/ast/InterfaceDeclaration.templateParameters.html', attributes: []},
{name: 'dparse.ast.Invariant', kind: "classdeclaration", path: './dparse/ast/Invariant.html', attributes: []},
{name: 'dparse.ast.Invariant.accept', kind: "functiondeclaration", path: './dparse/ast/Invariant.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Invariant.assertArguments', kind: "variabledeclaration", path: './dparse/ast/Invariant.assertArguments.html', attributes: []},
{name: 'dparse.ast.Invariant.blockStatement', kind: "variabledeclaration", path: './dparse/ast/Invariant.blockStatement.html', attributes: []},
{name: 'dparse.ast.Invariant.comment', kind: "variabledeclaration", path: './dparse/ast/Invariant.comment.html', attributes: []},
{name: 'dparse.ast.Invariant.index', kind: "variabledeclaration", path: './dparse/ast/Invariant.index.html', attributes: []},
{name: 'dparse.ast.Invariant.line', kind: "variabledeclaration", path: './dparse/ast/Invariant.line.html', attributes: []},
{name: 'dparse.ast.Invariant.useParen', kind: "variabledeclaration", path: './dparse/ast/Invariant.useParen.html', attributes: []},
{name: 'dparse.ast.IsExpression', kind: "classdeclaration", path: './dparse/ast/IsExpression.html', attributes: []},
{name: 'dparse.ast.IsExpression.accept', kind: "functiondeclaration", path: './dparse/ast/IsExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.IsExpression.equalsOrColon', kind: "variabledeclaration", path: './dparse/ast/IsExpression.equalsOrColon.html', attributes: []},
{name: 'dparse.ast.IsExpression.identifier', kind: "variabledeclaration", path: './dparse/ast/IsExpression.identifier.html', attributes: []},
{name: 'dparse.ast.IsExpression.templateParameterList', kind: "variabledeclaration", path: './dparse/ast/IsExpression.templateParameterList.html', attributes: []},
{name: 'dparse.ast.IsExpression.type', kind: "variabledeclaration", path: './dparse/ast/IsExpression.type.html', attributes: []},
{name: 'dparse.ast.IsExpression.typeSpecialization', kind: "variabledeclaration", path: './dparse/ast/IsExpression.typeSpecialization.html', attributes: []},
{name: 'dparse.ast.KeyValuePair', kind: "classdeclaration", path: './dparse/ast/KeyValuePair.html', attributes: []},
{name: 'dparse.ast.KeyValuePair.accept', kind: "functiondeclaration", path: './dparse/ast/KeyValuePair.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.KeyValuePair.key', kind: "variabledeclaration", path: './dparse/ast/KeyValuePair.key.html', attributes: []},
{name: 'dparse.ast.KeyValuePair.value', kind: "variabledeclaration", path: './dparse/ast/KeyValuePair.value.html', attributes: []},
{name: 'dparse.ast.KeyValuePairs', kind: "classdeclaration", path: './dparse/ast/KeyValuePairs.html', attributes: []},
{name: 'dparse.ast.KeyValuePairs.accept', kind: "functiondeclaration", path: './dparse/ast/KeyValuePairs.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.KeyValuePairs.keyValuePairs', kind: "variabledeclaration", path: './dparse/ast/KeyValuePairs.keyValuePairs.html', attributes: []},
{name: 'dparse.ast.LabeledStatement', kind: "classdeclaration", path: './dparse/ast/LabeledStatement.html', attributes: []},
{name: 'dparse.ast.LabeledStatement.accept', kind: "functiondeclaration", path: './dparse/ast/LabeledStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.LabeledStatement.declarationOrStatement', kind: "variabledeclaration", path: './dparse/ast/LabeledStatement.declarationOrStatement.html', attributes: []},
{name: 'dparse.ast.LabeledStatement.identifier', kind: "variabledeclaration", path: './dparse/ast/LabeledStatement.identifier.html', attributes: []},
{name: 'dparse.ast.LastCatch', kind: "classdeclaration", path: './dparse/ast/LastCatch.html', attributes: []},
{name: 'dparse.ast.LastCatch.accept', kind: "functiondeclaration", path: './dparse/ast/LastCatch.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.LastCatch.column', kind: "variabledeclaration", path: './dparse/ast/LastCatch.column.html', attributes: []},
{name: 'dparse.ast.LastCatch.line', kind: "variabledeclaration", path: './dparse/ast/LastCatch.line.html', attributes: []},
{name: 'dparse.ast.LastCatch.statementNoCaseNoDefault', kind: "variabledeclaration", path: './dparse/ast/LastCatch.statementNoCaseNoDefault.html', attributes: []},
{name: 'dparse.ast.LinkageAttribute', kind: "classdeclaration", path: './dparse/ast/LinkageAttribute.html', attributes: []},
{name: 'dparse.ast.LinkageAttribute.accept', kind: "functiondeclaration", path: './dparse/ast/LinkageAttribute.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.LinkageAttribute.classOrStruct', kind: "variabledeclaration", path: './dparse/ast/LinkageAttribute.classOrStruct.html', attributes: []},
{name: 'dparse.ast.LinkageAttribute.cppNamespaces', kind: "variabledeclaration", path: './dparse/ast/LinkageAttribute.cppNamespaces.html', attributes: []},
{name: 'dparse.ast.LinkageAttribute.hasPlusPlus', kind: "variabledeclaration", path: './dparse/ast/LinkageAttribute.hasPlusPlus.html', attributes: []},
{name: 'dparse.ast.LinkageAttribute.identifier', kind: "variabledeclaration", path: './dparse/ast/LinkageAttribute.identifier.html', attributes: []},
{name: 'dparse.ast.LinkageAttribute.typeIdentifierPart', kind: "variabledeclaration", path: './dparse/ast/LinkageAttribute.typeIdentifierPart.html', attributes: []},
{name: 'dparse.ast.MemberFunctionAttribute', kind: "classdeclaration", path: './dparse/ast/MemberFunctionAttribute.html', attributes: []},
{name: 'dparse.ast.MemberFunctionAttribute.accept', kind: "functiondeclaration", path: './dparse/ast/MemberFunctionAttribute.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.MemberFunctionAttribute.atAttribute', kind: "variabledeclaration", path: './dparse/ast/MemberFunctionAttribute.atAttribute.html', attributes: []},
{name: 'dparse.ast.MemberFunctionAttribute.tokenType', kind: "variabledeclaration", path: './dparse/ast/MemberFunctionAttribute.tokenType.html', attributes: []},
{name: 'dparse.ast.MissingFunctionBody', kind: "classdeclaration", path: './dparse/ast/MissingFunctionBody.html', attributes: []},
{name: 'dparse.ast.MissingFunctionBody.accept', kind: "functiondeclaration", path: './dparse/ast/MissingFunctionBody.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.MissingFunctionBody.functionContracts', kind: "variabledeclaration", path: './dparse/ast/MissingFunctionBody.functionContracts.html', attributes: []},
{name: 'dparse.ast.MixinDeclaration', kind: "classdeclaration", path: './dparse/ast/MixinDeclaration.html', attributes: []},
{name: 'dparse.ast.MixinDeclaration.accept', kind: "functiondeclaration", path: './dparse/ast/MixinDeclaration.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.MixinDeclaration.mixinExpression', kind: "variabledeclaration", path: './dparse/ast/MixinDeclaration.mixinExpression.html', attributes: []},
{name: 'dparse.ast.MixinDeclaration.templateMixinExpression', kind: "variabledeclaration", path: './dparse/ast/MixinDeclaration.templateMixinExpression.html', attributes: []},
{name: 'dparse.ast.MixinExpression', kind: "classdeclaration", path: './dparse/ast/MixinExpression.html', attributes: []},
{name: 'dparse.ast.MixinExpression.accept', kind: "functiondeclaration", path: './dparse/ast/MixinExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.MixinExpression.argumentList', kind: "variabledeclaration", path: './dparse/ast/MixinExpression.argumentList.html', attributes: []},
{name: 'dparse.ast.MixinTemplateDeclaration', kind: "classdeclaration", path: './dparse/ast/MixinTemplateDeclaration.html', attributes: []},
{name: 'dparse.ast.MixinTemplateDeclaration.accept', kind: "functiondeclaration", path: './dparse/ast/MixinTemplateDeclaration.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.MixinTemplateDeclaration.templateDeclaration', kind: "variabledeclaration", path: './dparse/ast/MixinTemplateDeclaration.templateDeclaration.html', attributes: []},
{name: 'dparse.ast.MixinTemplateName', kind: "classdeclaration", path: './dparse/ast/MixinTemplateName.html', attributes: []},
{name: 'dparse.ast.MixinTemplateName.accept', kind: "functiondeclaration", path: './dparse/ast/MixinTemplateName.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.MixinTemplateName.identifierOrTemplateChain', kind: "variabledeclaration", path: './dparse/ast/MixinTemplateName.identifierOrTemplateChain.html', attributes: []},
{name: 'dparse.ast.MixinTemplateName.symbol', kind: "variabledeclaration", path: './dparse/ast/MixinTemplateName.symbol.html', attributes: []},
{name: 'dparse.ast.MixinTemplateName.typeofExpression', kind: "variabledeclaration", path: './dparse/ast/MixinTemplateName.typeofExpression.html', attributes: []},
{name: 'dparse.ast.Module', kind: "classdeclaration", path: './dparse/ast/Module.html', attributes: []},
{name: 'dparse.ast.Module.accept', kind: "functiondeclaration", path: './dparse/ast/Module.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Module.declarations', kind: "variabledeclaration", path: './dparse/ast/Module.declarations.html', attributes: []},
{name: 'dparse.ast.Module.moduleDeclaration', kind: "variabledeclaration", path: './dparse/ast/Module.moduleDeclaration.html', attributes: []},
{name: 'dparse.ast.Module.scriptLine', kind: "variabledeclaration", path: './dparse/ast/Module.scriptLine.html', attributes: []},
{name: 'dparse.ast.ModuleDeclaration', kind: "classdeclaration", path: './dparse/ast/ModuleDeclaration.html', attributes: []},
{name: 'dparse.ast.ModuleDeclaration.accept', kind: "functiondeclaration", path: './dparse/ast/ModuleDeclaration.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.ModuleDeclaration.atAttributes', kind: "variabledeclaration", path: './dparse/ast/ModuleDeclaration.atAttributes.html', attributes: []},
{name: 'dparse.ast.ModuleDeclaration.comment', kind: "variabledeclaration", path: './dparse/ast/ModuleDeclaration.comment.html', attributes: []},
{name: 'dparse.ast.ModuleDeclaration.deprecated_', kind: "variabledeclaration", path: './dparse/ast/ModuleDeclaration.deprecated_.html', attributes: []},
{name: 'dparse.ast.ModuleDeclaration.endLocation', kind: "variabledeclaration", path: './dparse/ast/ModuleDeclaration.endLocation.html', attributes: []},
{name: 'dparse.ast.ModuleDeclaration.moduleName', kind: "variabledeclaration", path: './dparse/ast/ModuleDeclaration.moduleName.html', attributes: []},
{name: 'dparse.ast.ModuleDeclaration.startLocation', kind: "variabledeclaration", path: './dparse/ast/ModuleDeclaration.startLocation.html', attributes: []},
{name: 'dparse.ast.MulExpression', kind: "classdeclaration", path: './dparse/ast/MulExpression.html', attributes: []},
{name: 'dparse.ast.MulExpression.accept', kind: "functiondeclaration", path: './dparse/ast/MulExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.MulExpression.operator', kind: "variabledeclaration", path: './dparse/ast/MulExpression.operator.html', attributes: []},
{name: 'dparse.ast.NamedArgument', kind: "classdeclaration", path: './dparse/ast/NamedArgument.html', attributes: []},
{name: 'dparse.ast.NamedArgument.accept', kind: "functiondeclaration", path: './dparse/ast/NamedArgument.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.NamedArgument.assignExpression', kind: "variabledeclaration", path: './dparse/ast/NamedArgument.assignExpression.html', attributes: []},
{name: 'dparse.ast.NamedArgument.endLocation', kind: "variabledeclaration", path: './dparse/ast/NamedArgument.endLocation.html', attributes: []},
{name: 'dparse.ast.NamedArgument.name', kind: "variabledeclaration", path: './dparse/ast/NamedArgument.name.html', attributes: []},
{name: 'dparse.ast.NamedArgument.startLocation', kind: "variabledeclaration", path: './dparse/ast/NamedArgument.startLocation.html', attributes: []},
{name: 'dparse.ast.NamedArgumentList', kind: "classdeclaration", path: './dparse/ast/NamedArgumentList.html', attributes: []},
{name: 'dparse.ast.NamedArgumentList.accept', kind: "functiondeclaration", path: './dparse/ast/NamedArgumentList.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.NamedArgumentList.endLocation', kind: "variabledeclaration", path: './dparse/ast/NamedArgumentList.endLocation.html', attributes: []},
{name: 'dparse.ast.NamedArgumentList.items', kind: "variabledeclaration", path: './dparse/ast/NamedArgumentList.items.html', attributes: []},
{name: 'dparse.ast.NamedArgumentList.startLocation', kind: "variabledeclaration", path: './dparse/ast/NamedArgumentList.startLocation.html', attributes: []},
{name: 'dparse.ast.NamedTemplateArgument', kind: "classdeclaration", path: './dparse/ast/NamedTemplateArgument.html', attributes: []},
{name: 'dparse.ast.NamedTemplateArgument.accept', kind: "functiondeclaration", path: './dparse/ast/NamedTemplateArgument.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.NamedTemplateArgument.assignExpression', kind: "variabledeclaration", path: './dparse/ast/NamedTemplateArgument.assignExpression.html', attributes: []},
{name: 'dparse.ast.NamedTemplateArgument.name', kind: "variabledeclaration", path: './dparse/ast/NamedTemplateArgument.name.html', attributes: []},
{name: 'dparse.ast.NamedTemplateArgument.type', kind: "variabledeclaration", path: './dparse/ast/NamedTemplateArgument.type.html', attributes: []},
{name: 'dparse.ast.NamedTemplateArgumentList', kind: "classdeclaration", path: './dparse/ast/NamedTemplateArgumentList.html', attributes: []},
{name: 'dparse.ast.NamedTemplateArgumentList.accept', kind: "functiondeclaration", path: './dparse/ast/NamedTemplateArgumentList.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.NamedTemplateArgumentList.items', kind: "variabledeclaration", path: './dparse/ast/NamedTemplateArgumentList.items.html', attributes: []},
{name: 'dparse.ast.NamespaceList', kind: "classdeclaration", path: './dparse/ast/NamespaceList.html', attributes: []},
{name: 'dparse.ast.NamespaceList.accept', kind: "functiondeclaration", path: './dparse/ast/NamespaceList.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.NamespaceList.items', kind: "variabledeclaration", path: './dparse/ast/NamespaceList.items.html', attributes: []},
{name: 'dparse.ast.NewAnonClassExpression', kind: "classdeclaration", path: './dparse/ast/NewAnonClassExpression.html', attributes: []},
{name: 'dparse.ast.NewAnonClassExpression.accept', kind: "functiondeclaration", path: './dparse/ast/NewAnonClassExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.NewAnonClassExpression.allocatorArguments', kind: "variabledeclaration", path: './dparse/ast/NewAnonClassExpression.allocatorArguments.html', attributes: []},
{name: 'dparse.ast.NewAnonClassExpression.baseClassList', kind: "variabledeclaration", path: './dparse/ast/NewAnonClassExpression.baseClassList.html', attributes: []},
{name: 'dparse.ast.NewAnonClassExpression.constructorArguments', kind: "variabledeclaration", path: './dparse/ast/NewAnonClassExpression.constructorArguments.html', attributes: []},
{name: 'dparse.ast.NewAnonClassExpression.structBody', kind: "variabledeclaration", path: './dparse/ast/NewAnonClassExpression.structBody.html', attributes: []},
{name: 'dparse.ast.NewExpression', kind: "classdeclaration", path: './dparse/ast/NewExpression.html', attributes: []},
{name: 'dparse.ast.NewExpression.accept', kind: "functiondeclaration", path: './dparse/ast/NewExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.NewExpression.arguments', kind: "variabledeclaration", path: './dparse/ast/NewExpression.arguments.html', attributes: []},
{name: 'dparse.ast.NewExpression.assignExpression', kind: "variabledeclaration", path: './dparse/ast/NewExpression.assignExpression.html', attributes: []},
{name: 'dparse.ast.NewExpression.newAnonClassExpression', kind: "variabledeclaration", path: './dparse/ast/NewExpression.newAnonClassExpression.html', attributes: []},
{name: 'dparse.ast.NewExpression.type', kind: "variabledeclaration", path: './dparse/ast/NewExpression.type.html', attributes: []},
{name: 'dparse.ast.NonVoidInitializer', kind: "classdeclaration", path: './dparse/ast/NonVoidInitializer.html', attributes: []},
{name: 'dparse.ast.NonVoidInitializer.accept', kind: "functiondeclaration", path: './dparse/ast/NonVoidInitializer.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.NonVoidInitializer.arrayInitializer', kind: "variabledeclaration", path: './dparse/ast/NonVoidInitializer.arrayInitializer.html', attributes: []},
{name: 'dparse.ast.NonVoidInitializer.assignExpression', kind: "variabledeclaration", path: './dparse/ast/NonVoidInitializer.assignExpression.html', attributes: []},
{name: 'dparse.ast.NonVoidInitializer.structInitializer', kind: "variabledeclaration", path: './dparse/ast/NonVoidInitializer.structInitializer.html', attributes: []},
{name: 'dparse.ast.OpEquals', kind: "templatedeclaration", path: './dparse/ast/OpEquals.html', attributes: []},
{name: 'dparse.ast.OpEquals.opEquals', kind: "functiondeclaration", path: './dparse/ast/OpEquals.opEquals.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Operands', kind: "classdeclaration", path: './dparse/ast/Operands.html', attributes: []},
{name: 'dparse.ast.Operands.accept', kind: "functiondeclaration", path: './dparse/ast/Operands.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Operands.operands', kind: "variabledeclaration", path: './dparse/ast/Operands.operands.html', attributes: []},
{name: 'dparse.ast.OrExpression', kind: "classdeclaration", path: './dparse/ast/OrExpression.html', attributes: []},
{name: 'dparse.ast.OrExpression.accept', kind: "functiondeclaration", path: './dparse/ast/OrExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.OrOrExpression', kind: "classdeclaration", path: './dparse/ast/OrOrExpression.html', attributes: []},
{name: 'dparse.ast.OrOrExpression.accept', kind: "functiondeclaration", path: './dparse/ast/OrOrExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.OutContractExpression', kind: "classdeclaration", path: './dparse/ast/OutContractExpression.html', attributes: []},
{name: 'dparse.ast.OutContractExpression.accept', kind: "functiondeclaration", path: './dparse/ast/OutContractExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.OutContractExpression.assertArguments', kind: "variabledeclaration", path: './dparse/ast/OutContractExpression.assertArguments.html', attributes: []},
{name: 'dparse.ast.OutContractExpression.outTokenLocation', kind: "variabledeclaration", path: './dparse/ast/OutContractExpression.outTokenLocation.html', attributes: []},
{name: 'dparse.ast.OutContractExpression.parameter', kind: "variabledeclaration", path: './dparse/ast/OutContractExpression.parameter.html', attributes: []},
{name: 'dparse.ast.OutStatement', kind: "classdeclaration", path: './dparse/ast/OutStatement.html', attributes: []},
{name: 'dparse.ast.OutStatement.accept', kind: "functiondeclaration", path: './dparse/ast/OutStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.OutStatement.blockStatement', kind: "variabledeclaration", path: './dparse/ast/OutStatement.blockStatement.html', attributes: []},
{name: 'dparse.ast.OutStatement.outTokenLocation', kind: "variabledeclaration", path: './dparse/ast/OutStatement.outTokenLocation.html', attributes: []},
{name: 'dparse.ast.OutStatement.parameter', kind: "variabledeclaration", path: './dparse/ast/OutStatement.parameter.html', attributes: []},
{name: 'dparse.ast.Parameter', kind: "classdeclaration", path: './dparse/ast/Parameter.html', attributes: []},
{name: 'dparse.ast.Parameter.accept', kind: "functiondeclaration", path: './dparse/ast/Parameter.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Parameter.cstyle', kind: "variabledeclaration", path: './dparse/ast/Parameter.cstyle.html', attributes: []},
{name: 'dparse.ast.Parameter.default_', kind: "variabledeclaration", path: './dparse/ast/Parameter.default_.html', attributes: []},
{name: 'dparse.ast.Parameter.name', kind: "variabledeclaration", path: './dparse/ast/Parameter.name.html', attributes: []},
{name: 'dparse.ast.Parameter.parameterAttributes', kind: "variabledeclaration", path: './dparse/ast/Parameter.parameterAttributes.html', attributes: []},
{name: 'dparse.ast.Parameter.type', kind: "variabledeclaration", path: './dparse/ast/Parameter.type.html', attributes: []},
{name: 'dparse.ast.Parameter.vararg', kind: "variabledeclaration", path: './dparse/ast/Parameter.vararg.html', attributes: []},
{name: 'dparse.ast.ParameterAttribute', kind: "classdeclaration", path: './dparse/ast/ParameterAttribute.html', attributes: []},
{name: 'dparse.ast.ParameterAttribute.accept', kind: "functiondeclaration", path: './dparse/ast/ParameterAttribute.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.ParameterAttribute.atAttribute', kind: "variabledeclaration", path: './dparse/ast/ParameterAttribute.atAttribute.html', attributes: []},
{name: 'dparse.ast.ParameterAttribute.idType', kind: "variabledeclaration", path: './dparse/ast/ParameterAttribute.idType.html', attributes: []},
{name: 'dparse.ast.Parameters', kind: "classdeclaration", path: './dparse/ast/Parameters.html', attributes: []},
{name: 'dparse.ast.Parameters.accept', kind: "functiondeclaration", path: './dparse/ast/Parameters.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Parameters.hasVarargs', kind: "variabledeclaration", path: './dparse/ast/Parameters.hasVarargs.html', attributes: []},
{name: 'dparse.ast.Parameters.parameters', kind: "variabledeclaration", path: './dparse/ast/Parameters.parameters.html', attributes: []},
{name: 'dparse.ast.Parameters.varargsAttributes', kind: "variabledeclaration", path: './dparse/ast/Parameters.varargsAttributes.html', attributes: []},
{name: 'dparse.ast.Postblit', kind: "classdeclaration", path: './dparse/ast/Postblit.html', attributes: []},
{name: 'dparse.ast.Postblit.accept', kind: "functiondeclaration", path: './dparse/ast/Postblit.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Postblit.column', kind: "variabledeclaration", path: './dparse/ast/Postblit.column.html', attributes: []},
{name: 'dparse.ast.Postblit.functionBody', kind: "variabledeclaration", path: './dparse/ast/Postblit.functionBody.html', attributes: []},
{name: 'dparse.ast.Postblit.line', kind: "variabledeclaration", path: './dparse/ast/Postblit.line.html', attributes: []},
{name: 'dparse.ast.Postblit.location', kind: "variabledeclaration", path: './dparse/ast/Postblit.location.html', attributes: []},
{name: 'dparse.ast.Postblit.memberFunctionAttributes', kind: "variabledeclaration", path: './dparse/ast/Postblit.memberFunctionAttributes.html', attributes: []},
{name: 'dparse.ast.PowExpression', kind: "classdeclaration", path: './dparse/ast/PowExpression.html', attributes: []},
{name: 'dparse.ast.PowExpression.accept', kind: "functiondeclaration", path: './dparse/ast/PowExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.PragmaDeclaration', kind: "classdeclaration", path: './dparse/ast/PragmaDeclaration.html', attributes: []},
{name: 'dparse.ast.PragmaDeclaration.accept', kind: "functiondeclaration", path: './dparse/ast/PragmaDeclaration.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.PragmaDeclaration.pragmaExpression', kind: "variabledeclaration", path: './dparse/ast/PragmaDeclaration.pragmaExpression.html', attributes: []},
{name: 'dparse.ast.PragmaExpression', kind: "classdeclaration", path: './dparse/ast/PragmaExpression.html', attributes: []},
{name: 'dparse.ast.PragmaExpression.accept', kind: "functiondeclaration", path: './dparse/ast/PragmaExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.PragmaExpression.argumentList', kind: "variabledeclaration", path: './dparse/ast/PragmaExpression.argumentList.html', attributes: []},
{name: 'dparse.ast.PragmaExpression.identifier', kind: "variabledeclaration", path: './dparse/ast/PragmaExpression.identifier.html', attributes: []},
{name: 'dparse.ast.PragmaStatement', kind: "classdeclaration", path: './dparse/ast/PragmaStatement.html', attributes: []},
{name: 'dparse.ast.PragmaStatement.accept', kind: "functiondeclaration", path: './dparse/ast/PragmaStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.PragmaStatement.blockStatement', kind: "variabledeclaration", path: './dparse/ast/PragmaStatement.blockStatement.html', attributes: []},
{name: 'dparse.ast.PragmaStatement.pragmaExpression', kind: "variabledeclaration", path: './dparse/ast/PragmaStatement.pragmaExpression.html', attributes: []},
{name: 'dparse.ast.PragmaStatement.statement', kind: "variabledeclaration", path: './dparse/ast/PragmaStatement.statement.html', attributes: []},
{name: 'dparse.ast.PrimaryExpression', kind: "classdeclaration", path: './dparse/ast/PrimaryExpression.html', attributes: []},
{name: 'dparse.ast.PrimaryExpression.accept', kind: "functiondeclaration", path: './dparse/ast/PrimaryExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.PrimaryExpression.arguments', kind: "variabledeclaration", path: './dparse/ast/PrimaryExpression.arguments.html', attributes: []},
{name: 'dparse.ast.PrimaryExpression.arrayLiteral', kind: "variabledeclaration", path: './dparse/ast/PrimaryExpression.arrayLiteral.html', attributes: []},
{name: 'dparse.ast.PrimaryExpression.assocArrayLiteral', kind: "variabledeclaration", path: './dparse/ast/PrimaryExpression.assocArrayLiteral.html', attributes: []},
{name: 'dparse.ast.PrimaryExpression.basicType', kind: "variabledeclaration", path: './dparse/ast/PrimaryExpression.basicType.html', attributes: []},
{name: 'dparse.ast.PrimaryExpression.dot', kind: "variabledeclaration", path: './dparse/ast/PrimaryExpression.dot.html', attributes: []},
{name: 'dparse.ast.PrimaryExpression.expression', kind: "variabledeclaration", path: './dparse/ast/PrimaryExpression.expression.html', attributes: []},
{name: 'dparse.ast.PrimaryExpression.functionLiteralExpression', kind: "variabledeclaration", path: './dparse/ast/PrimaryExpression.functionLiteralExpression.html', attributes: []},
{name: 'dparse.ast.PrimaryExpression.identifierOrTemplateInstance', kind: "variabledeclaration", path: './dparse/ast/PrimaryExpression.identifierOrTemplateInstance.html', attributes: []},
{name: 'dparse.ast.PrimaryExpression.importExpression', kind: "variabledeclaration", path: './dparse/ast/PrimaryExpression.importExpression.html', attributes: []},
{name: 'dparse.ast.PrimaryExpression.isExpression', kind: "variabledeclaration", path: './dparse/ast/PrimaryExpression.isExpression.html', attributes: []},
{name: 'dparse.ast.PrimaryExpression.mixinExpression', kind: "variabledeclaration", path: './dparse/ast/PrimaryExpression.mixinExpression.html', attributes: []},
{name: 'dparse.ast.PrimaryExpression.primary', kind: "variabledeclaration", path: './dparse/ast/PrimaryExpression.primary.html', attributes: []},
{name: 'dparse.ast.PrimaryExpression.traitsExpression', kind: "variabledeclaration", path: './dparse/ast/PrimaryExpression.traitsExpression.html', attributes: []},
{name: 'dparse.ast.PrimaryExpression.type', kind: "variabledeclaration", path: './dparse/ast/PrimaryExpression.type.html', attributes: []},
{name: 'dparse.ast.PrimaryExpression.typeConstructor', kind: "variabledeclaration", path: './dparse/ast/PrimaryExpression.typeConstructor.html', attributes: []},
{name: 'dparse.ast.PrimaryExpression.typeidExpression', kind: "variabledeclaration", path: './dparse/ast/PrimaryExpression.typeidExpression.html', attributes: []},
{name: 'dparse.ast.PrimaryExpression.typeofExpression', kind: "variabledeclaration", path: './dparse/ast/PrimaryExpression.typeofExpression.html', attributes: []},
{name: 'dparse.ast.PrimaryExpression.vector', kind: "variabledeclaration", path: './dparse/ast/PrimaryExpression.vector.html', attributes: []},
{name: 'dparse.ast.Register', kind: "classdeclaration", path: './dparse/ast/Register.html', attributes: []},
{name: 'dparse.ast.Register.accept', kind: "functiondeclaration", path: './dparse/ast/Register.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Register.hasIntegerLiteral', kind: "variabledeclaration", path: './dparse/ast/Register.hasIntegerLiteral.html', attributes: []},
{name: 'dparse.ast.Register.identifier', kind: "variabledeclaration", path: './dparse/ast/Register.identifier.html', attributes: []},
{name: 'dparse.ast.Register.intLiteral', kind: "variabledeclaration", path: './dparse/ast/Register.intLiteral.html', attributes: []},
{name: 'dparse.ast.RelExpression', kind: "classdeclaration", path: './dparse/ast/RelExpression.html', attributes: []},
{name: 'dparse.ast.RelExpression.accept', kind: "functiondeclaration", path: './dparse/ast/RelExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.RelExpression.operator', kind: "variabledeclaration", path: './dparse/ast/RelExpression.operator.html', attributes: []},
{name: 'dparse.ast.ReturnRefType', kind: "enumdeclaration", path: './dparse/ast/ReturnRefType.html', attributes: []},
{name: 'dparse.ast.ReturnRefType.autoRef', kind: "enummemberdeclaration", path: './dparse/ast/ReturnRefType.html#autoRef', attributes: []},
{name: 'dparse.ast.ReturnRefType.noRef', kind: "enummemberdeclaration", path: './dparse/ast/ReturnRefType.html#noRef', attributes: []},
{name: 'dparse.ast.ReturnRefType.ref_', kind: "enummemberdeclaration", path: './dparse/ast/ReturnRefType.html#ref_', attributes: []},
{name: 'dparse.ast.ReturnStatement', kind: "classdeclaration", path: './dparse/ast/ReturnStatement.html', attributes: []},
{name: 'dparse.ast.ReturnStatement.accept', kind: "functiondeclaration", path: './dparse/ast/ReturnStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.ReturnStatement.endLocation', kind: "variabledeclaration", path: './dparse/ast/ReturnStatement.endLocation.html', attributes: []},
{name: 'dparse.ast.ReturnStatement.expression', kind: "variabledeclaration", path: './dparse/ast/ReturnStatement.expression.html', attributes: []},
{name: 'dparse.ast.ReturnStatement.startLocation', kind: "variabledeclaration", path: './dparse/ast/ReturnStatement.startLocation.html', attributes: []},
{name: 'dparse.ast.ScopeGuardStatement', kind: "classdeclaration", path: './dparse/ast/ScopeGuardStatement.html', attributes: []},
{name: 'dparse.ast.ScopeGuardStatement.accept', kind: "functiondeclaration", path: './dparse/ast/ScopeGuardStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.ScopeGuardStatement.declarationOrStatement', kind: "variabledeclaration", path: './dparse/ast/ScopeGuardStatement.declarationOrStatement.html', attributes: []},
{name: 'dparse.ast.ScopeGuardStatement.identifier', kind: "variabledeclaration", path: './dparse/ast/ScopeGuardStatement.identifier.html', attributes: []},
{name: 'dparse.ast.ScopeGuardStatement.statementNoCaseNoDefault', kind: "functiondeclaration", path: './dparse/ast/ScopeGuardStatement.statementNoCaseNoDefault.html', attributes: ["deprecated", "pure", "nothrow", "nogc", "safe", "inout"]},
{name: 'dparse.ast.SharedStaticConstructor', kind: "classdeclaration", path: './dparse/ast/SharedStaticConstructor.html', attributes: []},
{name: 'dparse.ast.SharedStaticConstructor.accept', kind: "functiondeclaration", path: './dparse/ast/SharedStaticConstructor.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.SharedStaticConstructor.column', kind: "variabledeclaration", path: './dparse/ast/SharedStaticConstructor.column.html', attributes: []},
{name: 'dparse.ast.SharedStaticConstructor.comment', kind: "variabledeclaration", path: './dparse/ast/SharedStaticConstructor.comment.html', attributes: []},
{name: 'dparse.ast.SharedStaticConstructor.functionBody', kind: "variabledeclaration", path: './dparse/ast/SharedStaticConstructor.functionBody.html', attributes: []},
{name: 'dparse.ast.SharedStaticConstructor.line', kind: "variabledeclaration", path: './dparse/ast/SharedStaticConstructor.line.html', attributes: []},
{name: 'dparse.ast.SharedStaticConstructor.location', kind: "variabledeclaration", path: './dparse/ast/SharedStaticConstructor.location.html', attributes: []},
{name: 'dparse.ast.SharedStaticConstructor.memberFunctionAttributes', kind: "variabledeclaration", path: './dparse/ast/SharedStaticConstructor.memberFunctionAttributes.html', attributes: []},
{name: 'dparse.ast.SharedStaticDestructor', kind: "classdeclaration", path: './dparse/ast/SharedStaticDestructor.html', attributes: []},
{name: 'dparse.ast.SharedStaticDestructor.accept', kind: "functiondeclaration", path: './dparse/ast/SharedStaticDestructor.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.SharedStaticDestructor.column', kind: "variabledeclaration", path: './dparse/ast/SharedStaticDestructor.column.html', attributes: []},
{name: 'dparse.ast.SharedStaticDestructor.comment', kind: "variabledeclaration", path: './dparse/ast/SharedStaticDestructor.comment.html', attributes: []},
{name: 'dparse.ast.SharedStaticDestructor.functionBody', kind: "variabledeclaration", path: './dparse/ast/SharedStaticDestructor.functionBody.html', attributes: []},
{name: 'dparse.ast.SharedStaticDestructor.line', kind: "variabledeclaration", path: './dparse/ast/SharedStaticDestructor.line.html', attributes: []},
{name: 'dparse.ast.SharedStaticDestructor.location', kind: "variabledeclaration", path: './dparse/ast/SharedStaticDestructor.location.html', attributes: []},
{name: 'dparse.ast.SharedStaticDestructor.memberFunctionAttributes', kind: "variabledeclaration", path: './dparse/ast/SharedStaticDestructor.memberFunctionAttributes.html', attributes: []},
{name: 'dparse.ast.ShiftExpression', kind: "classdeclaration", path: './dparse/ast/ShiftExpression.html', attributes: []},
{name: 'dparse.ast.ShiftExpression.accept', kind: "functiondeclaration", path: './dparse/ast/ShiftExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.ShiftExpression.operator', kind: "variabledeclaration", path: './dparse/ast/ShiftExpression.operator.html', attributes: []},
{name: 'dparse.ast.ShortenedFunctionBody', kind: "classdeclaration", path: './dparse/ast/ShortenedFunctionBody.html', attributes: []},
{name: 'dparse.ast.ShortenedFunctionBody.accept', kind: "functiondeclaration", path: './dparse/ast/ShortenedFunctionBody.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.ShortenedFunctionBody.expression', kind: "variabledeclaration", path: './dparse/ast/ShortenedFunctionBody.expression.html', attributes: []},
{name: 'dparse.ast.ShortenedFunctionBody.functionContracts', kind: "variabledeclaration", path: './dparse/ast/ShortenedFunctionBody.functionContracts.html', attributes: []},
{name: 'dparse.ast.SingleImport', kind: "classdeclaration", path: './dparse/ast/SingleImport.html', attributes: []},
{name: 'dparse.ast.SingleImport.accept', kind: "functiondeclaration", path: './dparse/ast/SingleImport.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.SingleImport.identifierChain', kind: "variabledeclaration", path: './dparse/ast/SingleImport.identifierChain.html', attributes: []},
{name: 'dparse.ast.SingleImport.rename', kind: "variabledeclaration", path: './dparse/ast/SingleImport.rename.html', attributes: []},
{name: 'dparse.ast.SpecifiedFunctionBody', kind: "classdeclaration", path: './dparse/ast/SpecifiedFunctionBody.html', attributes: []},
{name: 'dparse.ast.SpecifiedFunctionBody.accept', kind: "functiondeclaration", path: './dparse/ast/SpecifiedFunctionBody.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.SpecifiedFunctionBody.blockStatement', kind: "variabledeclaration", path: './dparse/ast/SpecifiedFunctionBody.blockStatement.html', attributes: []},
{name: 'dparse.ast.SpecifiedFunctionBody.functionContracts', kind: "variabledeclaration", path: './dparse/ast/SpecifiedFunctionBody.functionContracts.html', attributes: []},
{name: 'dparse.ast.SpecifiedFunctionBody.hasDo', kind: "variabledeclaration", path: './dparse/ast/SpecifiedFunctionBody.hasDo.html', attributes: []},
{name: 'dparse.ast.Statement', kind: "classdeclaration", path: './dparse/ast/Statement.html', attributes: []},
{name: 'dparse.ast.Statement.accept', kind: "functiondeclaration", path: './dparse/ast/Statement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Statement.caseRangeStatement', kind: "variabledeclaration", path: './dparse/ast/Statement.caseRangeStatement.html', attributes: []},
{name: 'dparse.ast.Statement.caseStatement', kind: "variabledeclaration", path: './dparse/ast/Statement.caseStatement.html', attributes: []},
{name: 'dparse.ast.Statement.defaultStatement', kind: "variabledeclaration", path: './dparse/ast/Statement.defaultStatement.html', attributes: []},
{name: 'dparse.ast.Statement.statementNoCaseNoDefault', kind: "variabledeclaration", path: './dparse/ast/Statement.statementNoCaseNoDefault.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault', kind: "classdeclaration", path: './dparse/ast/StatementNoCaseNoDefault.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.accept', kind: "functiondeclaration", path: './dparse/ast/StatementNoCaseNoDefault.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.StatementNoCaseNoDefault.asmStatement', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.asmStatement.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.blockStatement', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.blockStatement.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.breakStatement', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.breakStatement.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.conditionalStatement', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.conditionalStatement.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.continueStatement', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.continueStatement.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.debugSpecification', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.debugSpecification.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.doStatement', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.doStatement.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.endLocation', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.endLocation.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.expressionStatement', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.expressionStatement.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.finalSwitchStatement', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.finalSwitchStatement.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.foreachStatement', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.foreachStatement.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.forStatement', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.forStatement.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.gotoStatement', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.gotoStatement.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.ifStatement', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.ifStatement.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.labeledStatement', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.labeledStatement.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.pragmaStatement', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.pragmaStatement.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.returnStatement', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.returnStatement.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.scopeGuardStatement', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.scopeGuardStatement.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.startLocation', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.startLocation.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.staticAssertStatement', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.staticAssertStatement.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.staticForeachStatement', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.staticForeachStatement.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.switchStatement', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.switchStatement.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.synchronizedStatement', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.synchronizedStatement.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.tryStatement', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.tryStatement.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.versionSpecification', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.versionSpecification.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.whileStatement', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.whileStatement.html', attributes: []},
{name: 'dparse.ast.StatementNoCaseNoDefault.withStatement', kind: "variabledeclaration", path: './dparse/ast/StatementNoCaseNoDefault.withStatement.html', attributes: []},
{name: 'dparse.ast.StaticAssertDeclaration', kind: "classdeclaration", path: './dparse/ast/StaticAssertDeclaration.html', attributes: []},
{name: 'dparse.ast.StaticAssertDeclaration.accept', kind: "functiondeclaration", path: './dparse/ast/StaticAssertDeclaration.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.StaticAssertDeclaration.staticAssertStatement', kind: "variabledeclaration", path: './dparse/ast/StaticAssertDeclaration.staticAssertStatement.html', attributes: []},
{name: 'dparse.ast.StaticAssertStatement', kind: "classdeclaration", path: './dparse/ast/StaticAssertStatement.html', attributes: []},
{name: 'dparse.ast.StaticAssertStatement.accept', kind: "functiondeclaration", path: './dparse/ast/StaticAssertStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.StaticAssertStatement.assertExpression', kind: "variabledeclaration", path: './dparse/ast/StaticAssertStatement.assertExpression.html', attributes: []},
{name: 'dparse.ast.StaticConstructor', kind: "classdeclaration", path: './dparse/ast/StaticConstructor.html', attributes: []},
{name: 'dparse.ast.StaticConstructor.accept', kind: "functiondeclaration", path: './dparse/ast/StaticConstructor.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.StaticConstructor.column', kind: "variabledeclaration", path: './dparse/ast/StaticConstructor.column.html', attributes: []},
{name: 'dparse.ast.StaticConstructor.comment', kind: "variabledeclaration", path: './dparse/ast/StaticConstructor.comment.html', attributes: []},
{name: 'dparse.ast.StaticConstructor.functionBody', kind: "variabledeclaration", path: './dparse/ast/StaticConstructor.functionBody.html', attributes: []},
{name: 'dparse.ast.StaticConstructor.line', kind: "variabledeclaration", path: './dparse/ast/StaticConstructor.line.html', attributes: []},
{name: 'dparse.ast.StaticConstructor.location', kind: "variabledeclaration", path: './dparse/ast/StaticConstructor.location.html', attributes: []},
{name: 'dparse.ast.StaticConstructor.memberFunctionAttributes', kind: "variabledeclaration", path: './dparse/ast/StaticConstructor.memberFunctionAttributes.html', attributes: []},
{name: 'dparse.ast.StaticDestructor', kind: "classdeclaration", path: './dparse/ast/StaticDestructor.html', attributes: []},
{name: 'dparse.ast.StaticDestructor.accept', kind: "functiondeclaration", path: './dparse/ast/StaticDestructor.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.StaticDestructor.column', kind: "variabledeclaration", path: './dparse/ast/StaticDestructor.column.html', attributes: []},
{name: 'dparse.ast.StaticDestructor.comment', kind: "variabledeclaration", path: './dparse/ast/StaticDestructor.comment.html', attributes: []},
{name: 'dparse.ast.StaticDestructor.functionBody', kind: "variabledeclaration", path: './dparse/ast/StaticDestructor.functionBody.html', attributes: []},
{name: 'dparse.ast.StaticDestructor.line', kind: "variabledeclaration", path: './dparse/ast/StaticDestructor.line.html', attributes: []},
{name: 'dparse.ast.StaticDestructor.location', kind: "variabledeclaration", path: './dparse/ast/StaticDestructor.location.html', attributes: []},
{name: 'dparse.ast.StaticDestructor.memberFunctionAttributes', kind: "variabledeclaration", path: './dparse/ast/StaticDestructor.memberFunctionAttributes.html', attributes: []},
{name: 'dparse.ast.StaticForeachDeclaration', kind: "aliasdeclaration", path: './dparse/ast/StaticForeachDeclaration.html', attributes: []},
{name: 'dparse.ast.StaticForeachStatement', kind: "classdeclaration", path: './dparse/ast/StaticForeachStatement.html', attributes: []},
{name: 'dparse.ast.StaticForeachStatement.accept', kind: "functiondeclaration", path: './dparse/ast/StaticForeachStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.StaticForeachStatement.foreachStatement', kind: "variabledeclaration", path: './dparse/ast/StaticForeachStatement.foreachStatement.html', attributes: []},
{name: 'dparse.ast.StaticIfCondition', kind: "classdeclaration", path: './dparse/ast/StaticIfCondition.html', attributes: []},
{name: 'dparse.ast.StaticIfCondition.accept', kind: "functiondeclaration", path: './dparse/ast/StaticIfCondition.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.StaticIfCondition.assignExpression', kind: "variabledeclaration", path: './dparse/ast/StaticIfCondition.assignExpression.html', attributes: []},
{name: 'dparse.ast.StorageClass', kind: "classdeclaration", path: './dparse/ast/StorageClass.html', attributes: []},
{name: 'dparse.ast.StorageClass.accept', kind: "functiondeclaration", path: './dparse/ast/StorageClass.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.StorageClass.alignAttribute', kind: "variabledeclaration", path: './dparse/ast/StorageClass.alignAttribute.html', attributes: []},
{name: 'dparse.ast.StorageClass.atAttribute', kind: "variabledeclaration", path: './dparse/ast/StorageClass.atAttribute.html', attributes: []},
{name: 'dparse.ast.StorageClass.deprecated_', kind: "variabledeclaration", path: './dparse/ast/StorageClass.deprecated_.html', attributes: []},
{name: 'dparse.ast.StorageClass.linkageAttribute', kind: "variabledeclaration", path: './dparse/ast/StorageClass.linkageAttribute.html', attributes: []},
{name: 'dparse.ast.StorageClass.token', kind: "variabledeclaration", path: './dparse/ast/StorageClass.token.html', attributes: []},
{name: 'dparse.ast.StringLiteralList', kind: "classdeclaration", path: './dparse/ast/StringLiteralList.html', attributes: []},
{name: 'dparse.ast.StringLiteralList.accept', kind: "functiondeclaration", path: './dparse/ast/StringLiteralList.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.StringLiteralList.items', kind: "variabledeclaration", path: './dparse/ast/StringLiteralList.items.html', attributes: []},
{name: 'dparse.ast.StructBody', kind: "classdeclaration", path: './dparse/ast/StructBody.html', attributes: []},
{name: 'dparse.ast.StructBody.accept', kind: "functiondeclaration", path: './dparse/ast/StructBody.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.StructBody.declarations', kind: "variabledeclaration", path: './dparse/ast/StructBody.declarations.html', attributes: []},
{name: 'dparse.ast.StructBody.endLocation', kind: "variabledeclaration", path: './dparse/ast/StructBody.endLocation.html', attributes: []},
{name: 'dparse.ast.StructBody.startLocation', kind: "variabledeclaration", path: './dparse/ast/StructBody.startLocation.html', attributes: []},
{name: 'dparse.ast.StructDeclaration', kind: "classdeclaration", path: './dparse/ast/StructDeclaration.html', attributes: []},
{name: 'dparse.ast.StructDeclaration.accept', kind: "functiondeclaration", path: './dparse/ast/StructDeclaration.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.StructDeclaration.comment', kind: "variabledeclaration", path: './dparse/ast/StructDeclaration.comment.html', attributes: []},
{name: 'dparse.ast.StructDeclaration.constraint', kind: "variabledeclaration", path: './dparse/ast/StructDeclaration.constraint.html', attributes: []},
{name: 'dparse.ast.StructDeclaration.name', kind: "variabledeclaration", path: './dparse/ast/StructDeclaration.name.html', attributes: []},
{name: 'dparse.ast.StructDeclaration.structBody', kind: "variabledeclaration", path: './dparse/ast/StructDeclaration.structBody.html', attributes: []},
{name: 'dparse.ast.StructDeclaration.templateParameters', kind: "variabledeclaration", path: './dparse/ast/StructDeclaration.templateParameters.html', attributes: []},
{name: 'dparse.ast.StructInitializer', kind: "classdeclaration", path: './dparse/ast/StructInitializer.html', attributes: []},
{name: 'dparse.ast.StructInitializer.accept', kind: "functiondeclaration", path: './dparse/ast/StructInitializer.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.StructInitializer.endLocation', kind: "variabledeclaration", path: './dparse/ast/StructInitializer.endLocation.html', attributes: []},
{name: 'dparse.ast.StructInitializer.startLocation', kind: "variabledeclaration", path: './dparse/ast/StructInitializer.startLocation.html', attributes: []},
{name: 'dparse.ast.StructInitializer.structMemberInitializers', kind: "variabledeclaration", path: './dparse/ast/StructInitializer.structMemberInitializers.html', attributes: []},
{name: 'dparse.ast.StructMemberInitializer', kind: "classdeclaration", path: './dparse/ast/StructMemberInitializer.html', attributes: []},
{name: 'dparse.ast.StructMemberInitializer.accept', kind: "functiondeclaration", path: './dparse/ast/StructMemberInitializer.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.StructMemberInitializer.identifier', kind: "variabledeclaration", path: './dparse/ast/StructMemberInitializer.identifier.html', attributes: []},
{name: 'dparse.ast.StructMemberInitializer.nonVoidInitializer', kind: "variabledeclaration", path: './dparse/ast/StructMemberInitializer.nonVoidInitializer.html', attributes: []},
{name: 'dparse.ast.StructMemberInitializers', kind: "classdeclaration", path: './dparse/ast/StructMemberInitializers.html', attributes: []},
{name: 'dparse.ast.StructMemberInitializers.accept', kind: "functiondeclaration", path: './dparse/ast/StructMemberInitializers.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.StructMemberInitializers.structMemberInitializers', kind: "variabledeclaration", path: './dparse/ast/StructMemberInitializers.structMemberInitializers.html', attributes: []},
{name: 'dparse.ast.SwitchStatement', kind: "classdeclaration", path: './dparse/ast/SwitchStatement.html', attributes: []},
{name: 'dparse.ast.SwitchStatement.accept', kind: "functiondeclaration", path: './dparse/ast/SwitchStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.SwitchStatement.expression', kind: "variabledeclaration", path: './dparse/ast/SwitchStatement.expression.html', attributes: []},
{name: 'dparse.ast.SwitchStatement.statement', kind: "variabledeclaration", path: './dparse/ast/SwitchStatement.statement.html', attributes: []},
{name: 'dparse.ast.Symbol', kind: "classdeclaration", path: './dparse/ast/Symbol.html', attributes: []},
{name: 'dparse.ast.Symbol.accept', kind: "functiondeclaration", path: './dparse/ast/Symbol.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Symbol.dot', kind: "variabledeclaration", path: './dparse/ast/Symbol.dot.html', attributes: []},
{name: 'dparse.ast.Symbol.identifierOrTemplateChain', kind: "variabledeclaration", path: './dparse/ast/Symbol.identifierOrTemplateChain.html', attributes: []},
{name: 'dparse.ast.SynchronizedStatement', kind: "classdeclaration", path: './dparse/ast/SynchronizedStatement.html', attributes: []},
{name: 'dparse.ast.SynchronizedStatement.accept', kind: "functiondeclaration", path: './dparse/ast/SynchronizedStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.SynchronizedStatement.expression', kind: "variabledeclaration", path: './dparse/ast/SynchronizedStatement.expression.html', attributes: []},
{name: 'dparse.ast.SynchronizedStatement.statementNoCaseNoDefault', kind: "variabledeclaration", path: './dparse/ast/SynchronizedStatement.statementNoCaseNoDefault.html', attributes: []},
{name: 'dparse.ast.TemplateAliasParameter', kind: "classdeclaration", path: './dparse/ast/TemplateAliasParameter.html', attributes: []},
{name: 'dparse.ast.TemplateAliasParameter.accept', kind: "functiondeclaration", path: './dparse/ast/TemplateAliasParameter.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.TemplateAliasParameter.assignExpression', kind: "variabledeclaration", path: './dparse/ast/TemplateAliasParameter.assignExpression.html', attributes: []},
{name: 'dparse.ast.TemplateAliasParameter.assignType', kind: "variabledeclaration", path: './dparse/ast/TemplateAliasParameter.assignType.html', attributes: []},
{name: 'dparse.ast.TemplateAliasParameter.colonExpression', kind: "variabledeclaration", path: './dparse/ast/TemplateAliasParameter.colonExpression.html', attributes: []},
{name: 'dparse.ast.TemplateAliasParameter.colonType', kind: "variabledeclaration", path: './dparse/ast/TemplateAliasParameter.colonType.html', attributes: []},
{name: 'dparse.ast.TemplateAliasParameter.identifier', kind: "variabledeclaration", path: './dparse/ast/TemplateAliasParameter.identifier.html', attributes: []},
{name: 'dparse.ast.TemplateAliasParameter.type', kind: "variabledeclaration", path: './dparse/ast/TemplateAliasParameter.type.html', attributes: []},
{name: 'dparse.ast.TemplateArgument', kind: "classdeclaration", path: './dparse/ast/TemplateArgument.html', attributes: []},
{name: 'dparse.ast.TemplateArgument.accept', kind: "functiondeclaration", path: './dparse/ast/TemplateArgument.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.TemplateArgument.assignExpression', kind: "variabledeclaration", path: './dparse/ast/TemplateArgument.assignExpression.html', attributes: []},
{name: 'dparse.ast.TemplateArgument.type', kind: "variabledeclaration", path: './dparse/ast/TemplateArgument.type.html', attributes: []},
{name: 'dparse.ast.TemplateArgumentList', kind: "classdeclaration", path: './dparse/ast/TemplateArgumentList.html', attributes: []},
{name: 'dparse.ast.TemplateArgumentList.accept', kind: "functiondeclaration", path: './dparse/ast/TemplateArgumentList.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.TemplateArgumentList.items', kind: "variabledeclaration", path: './dparse/ast/TemplateArgumentList.items.html', attributes: []},
{name: 'dparse.ast.TemplateArguments', kind: "classdeclaration", path: './dparse/ast/TemplateArguments.html', attributes: []},
{name: 'dparse.ast.TemplateArguments.accept', kind: "functiondeclaration", path: './dparse/ast/TemplateArguments.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.TemplateArguments.namedTemplateArgumentList', kind: "variabledeclaration", path: './dparse/ast/TemplateArguments.namedTemplateArgumentList.html', attributes: []},
{name: 'dparse.ast.TemplateArguments.templateSingleArgument', kind: "variabledeclaration", path: './dparse/ast/TemplateArguments.templateSingleArgument.html', attributes: []},
{name: 'dparse.ast.TemplateDeclaration', kind: "classdeclaration", path: './dparse/ast/TemplateDeclaration.html', attributes: []},
{name: 'dparse.ast.TemplateDeclaration.accept', kind: "functiondeclaration", path: './dparse/ast/TemplateDeclaration.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.TemplateDeclaration.comment', kind: "variabledeclaration", path: './dparse/ast/TemplateDeclaration.comment.html', attributes: []},
{name: 'dparse.ast.TemplateDeclaration.constraint', kind: "variabledeclaration", path: './dparse/ast/TemplateDeclaration.constraint.html', attributes: []},
{name: 'dparse.ast.TemplateDeclaration.declarations', kind: "variabledeclaration", path: './dparse/ast/TemplateDeclaration.declarations.html', attributes: []},
{name: 'dparse.ast.TemplateDeclaration.endLocation', kind: "variabledeclaration", path: './dparse/ast/TemplateDeclaration.endLocation.html', attributes: []},
{name: 'dparse.ast.TemplateDeclaration.name', kind: "variabledeclaration", path: './dparse/ast/TemplateDeclaration.name.html', attributes: []},
{name: 'dparse.ast.TemplateDeclaration.startLocation', kind: "variabledeclaration", path: './dparse/ast/TemplateDeclaration.startLocation.html', attributes: []},
{name: 'dparse.ast.TemplateDeclaration.templateParameters', kind: "variabledeclaration", path: './dparse/ast/TemplateDeclaration.templateParameters.html', attributes: []},
{name: 'dparse.ast.TemplateInstance', kind: "classdeclaration", path: './dparse/ast/TemplateInstance.html', attributes: []},
{name: 'dparse.ast.TemplateInstance.accept', kind: "functiondeclaration", path: './dparse/ast/TemplateInstance.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.TemplateInstance.identifier', kind: "variabledeclaration", path: './dparse/ast/TemplateInstance.identifier.html', attributes: []},
{name: 'dparse.ast.TemplateInstance.templateArguments', kind: "variabledeclaration", path: './dparse/ast/TemplateInstance.templateArguments.html', attributes: []},
{name: 'dparse.ast.TemplateMixinExpression', kind: "classdeclaration", path: './dparse/ast/TemplateMixinExpression.html', attributes: []},
{name: 'dparse.ast.TemplateMixinExpression.accept', kind: "functiondeclaration", path: './dparse/ast/TemplateMixinExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.TemplateMixinExpression.identifier', kind: "variabledeclaration", path: './dparse/ast/TemplateMixinExpression.identifier.html', attributes: []},
{name: 'dparse.ast.TemplateMixinExpression.mixinTemplateName', kind: "variabledeclaration", path: './dparse/ast/TemplateMixinExpression.mixinTemplateName.html', attributes: []},
{name: 'dparse.ast.TemplateMixinExpression.templateArguments', kind: "variabledeclaration", path: './dparse/ast/TemplateMixinExpression.templateArguments.html', attributes: []},
{name: 'dparse.ast.TemplateParameter', kind: "classdeclaration", path: './dparse/ast/TemplateParameter.html', attributes: []},
{name: 'dparse.ast.TemplateParameter.accept', kind: "functiondeclaration", path: './dparse/ast/TemplateParameter.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.TemplateParameter.templateAliasParameter', kind: "variabledeclaration", path: './dparse/ast/TemplateParameter.templateAliasParameter.html', attributes: []},
{name: 'dparse.ast.TemplateParameter.templateThisParameter', kind: "variabledeclaration", path: './dparse/ast/TemplateParameter.templateThisParameter.html', attributes: []},
{name: 'dparse.ast.TemplateParameter.templateTupleParameter', kind: "variabledeclaration", path: './dparse/ast/TemplateParameter.templateTupleParameter.html', attributes: []},
{name: 'dparse.ast.TemplateParameter.templateTypeParameter', kind: "variabledeclaration", path: './dparse/ast/TemplateParameter.templateTypeParameter.html', attributes: []},
{name: 'dparse.ast.TemplateParameter.templateValueParameter', kind: "variabledeclaration", path: './dparse/ast/TemplateParameter.templateValueParameter.html', attributes: []},
{name: 'dparse.ast.TemplateParameterList', kind: "classdeclaration", path: './dparse/ast/TemplateParameterList.html', attributes: []},
{name: 'dparse.ast.TemplateParameterList.accept', kind: "functiondeclaration", path: './dparse/ast/TemplateParameterList.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.TemplateParameterList.items', kind: "variabledeclaration", path: './dparse/ast/TemplateParameterList.items.html', attributes: []},
{name: 'dparse.ast.TemplateParameters', kind: "classdeclaration", path: './dparse/ast/TemplateParameters.html', attributes: []},
{name: 'dparse.ast.TemplateParameters.accept', kind: "functiondeclaration", path: './dparse/ast/TemplateParameters.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.TemplateParameters.templateParameterList', kind: "variabledeclaration", path: './dparse/ast/TemplateParameters.templateParameterList.html', attributes: []},
{name: 'dparse.ast.TemplateSingleArgument', kind: "classdeclaration", path: './dparse/ast/TemplateSingleArgument.html', attributes: []},
{name: 'dparse.ast.TemplateSingleArgument.accept', kind: "functiondeclaration", path: './dparse/ast/TemplateSingleArgument.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.TemplateSingleArgument.token', kind: "variabledeclaration", path: './dparse/ast/TemplateSingleArgument.token.html', attributes: []},
{name: 'dparse.ast.TemplateThisParameter', kind: "classdeclaration", path: './dparse/ast/TemplateThisParameter.html', attributes: []},
{name: 'dparse.ast.TemplateThisParameter.accept', kind: "functiondeclaration", path: './dparse/ast/TemplateThisParameter.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.TemplateThisParameter.templateTypeParameter', kind: "variabledeclaration", path: './dparse/ast/TemplateThisParameter.templateTypeParameter.html', attributes: []},
{name: 'dparse.ast.TemplateTupleParameter', kind: "classdeclaration", path: './dparse/ast/TemplateTupleParameter.html', attributes: []},
{name: 'dparse.ast.TemplateTupleParameter.accept', kind: "functiondeclaration", path: './dparse/ast/TemplateTupleParameter.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.TemplateTupleParameter.identifier', kind: "variabledeclaration", path: './dparse/ast/TemplateTupleParameter.identifier.html', attributes: []},
{name: 'dparse.ast.TemplateTypeParameter', kind: "classdeclaration", path: './dparse/ast/TemplateTypeParameter.html', attributes: []},
{name: 'dparse.ast.TemplateTypeParameter.accept', kind: "functiondeclaration", path: './dparse/ast/TemplateTypeParameter.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.TemplateTypeParameter.assignType', kind: "variabledeclaration", path: './dparse/ast/TemplateTypeParameter.assignType.html', attributes: []},
{name: 'dparse.ast.TemplateTypeParameter.colonType', kind: "variabledeclaration", path: './dparse/ast/TemplateTypeParameter.colonType.html', attributes: []},
{name: 'dparse.ast.TemplateTypeParameter.identifier', kind: "variabledeclaration", path: './dparse/ast/TemplateTypeParameter.identifier.html', attributes: []},
{name: 'dparse.ast.TemplateValueParameter', kind: "classdeclaration", path: './dparse/ast/TemplateValueParameter.html', attributes: []},
{name: 'dparse.ast.TemplateValueParameter.accept', kind: "functiondeclaration", path: './dparse/ast/TemplateValueParameter.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.TemplateValueParameter.assignExpression', kind: "variabledeclaration", path: './dparse/ast/TemplateValueParameter.assignExpression.html', attributes: []},
{name: 'dparse.ast.TemplateValueParameter.identifier', kind: "variabledeclaration", path: './dparse/ast/TemplateValueParameter.identifier.html', attributes: []},
{name: 'dparse.ast.TemplateValueParameter.templateValueParameterDefault', kind: "variabledeclaration", path: './dparse/ast/TemplateValueParameter.templateValueParameterDefault.html', attributes: []},
{name: 'dparse.ast.TemplateValueParameter.type', kind: "variabledeclaration", path: './dparse/ast/TemplateValueParameter.type.html', attributes: []},
{name: 'dparse.ast.TemplateValueParameterDefault', kind: "classdeclaration", path: './dparse/ast/TemplateValueParameterDefault.html', attributes: []},
{name: 'dparse.ast.TemplateValueParameterDefault.accept', kind: "functiondeclaration", path: './dparse/ast/TemplateValueParameterDefault.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.TemplateValueParameterDefault.assignExpression', kind: "variabledeclaration", path: './dparse/ast/TemplateValueParameterDefault.assignExpression.html', attributes: []},
{name: 'dparse.ast.TemplateValueParameterDefault.token', kind: "variabledeclaration", path: './dparse/ast/TemplateValueParameterDefault.token.html', attributes: []},
{name: 'dparse.ast.TernaryExpression', kind: "classdeclaration", path: './dparse/ast/TernaryExpression.html', attributes: []},
{name: 'dparse.ast.TernaryExpression.accept', kind: "functiondeclaration", path: './dparse/ast/TernaryExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.TernaryExpression.colon', kind: "variabledeclaration", path: './dparse/ast/TernaryExpression.colon.html', attributes: []},
{name: 'dparse.ast.TernaryExpression.expression', kind: "variabledeclaration", path: './dparse/ast/TernaryExpression.expression.html', attributes: []},
{name: 'dparse.ast.TernaryExpression.orOrExpression', kind: "variabledeclaration", path: './dparse/ast/TernaryExpression.orOrExpression.html', attributes: []},
{name: 'dparse.ast.TernaryExpression.ternaryExpression', kind: "variabledeclaration", path: './dparse/ast/TernaryExpression.ternaryExpression.html', attributes: []},
{name: 'dparse.ast.ThrowExpression', kind: "classdeclaration", path: './dparse/ast/ThrowExpression.html', attributes: []},
{name: 'dparse.ast.ThrowExpression.accept', kind: "functiondeclaration", path: './dparse/ast/ThrowExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.ThrowExpression.expression', kind: "variabledeclaration", path: './dparse/ast/ThrowExpression.expression.html', attributes: []},
{name: 'dparse.ast.ThrowStatement', kind: "aliasdeclaration", path: './dparse/ast/ThrowStatement.html', attributes: ["deprecated"]},
{name: 'dparse.ast.TraitsExpression', kind: "classdeclaration", path: './dparse/ast/TraitsExpression.html', attributes: []},
{name: 'dparse.ast.TraitsExpression.accept', kind: "functiondeclaration", path: './dparse/ast/TraitsExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.TraitsExpression.identifier', kind: "variabledeclaration", path: './dparse/ast/TraitsExpression.identifier.html', attributes: []},
{name: 'dparse.ast.TraitsExpression.templateArgumentList', kind: "variabledeclaration", path: './dparse/ast/TraitsExpression.templateArgumentList.html', attributes: []},
{name: 'dparse.ast.TryStatement', kind: "classdeclaration", path: './dparse/ast/TryStatement.html', attributes: []},
{name: 'dparse.ast.TryStatement.accept', kind: "functiondeclaration", path: './dparse/ast/TryStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.TryStatement.catches', kind: "variabledeclaration", path: './dparse/ast/TryStatement.catches.html', attributes: []},
{name: 'dparse.ast.TryStatement.declarationOrStatement', kind: "variabledeclaration", path: './dparse/ast/TryStatement.declarationOrStatement.html', attributes: []},
{name: 'dparse.ast.TryStatement.finally_', kind: "variabledeclaration", path: './dparse/ast/TryStatement.finally_.html', attributes: []},
{name: 'dparse.ast.Type', kind: "classdeclaration", path: './dparse/ast/Type.html', attributes: []},
{name: 'dparse.ast.Type.accept', kind: "functiondeclaration", path: './dparse/ast/Type.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Type.type2', kind: "variabledeclaration", path: './dparse/ast/Type.type2.html', attributes: []},
{name: 'dparse.ast.Type.typeConstructors', kind: "variabledeclaration", path: './dparse/ast/Type.typeConstructors.html', attributes: []},
{name: 'dparse.ast.Type.typeSuffixes', kind: "variabledeclaration", path: './dparse/ast/Type.typeSuffixes.html', attributes: []},
{name: 'dparse.ast.Type2', kind: "classdeclaration", path: './dparse/ast/Type2.html', attributes: []},
{name: 'dparse.ast.Type2.accept', kind: "functiondeclaration", path: './dparse/ast/Type2.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Type2.builtinType', kind: "variabledeclaration", path: './dparse/ast/Type2.builtinType.html', attributes: []},
{name: 'dparse.ast.Type2.mixinExpression', kind: "variabledeclaration", path: './dparse/ast/Type2.mixinExpression.html', attributes: []},
{name: 'dparse.ast.Type2.superOrThis', kind: "aliasdeclaration", path: './dparse/ast/Type2.superOrThis.html', attributes: []},
{name: 'dparse.ast.Type2.traitsExpression', kind: "variabledeclaration", path: './dparse/ast/Type2.traitsExpression.html', attributes: []},
{name: 'dparse.ast.Type2.type', kind: "variabledeclaration", path: './dparse/ast/Type2.type.html', attributes: []},
{name: 'dparse.ast.Type2.typeConstructor', kind: "variabledeclaration", path: './dparse/ast/Type2.typeConstructor.html', attributes: []},
{name: 'dparse.ast.Type2.typeIdentifierPart', kind: "variabledeclaration", path: './dparse/ast/Type2.typeIdentifierPart.html', attributes: []},
{name: 'dparse.ast.Type2.typeofExpression', kind: "variabledeclaration", path: './dparse/ast/Type2.typeofExpression.html', attributes: []},
{name: 'dparse.ast.Type2.vector', kind: "variabledeclaration", path: './dparse/ast/Type2.vector.html', attributes: []},
{name: 'dparse.ast.TypeIdentifierPart', kind: "classdeclaration", path: './dparse/ast/TypeIdentifierPart.html', attributes: []},
{name: 'dparse.ast.TypeIdentifierPart.accept', kind: "functiondeclaration", path: './dparse/ast/TypeIdentifierPart.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.TypeIdentifierPart.dot', kind: "variabledeclaration", path: './dparse/ast/TypeIdentifierPart.dot.html', attributes: []},
{name: 'dparse.ast.TypeIdentifierPart.identifierOrTemplateInstance', kind: "variabledeclaration", path: './dparse/ast/TypeIdentifierPart.identifierOrTemplateInstance.html', attributes: []},
{name: 'dparse.ast.TypeIdentifierPart.indexer', kind: "variabledeclaration", path: './dparse/ast/TypeIdentifierPart.indexer.html', attributes: []},
{name: 'dparse.ast.TypeIdentifierPart.typeIdentifierPart', kind: "variabledeclaration", path: './dparse/ast/TypeIdentifierPart.typeIdentifierPart.html', attributes: []},
{name: 'dparse.ast.TypeidExpression', kind: "classdeclaration", path: './dparse/ast/TypeidExpression.html', attributes: []},
{name: 'dparse.ast.TypeidExpression.accept', kind: "functiondeclaration", path: './dparse/ast/TypeidExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.TypeidExpression.expression', kind: "variabledeclaration", path: './dparse/ast/TypeidExpression.expression.html', attributes: []},
{name: 'dparse.ast.TypeidExpression.type', kind: "variabledeclaration", path: './dparse/ast/TypeidExpression.type.html', attributes: []},
{name: 'dparse.ast.TypeofExpression', kind: "classdeclaration", path: './dparse/ast/TypeofExpression.html', attributes: []},
{name: 'dparse.ast.TypeofExpression.accept', kind: "functiondeclaration", path: './dparse/ast/TypeofExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.TypeofExpression.expression', kind: "variabledeclaration", path: './dparse/ast/TypeofExpression.expression.html', attributes: []},
{name: 'dparse.ast.TypeofExpression.return_', kind: "variabledeclaration", path: './dparse/ast/TypeofExpression.return_.html', attributes: []},
{name: 'dparse.ast.TypeSpecialization', kind: "classdeclaration", path: './dparse/ast/TypeSpecialization.html', attributes: []},
{name: 'dparse.ast.TypeSpecialization.accept', kind: "functiondeclaration", path: './dparse/ast/TypeSpecialization.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.TypeSpecialization.token', kind: "variabledeclaration", path: './dparse/ast/TypeSpecialization.token.html', attributes: []},
{name: 'dparse.ast.TypeSpecialization.type', kind: "variabledeclaration", path: './dparse/ast/TypeSpecialization.type.html', attributes: []},
{name: 'dparse.ast.TypeSuffix', kind: "classdeclaration", path: './dparse/ast/TypeSuffix.html', attributes: []},
{name: 'dparse.ast.TypeSuffix.accept', kind: "functiondeclaration", path: './dparse/ast/TypeSuffix.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.TypeSuffix.array', kind: "variabledeclaration", path: './dparse/ast/TypeSuffix.array.html', attributes: []},
{name: 'dparse.ast.TypeSuffix.delegateOrFunction', kind: "variabledeclaration", path: './dparse/ast/TypeSuffix.delegateOrFunction.html', attributes: []},
{name: 'dparse.ast.TypeSuffix.high', kind: "variabledeclaration", path: './dparse/ast/TypeSuffix.high.html', attributes: []},
{name: 'dparse.ast.TypeSuffix.low', kind: "variabledeclaration", path: './dparse/ast/TypeSuffix.low.html', attributes: []},
{name: 'dparse.ast.TypeSuffix.memberFunctionAttributes', kind: "variabledeclaration", path: './dparse/ast/TypeSuffix.memberFunctionAttributes.html', attributes: []},
{name: 'dparse.ast.TypeSuffix.parameters', kind: "variabledeclaration", path: './dparse/ast/TypeSuffix.parameters.html', attributes: []},
{name: 'dparse.ast.TypeSuffix.star', kind: "variabledeclaration", path: './dparse/ast/TypeSuffix.star.html', attributes: []},
{name: 'dparse.ast.TypeSuffix.type', kind: "variabledeclaration", path: './dparse/ast/TypeSuffix.type.html', attributes: []},
{name: 'dparse.ast.UnaryExpression', kind: "classdeclaration", path: './dparse/ast/UnaryExpression.html', attributes: []},
{name: 'dparse.ast.UnaryExpression.accept', kind: "functiondeclaration", path: './dparse/ast/UnaryExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.UnaryExpression.assertExpression', kind: "variabledeclaration", path: './dparse/ast/UnaryExpression.assertExpression.html', attributes: []},
{name: 'dparse.ast.UnaryExpression.castExpression', kind: "variabledeclaration", path: './dparse/ast/UnaryExpression.castExpression.html', attributes: []},
{name: 'dparse.ast.UnaryExpression.deleteExpression', kind: "variabledeclaration", path: './dparse/ast/UnaryExpression.deleteExpression.html', attributes: []},
{name: 'dparse.ast.UnaryExpression.dotLocation', kind: "variabledeclaration", path: './dparse/ast/UnaryExpression.dotLocation.html', attributes: []},
{name: 'dparse.ast.UnaryExpression.functionCallExpression', kind: "variabledeclaration", path: './dparse/ast/UnaryExpression.functionCallExpression.html', attributes: []},
{name: 'dparse.ast.UnaryExpression.identifierOrTemplateInstance', kind: "variabledeclaration", path: './dparse/ast/UnaryExpression.identifierOrTemplateInstance.html', attributes: []},
{name: 'dparse.ast.UnaryExpression.indexExpression', kind: "variabledeclaration", path: './dparse/ast/UnaryExpression.indexExpression.html', attributes: []},
{name: 'dparse.ast.UnaryExpression.newExpression', kind: "variabledeclaration", path: './dparse/ast/UnaryExpression.newExpression.html', attributes: []},
{name: 'dparse.ast.UnaryExpression.prefix', kind: "variabledeclaration", path: './dparse/ast/UnaryExpression.prefix.html', attributes: []},
{name: 'dparse.ast.UnaryExpression.primaryExpression', kind: "variabledeclaration", path: './dparse/ast/UnaryExpression.primaryExpression.html', attributes: []},
{name: 'dparse.ast.UnaryExpression.suffix', kind: "variabledeclaration", path: './dparse/ast/UnaryExpression.suffix.html', attributes: []},
{name: 'dparse.ast.UnaryExpression.throwExpression', kind: "variabledeclaration", path: './dparse/ast/UnaryExpression.throwExpression.html', attributes: []},
{name: 'dparse.ast.UnaryExpression.type', kind: "variabledeclaration", path: './dparse/ast/UnaryExpression.type.html', attributes: []},
{name: 'dparse.ast.UnaryExpression.unaryExpression', kind: "variabledeclaration", path: './dparse/ast/UnaryExpression.unaryExpression.html', attributes: []},
{name: 'dparse.ast.UnionDeclaration', kind: "classdeclaration", path: './dparse/ast/UnionDeclaration.html', attributes: []},
{name: 'dparse.ast.UnionDeclaration.accept', kind: "functiondeclaration", path: './dparse/ast/UnionDeclaration.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.UnionDeclaration.comment', kind: "variabledeclaration", path: './dparse/ast/UnionDeclaration.comment.html', attributes: []},
{name: 'dparse.ast.UnionDeclaration.constraint', kind: "variabledeclaration", path: './dparse/ast/UnionDeclaration.constraint.html', attributes: []},
{name: 'dparse.ast.UnionDeclaration.name', kind: "variabledeclaration", path: './dparse/ast/UnionDeclaration.name.html', attributes: []},
{name: 'dparse.ast.UnionDeclaration.structBody', kind: "variabledeclaration", path: './dparse/ast/UnionDeclaration.structBody.html', attributes: []},
{name: 'dparse.ast.UnionDeclaration.templateParameters', kind: "variabledeclaration", path: './dparse/ast/UnionDeclaration.templateParameters.html', attributes: []},
{name: 'dparse.ast.Unittest', kind: "classdeclaration", path: './dparse/ast/Unittest.html', attributes: []},
{name: 'dparse.ast.Unittest.accept', kind: "functiondeclaration", path: './dparse/ast/Unittest.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Unittest.blockStatement', kind: "variabledeclaration", path: './dparse/ast/Unittest.blockStatement.html', attributes: []},
{name: 'dparse.ast.Unittest.column', kind: "variabledeclaration", path: './dparse/ast/Unittest.column.html', attributes: []},
{name: 'dparse.ast.Unittest.comment', kind: "variabledeclaration", path: './dparse/ast/Unittest.comment.html', attributes: []},
{name: 'dparse.ast.Unittest.line', kind: "variabledeclaration", path: './dparse/ast/Unittest.line.html', attributes: []},
{name: 'dparse.ast.Unittest.location', kind: "variabledeclaration", path: './dparse/ast/Unittest.location.html', attributes: []},
{name: 'dparse.ast.VariableDeclaration', kind: "classdeclaration", path: './dparse/ast/VariableDeclaration.html', attributes: []},
{name: 'dparse.ast.VariableDeclaration.accept', kind: "functiondeclaration", path: './dparse/ast/VariableDeclaration.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.VariableDeclaration.autoDeclaration', kind: "variabledeclaration", path: './dparse/ast/VariableDeclaration.autoDeclaration.html', attributes: []},
{name: 'dparse.ast.VariableDeclaration.comment', kind: "variabledeclaration", path: './dparse/ast/VariableDeclaration.comment.html', attributes: []},
{name: 'dparse.ast.VariableDeclaration.declarators', kind: "variabledeclaration", path: './dparse/ast/VariableDeclaration.declarators.html', attributes: []},
{name: 'dparse.ast.VariableDeclaration.storageClasses', kind: "variabledeclaration", path: './dparse/ast/VariableDeclaration.storageClasses.html', attributes: []},
{name: 'dparse.ast.VariableDeclaration.type', kind: "variabledeclaration", path: './dparse/ast/VariableDeclaration.type.html', attributes: []},
{name: 'dparse.ast.Vector', kind: "classdeclaration", path: './dparse/ast/Vector.html', attributes: []},
{name: 'dparse.ast.Vector.accept', kind: "functiondeclaration", path: './dparse/ast/Vector.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.Vector.type', kind: "variabledeclaration", path: './dparse/ast/Vector.type.html', attributes: []},
{name: 'dparse.ast.VersionCondition', kind: "classdeclaration", path: './dparse/ast/VersionCondition.html', attributes: []},
{name: 'dparse.ast.VersionCondition.accept', kind: "functiondeclaration", path: './dparse/ast/VersionCondition.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.VersionCondition.token', kind: "variabledeclaration", path: './dparse/ast/VersionCondition.token.html', attributes: []},
{name: 'dparse.ast.VersionCondition.versionIndex', kind: "variabledeclaration", path: './dparse/ast/VersionCondition.versionIndex.html', attributes: []},
{name: 'dparse.ast.VersionSpecification', kind: "classdeclaration", path: './dparse/ast/VersionSpecification.html', attributes: []},
{name: 'dparse.ast.VersionSpecification.accept', kind: "functiondeclaration", path: './dparse/ast/VersionSpecification.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.VersionSpecification.token', kind: "variabledeclaration", path: './dparse/ast/VersionSpecification.token.html', attributes: []},
{name: 'dparse.ast.visitIfNotNull', kind: "variabledeclaration", path: './dparse/ast/visitIfNotNull.html', attributes: []},
{name: 'dparse.ast.WhileStatement', kind: "classdeclaration", path: './dparse/ast/WhileStatement.html', attributes: []},
{name: 'dparse.ast.WhileStatement.accept', kind: "functiondeclaration", path: './dparse/ast/WhileStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.WhileStatement.condition', kind: "variabledeclaration", path: './dparse/ast/WhileStatement.condition.html', attributes: []},
{name: 'dparse.ast.WhileStatement.declarationOrStatement', kind: "variabledeclaration", path: './dparse/ast/WhileStatement.declarationOrStatement.html', attributes: []},
{name: 'dparse.ast.WhileStatement.expression', kind: "functiondeclaration", path: './dparse/ast/WhileStatement.expression.html', attributes: ["deprecated", "property", "inout"]},
{name: 'dparse.ast.WhileStatement.startIndex', kind: "variabledeclaration", path: './dparse/ast/WhileStatement.startIndex.html', attributes: []},
{name: 'dparse.ast.WithStatement', kind: "classdeclaration", path: './dparse/ast/WithStatement.html', attributes: []},
{name: 'dparse.ast.WithStatement.accept', kind: "functiondeclaration", path: './dparse/ast/WithStatement.accept.html', attributes: ["override", "const"]},
{name: 'dparse.ast.WithStatement.declarationOrStatement', kind: "variabledeclaration", path: './dparse/ast/WithStatement.declarationOrStatement.html', attributes: []},
{name: 'dparse.ast.WithStatement.expression', kind: "variabledeclaration", path: './dparse/ast/WithStatement.expression.html', attributes: []},
{name: 'dparse.ast.XorExpression', kind: "classdeclaration", path: './dparse/ast/XorExpression.html', attributes: []},
{name: 'dparse.ast.XorExpression.accept', kind: "functiondeclaration", path: './dparse/ast/XorExpression.accept.html', attributes: ["override", "const"]},
{name: 'dparse.astprinter', kind: "module", path: './dparse/astprinter.html', attributes: []},
{name: 'dparse.astprinter.XMLPrinter', kind: "classdeclaration", path: './dparse/astprinter/XMLPrinter.html', attributes: []},
{name: 'dparse.astprinter.XMLPrinter.output', kind: "variabledeclaration", path: './dparse/astprinter/XMLPrinter.output.html', attributes: []},
{name: 'dparse.astprinter.XMLPrinter.visit', kind: "aliasdeclaration", path: './dparse/astprinter/XMLPrinter.visit.html', attributes: []},
{name: 'dparse.entities', kind: "module", path: './dparse/entities.html', attributes: []},
{name: 'dparse.entities.characterEntities', kind: "variabledeclaration", path: './dparse/entities/characterEntities.html', attributes: []},
{name: 'dparse.entities.HtmlEntity', kind: "structdeclaration", path: './dparse/entities/HtmlEntity.html', attributes: []},
{name: 'dparse.entities.HtmlEntity.name', kind: "variabledeclaration", path: './dparse/entities/HtmlEntity.name.html', attributes: []},
{name: 'dparse.entities.HtmlEntity.value', kind: "variabledeclaration", path: './dparse/entities/HtmlEntity.value.html', attributes: []},
{name: 'dparse.formatter', kind: "module", path: './dparse/formatter.html', attributes: []},
{name: 'dparse.formatter.format', kind: "functiondeclaration", path: './dparse/formatter/format.html', attributes: []},
{name: 'dparse.formatter.Formatter', kind: "classdeclaration", path: './dparse/formatter/Formatter.html', attributes: []},
{name: 'dparse.formatter.Formatter.binary', kind: "functiondeclaration", path: './dparse/formatter/Formatter.binary.html', attributes: ["static"]},
{name: 'dparse.formatter.Formatter.caseDepth', kind: "variabledeclaration", path: './dparse/formatter/Formatter.caseDepth.html', attributes: []},
{name: 'dparse.formatter.Formatter.currentThing', kind: "variabledeclaration", path: './dparse/formatter/Formatter.currentThing.html', attributes: []},
{name: 'dparse.formatter.Formatter.endBlock', kind: "functiondeclaration", path: './dparse/formatter/Formatter.endBlock.html', attributes: []},
{name: 'dparse.formatter.Formatter.format', kind: "functiondeclaration", path: './dparse/formatter/Formatter.format.html', attributes: []},
{name: 'dparse.formatter.Formatter.formatCaseDecls', kind: "functiondeclaration", path: './dparse/formatter/Formatter.formatCaseDecls.html', attributes: []},
{name: 'dparse.formatter.Formatter.getIndent', kind: "functiondeclaration", path: './dparse/formatter/Formatter.getIndent.html', attributes: []},
{name: 'dparse.formatter.Formatter.ignoreNewlines', kind: "variabledeclaration", path: './dparse/formatter/Formatter.ignoreNewlines.html', attributes: []},
{name: 'dparse.formatter.Formatter.indent', kind: "functiondeclaration", path: './dparse/formatter/Formatter.indent.html', attributes: []},
{name: 'dparse.formatter.Formatter.indentLevel', kind: "variabledeclaration", path: './dparse/formatter/Formatter.indentLevel.html', attributes: []},
{name: 'dparse.formatter.Formatter.indentWidth', kind: "variabledeclaration", path: './dparse/formatter/Formatter.indentWidth.html', attributes: []},
{name: 'dparse.formatter.Formatter.isEmptyDeclaration', kind: "functiondeclaration", path: './dparse/formatter/Formatter.isEmptyDeclaration.html', attributes: []},
{name: 'dparse.formatter.Formatter.lastThing', kind: "variabledeclaration", path: './dparse/formatter/Formatter.lastThing.html', attributes: []},
{name: 'dparse.formatter.Formatter.lineGap', kind: "functiondeclaration", path: './dparse/formatter/Formatter.lineGap.html', attributes: []},
{name: 'dparse.formatter.Formatter.lineLength', kind: "variabledeclaration", path: './dparse/formatter/Formatter.lineLength.html', attributes: []},
{name: 'dparse.formatter.Formatter.maxLineLength', kind: "variabledeclaration", path: './dparse/formatter/Formatter.maxLineLength.html', attributes: []},
{name: 'dparse.formatter.Formatter.maybeIndent', kind: "functiondeclaration", path: './dparse/formatter/Formatter.maybeIndent.html', attributes: []},
{name: 'dparse.formatter.Formatter.needIndent', kind: "functiondeclaration", path: './dparse/formatter/Formatter.needIndent.html', attributes: []},
{name: 'dparse.formatter.Formatter.newline', kind: "functiondeclaration", path: './dparse/formatter/Formatter.newline.html', attributes: []},
{name: 'dparse.formatter.Formatter.newlineIndent', kind: "functiondeclaration", path: './dparse/formatter/Formatter.newlineIndent.html', attributes: []},
{name: 'dparse.formatter.Formatter.newThing', kind: "functiondeclaration", path: './dparse/formatter/Formatter.newThing.html', attributes: []},
{name: 'dparse.formatter.Formatter.outdent', kind: "functiondeclaration", path: './dparse/formatter/Formatter.outdent.html', attributes: []},
{name: 'dparse.formatter.Formatter.possibleDeclarations', kind: "enummemberdeclaration", path: './dparse/formatter/Formatter.possibleDeclarations.html', attributes: []},
{name: 'dparse.formatter.Formatter.put', kind: "functiondeclaration", path: './dparse/formatter/Formatter.put.html', attributes: []},
{name: 'dparse.formatter.Formatter.putAttrs', kind: "functiondeclaration", path: './dparse/formatter/Formatter.putAttrs.html', attributes: []},
{name: 'dparse.formatter.Formatter.putComment', kind: "functiondeclaration", path: './dparse/formatter/Formatter.putComment.html', attributes: []},
{name: 'dparse.formatter.Formatter.putIndent', kind: "functiondeclaration", path: './dparse/formatter/Formatter.putIndent.html', attributes: []},
{name: 'dparse.formatter.Formatter.sink', kind: "variabledeclaration", path: './dparse/formatter/Formatter.sink.html', attributes: []},
{name: 'dparse.formatter.Formatter.space', kind: "functiondeclaration", path: './dparse/formatter/Formatter.space.html', attributes: []},
{name: 'dparse.formatter.Formatter.startBlock', kind: "functiondeclaration", path: './dparse/formatter/Formatter.startBlock.html', attributes: []},
{name: 'dparse.formatter.Formatter.style', kind: "variabledeclaration", path: './dparse/formatter/Formatter.style.html', attributes: []},
{name: 'dparse.formatter.Formatter.this', kind: "functiondeclaration", path: './dparse/formatter/Formatter.this.html', attributes: []},
{name: 'dparse.formatter.Formatter.tokenRep', kind: "functiondeclaration", path: './dparse/formatter/Formatter.tokenRep.html', attributes: []},
{name: 'dparse.formatter.Formatter.useTabs', kind: "variabledeclaration", path: './dparse/formatter/Formatter.useTabs.html', attributes: []},
{name: 'dparse.formatter.Formatter.What', kind: "enumdeclaration", path: './dparse/formatter/Formatter.What.html', attributes: []},
{name: 'dparse.formatter.Formatter.What.aggregateDecl', kind: "enummemberdeclaration", path: './dparse/formatter/Formatter.What.html#aggregateDecl', attributes: []},
{name: 'dparse.formatter.Formatter.What.attributeDecl', kind: "enummemberdeclaration", path: './dparse/formatter/Formatter.What.html#attributeDecl', attributes: []},
{name: 'dparse.formatter.Formatter.What.catch_', kind: "enummemberdeclaration", path: './dparse/formatter/Formatter.What.html#catch_', attributes: []},
{name: 'dparse.formatter.Formatter.What.conditionalDecl', kind: "enummemberdeclaration", path: './dparse/formatter/Formatter.What.html#conditionalDecl', attributes: []},
{name: 'dparse.formatter.Formatter.What.else_', kind: "enummemberdeclaration", path: './dparse/formatter/Formatter.What.html#else_', attributes: []},
{name: 'dparse.formatter.Formatter.What.expr', kind: "enummemberdeclaration", path: './dparse/formatter/Formatter.What.html#expr', attributes: []},
{name: 'dparse.formatter.Formatter.What.functionDecl', kind: "enummemberdeclaration", path: './dparse/formatter/Formatter.What.html#functionDecl', attributes: []},
{name: 'dparse.formatter.Formatter.What.importDecl', kind: "enummemberdeclaration", path: './dparse/formatter/Formatter.What.html#importDecl', attributes: []},
{name: 'dparse.formatter.Formatter.What.loop', kind: "enummemberdeclaration", path: './dparse/formatter/Formatter.What.html#loop', attributes: []},
{name: 'dparse.formatter.Formatter.What.other', kind: "enummemberdeclaration", path: './dparse/formatter/Formatter.What.html#other', attributes: []},
{name: 'dparse.formatter.Formatter.What.variableDecl', kind: "enummemberdeclaration", path: './dparse/formatter/Formatter.What.html#variableDecl', attributes: []},
{name: 'dparse.formatter.IndentStyle', kind: "enumdeclaration", path: './dparse/formatter/IndentStyle.html', attributes: []},
{name: 'dparse.formatter.IndentStyle.allman', kind: "enummemberdeclaration", path: './dparse/formatter/IndentStyle.html#allman', attributes: []},
{name: 'dparse.formatter.IndentStyle.otbs', kind: "enummemberdeclaration", path: './dparse/formatter/IndentStyle.html#otbs', attributes: []},
{name: 'dparse.lexer', kind: "module", path: './dparse/lexer.html', attributes: []},
{name: 'dparse.lexer.BasicTypes', kind: "aliasdeclaration", path: './dparse/lexer/BasicTypes.html', attributes: []},
{name: 'dparse.lexer.ByteCombine', kind: "enummemberdeclaration", path: './dparse/lexer/ByteCombine.html', attributes: []},
{name: 'dparse.lexer.byToken', kind: "functiondeclaration", path: './dparse/lexer/byToken.html', attributes: ["auto"]},
{name: 'dparse.lexer.CommentBehavior', kind: "enumdeclaration", path: './dparse/lexer/CommentBehavior.html', attributes: []},
{name: 'dparse.lexer.CommentBehavior.intern', kind: "enummemberdeclaration", path: './dparse/lexer/CommentBehavior.html#intern', attributes: []},
{name: 'dparse.lexer.CommentBehavior.noIntern', kind: "enummemberdeclaration", path: './dparse/lexer/CommentBehavior.html#noIntern', attributes: []},
{name: 'dparse.lexer.DLexer', kind: "structdeclaration", path: './dparse/lexer/DLexer.html', attributes: []},
{name: 'dparse.lexer.DLexer.Message', kind: "structdeclaration", path: './dparse/lexer/DLexer.Message.html', attributes: []},
{name: 'dparse.lexer.DLexer.Message.column', kind: "variabledeclaration", path: './dparse/lexer/DLexer.Message.column.html', attributes: []},
{name: 'dparse.lexer.DLexer.Message.isError', kind: "variabledeclaration", path: './dparse/lexer/DLexer.Message.isError.html', attributes: []},
{name: 'dparse.lexer.DLexer.Message.line', kind: "variabledeclaration", path: './dparse/lexer/DLexer.Message.line.html', attributes: []},
{name: 'dparse.lexer.DLexer.Message.message', kind: "variabledeclaration", path: './dparse/lexer/DLexer.Message.message.html', attributes: []},
{name: 'dparse.lexer.DLexer.messages', kind: "functiondeclaration", path: './dparse/lexer/DLexer.messages.html', attributes: ["property", "const"]},
{name: 'dparse.lexer.DLexer.popFront', kind: "functiondeclaration", path: './dparse/lexer/DLexer.popFront.html', attributes: ["pure", "nothrow", "safe"]},
{name: 'dparse.lexer.DLexer.this', kind: "functiondeclaration", path: './dparse/lexer/DLexer.this.html', attributes: ["disable"]},
{name: 'dparse.lexer.getTokensForParser', kind: "functiondeclaration", path: './dparse/lexer/getTokensForParser.html', attributes: []},
{name: 'dparse.lexer.IdType', kind: "aliasdeclaration", path: './dparse/lexer/IdType.html', attributes: []},
{name: 'dparse.lexer.IntegerLiterals', kind: "aliasdeclaration", path: './dparse/lexer/IntegerLiterals.html', attributes: []},
{name: 'dparse.lexer.isBasicType', kind: "functiondeclaration", path: './dparse/lexer/isBasicType.html', attributes: ["pure", "nothrow", "nogc", "safe"]},
{name: 'dparse.lexer.isIntegerLiteral', kind: "functiondeclaration", path: './dparse/lexer/isIntegerLiteral.html', attributes: ["pure", "nothrow", "nogc", "safe"]},
{name: 'dparse.lexer.isKeyword', kind: "functiondeclaration", path: './dparse/lexer/isKeyword.html', attributes: ["pure", "nothrow", "nogc", "safe"]},
{name: 'dparse.lexer.isLiteral', kind: "functiondeclaration", path: './dparse/lexer/isLiteral.html', attributes: ["pure", "nothrow", "nogc", "safe"]},
{name: 'dparse.lexer.isNumberLiteral', kind: "functiondeclaration", path: './dparse/lexer/isNumberLiteral.html', attributes: ["pure", "nothrow", "nogc", "safe"]},
{name: 'dparse.lexer.isOperator', kind: "functiondeclaration", path: './dparse/lexer/isOperator.html', attributes: ["pure", "nothrow", "nogc", "safe"]},
{name: 'dparse.lexer.isProtection', kind: "functiondeclaration", path: './dparse/lexer/isProtection.html', attributes: ["pure", "nothrow", "nogc", "safe"]},
{name: 'dparse.lexer.isSpecialToken', kind: "functiondeclaration", path: './dparse/lexer/isSpecialToken.html', attributes: ["pure", "nothrow", "nogc", "safe"]},
{name: 'dparse.lexer.isStringLiteral', kind: "functiondeclaration", path: './dparse/lexer/isStringLiteral.html', attributes: ["pure", "nothrow", "nogc", "safe"]},
{name: 'dparse.lexer.Keywords', kind: "aliasdeclaration", path: './dparse/lexer/Keywords.html', attributes: []},
{name: 'dparse.lexer.LexerConfig', kind: "structdeclaration", path: './dparse/lexer/LexerConfig.html', attributes: []},
{name: 'dparse.lexer.LexerConfig.commentBehavior', kind: "variabledeclaration", path: './dparse/lexer/LexerConfig.commentBehavior.html', attributes: []},
{name: 'dparse.lexer.LexerConfig.fileName', kind: "variabledeclaration", path: './dparse/lexer/LexerConfig.fileName.html', attributes: []},
{name: 'dparse.lexer.LexerConfig.stringBehavior', kind: "variabledeclaration", path: './dparse/lexer/LexerConfig.stringBehavior.html', attributes: []},
{name: 'dparse.lexer.LexerConfig.whitespaceBehavior', kind: "variabledeclaration", path: './dparse/lexer/LexerConfig.whitespaceBehavior.html', attributes: []},
{name: 'dparse.lexer.Literals', kind: "aliasdeclaration", path: './dparse/lexer/Literals.html', attributes: []},
{name: 'dparse.lexer.NumberLiterals', kind: "aliasdeclaration", path: './dparse/lexer/NumberLiterals.html', attributes: []},
{name: 'dparse.lexer.Operators', kind: "aliasdeclaration", path: './dparse/lexer/Operators.html', attributes: []},
{name: 'dparse.lexer.optimalBucketCount', kind: "functiondeclaration", path: './dparse/lexer/optimalBucketCount.html', attributes: []},
{name: 'dparse.lexer.Protections', kind: "aliasdeclaration", path: './dparse/lexer/Protections.html', attributes: []},
{name: 'dparse.lexer.rangeMatch', kind: "functiondeclaration", path: './dparse/lexer/rangeMatch.html', attributes: ["pure", "nothrow", "nogc", "trusted"]},
{name: 'dparse.lexer.skip', kind: "functiondeclaration", path: './dparse/lexer/skip.html', attributes: ["pure", "nothrow", "nogc", "trusted"]},
{name: 'dparse.lexer.SpecialTokens', kind: "aliasdeclaration", path: './dparse/lexer/SpecialTokens.html', attributes: []},
{name: 'dparse.lexer.str', kind: "aliasdeclaration", path: './dparse/lexer/str.html', attributes: []},
{name: 'dparse.lexer.StringBehavior', kind: "structdeclaration", path: './dparse/lexer/StringBehavior.html', attributes: []},
{name: 'dparse.lexer.StringBehavior.behavior', kind: "variabledeclaration", path: './dparse/lexer/StringBehavior.behavior.html', attributes: []},
{name: 'dparse.lexer.StringBehavior.compiler', kind: "variabledeclaration", path: './dparse/lexer/StringBehavior.compiler.html', attributes: []},
{name: 'dparse.lexer.StringBehavior.includeQuoteChars', kind: "variabledeclaration", path: './dparse/lexer/StringBehavior.includeQuoteChars.html', attributes: []},
{name: 'dparse.lexer.StringBehavior.notEscaped', kind: "variabledeclaration", path: './dparse/lexer/StringBehavior.notEscaped.html', attributes: []},
{name: 'dparse.lexer.StringBehavior.source', kind: "variabledeclaration", path: './dparse/lexer/StringBehavior.source.html', attributes: []},
{name: 'dparse.lexer.StringCache', kind: "structdeclaration", path: './dparse/lexer/StringCache.html', attributes: []},
{name: 'dparse.lexer.StringCache.defaultBucketCount', kind: "enummemberdeclaration", path: './dparse/lexer/StringCache.defaultBucketCount.html', attributes: []},
{name: 'dparse.lexer.StringCache.intern', kind: "functiondeclaration", path: './dparse/lexer/StringCache.intern.html', attributes: ["pure", "nothrow", "nogc", "safe"]},
{name: 'dparse.lexer.StringCache.this', kind: "functiondeclaration", path: './dparse/lexer/StringCache.this.html', attributes: ["disable", "pure", "nothrow", "ref", "nogc"]},
{name: 'dparse.lexer.StringLiterals', kind: "aliasdeclaration", path: './dparse/lexer/StringLiterals.html', attributes: []},
{name: 'dparse.lexer.tok', kind: "aliasdeclaration", path: './dparse/lexer/tok.html', attributes: []},
{name: 'dparse.lexer.Token', kind: "aliasdeclaration", path: './dparse/lexer/Token.html', attributes: []},
{name: 'dparse.lexer.TokenTriviaFields', kind: "templatedeclaration", path: './dparse/lexer/TokenTriviaFields.html', attributes: []},
{name: 'dparse.lexer.TokenTriviaFields.comment', kind: "functiondeclaration", path: './dparse/lexer/TokenTriviaFields.comment.html', attributes: ["const", "pure", "nothrow", "property", "safe"]},
{name: 'dparse.lexer.TokenTriviaFields.leadingTrivia', kind: "variabledeclaration", path: './dparse/lexer/TokenTriviaFields.leadingTrivia.html', attributes: []},
{name: 'dparse.lexer.TokenTriviaFields.memoizedLeadingComment', kind: "variabledeclaration", path: './dparse/lexer/TokenTriviaFields.memoizedLeadingComment.html', attributes: []},
{name: 'dparse.lexer.TokenTriviaFields.memoizedTrailingComment', kind: "variabledeclaration", path: './dparse/lexer/TokenTriviaFields.memoizedTrailingComment.html', attributes: []},
{name: 'dparse.lexer.TokenTriviaFields.opCmp', kind: "functiondeclaration", path: './dparse/lexer/TokenTriviaFields.opCmp.html', attributes: ["const", "pure", "nothrow", "nogc", "safe"]},
{name: 'dparse.lexer.TokenTriviaFields.trailingComment', kind: "functiondeclaration", path: './dparse/lexer/TokenTriviaFields.trailingComment.html', attributes: ["const", "pure", "nothrow", "property", "safe"]},
{name: 'dparse.lexer.TokenTriviaFields.trailingTrivia', kind: "variabledeclaration", path: './dparse/lexer/TokenTriviaFields.trailingTrivia.html', attributes: []},
{name: 'dparse.lexer.TriviaToken', kind: "aliasdeclaration", path: './dparse/lexer/TriviaToken.html', attributes: []},
{name: 'dparse.lexer.WhitespaceBehavior', kind: "enumdeclaration", path: './dparse/lexer/WhitespaceBehavior.html', attributes: []},
{name: 'dparse.lexer.WhitespaceBehavior.include', kind: "enummemberdeclaration", path: './dparse/lexer/WhitespaceBehavior.html#include', attributes: []},
{name: 'dparse.lexer.WhitespaceBehavior.skip', kind: "enummemberdeclaration", path: './dparse/lexer/WhitespaceBehavior.html#skip', attributes: []},
{name: 'dparse.parser', kind: "module", path: './dparse/parser.html', attributes: []},
{name: 'dparse.parser.MessageDelegate', kind: "aliasdeclaration", path: './dparse/parser/MessageDelegate.html', attributes: []},
{name: 'dparse.parser.MessageFunction', kind: "aliasdeclaration", path: './dparse/parser/MessageFunction.html', attributes: []},
{name: 'dparse.parser.parseModule', kind: "functiondeclaration", path: './dparse/parser/parseModule.html', attributes: []},
{name: 'dparse.parser.Parser', kind: "classdeclaration", path: './dparse/parser/Parser.html', attributes: []},
{name: 'dparse.parser.Parser.allocator', kind: "variabledeclaration", path: './dparse/parser/Parser.allocator.html', attributes: []},
{name: 'dparse.parser.Parser.errorCount', kind: "variabledeclaration", path: './dparse/parser/Parser.errorCount.html', attributes: []},
{name: 'dparse.parser.Parser.fileName', kind: "variabledeclaration", path: './dparse/parser/Parser.fileName.html', attributes: []},
{name: 'dparse.parser.Parser.messageDelegate', kind: "variabledeclaration", path: './dparse/parser/Parser.messageDelegate.html', attributes: []},
{name: 'dparse.parser.Parser.messageDg', kind: "aliasdeclaration", path: './dparse/parser/Parser.messageDg.html', attributes: ["deprecated"]},
{name: 'dparse.parser.Parser.messageFunction', kind: "variabledeclaration", path: './dparse/parser/Parser.messageFunction.html', attributes: []},
{name: 'dparse.parser.Parser.moreTokens', kind: "functiondeclaration", path: './dparse/parser/Parser.moreTokens.html', attributes: ["pure", "nothrow", "nogc", "safe", "const"]},
{name: 'dparse.parser.Parser.parseAddExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAddExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseAliasAssign', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAliasAssign.html', attributes: []},
{name: 'dparse.parser.Parser.parseAliasDeclaration', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAliasDeclaration.html', attributes: []},
{name: 'dparse.parser.Parser.parseAliasInitializer', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAliasInitializer.html', attributes: []},
{name: 'dparse.parser.Parser.parseAliasThisDeclaration', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAliasThisDeclaration.html', attributes: []},
{name: 'dparse.parser.Parser.parseAlignAttribute', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAlignAttribute.html', attributes: []},
{name: 'dparse.parser.Parser.parseAndAndExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAndAndExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseAndExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAndExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseAnonymousEnumDeclaration', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAnonymousEnumDeclaration.html', attributes: []},
{name: 'dparse.parser.Parser.parseAnonymousEnumMember', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAnonymousEnumMember.html', attributes: []},
{name: 'dparse.parser.Parser.parseArgumentList', kind: "functiondeclaration", path: './dparse/parser/Parser.parseArgumentList.html', attributes: []},
{name: 'dparse.parser.Parser.parseArguments', kind: "functiondeclaration", path: './dparse/parser/Parser.parseArguments.html', attributes: []},
{name: 'dparse.parser.Parser.parseArrayInitializer', kind: "functiondeclaration", path: './dparse/parser/Parser.parseArrayInitializer.html', attributes: []},
{name: 'dparse.parser.Parser.parseArrayLiteral', kind: "functiondeclaration", path: './dparse/parser/Parser.parseArrayLiteral.html', attributes: []},
{name: 'dparse.parser.Parser.parseArrayMemberInitialization', kind: "functiondeclaration", path: './dparse/parser/Parser.parseArrayMemberInitialization.html', attributes: []},
{name: 'dparse.parser.Parser.parseAsmAddExp', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAsmAddExp.html', attributes: []},
{name: 'dparse.parser.Parser.parseAsmAndExp', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAsmAndExp.html', attributes: []},
{name: 'dparse.parser.Parser.parseAsmBrExp', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAsmBrExp.html', attributes: []},
{name: 'dparse.parser.Parser.parseAsmEqualExp', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAsmEqualExp.html', attributes: []},
{name: 'dparse.parser.Parser.parseAsmExp', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAsmExp.html', attributes: []},
{name: 'dparse.parser.Parser.parseAsmInstruction', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAsmInstruction.html', attributes: []},
{name: 'dparse.parser.Parser.parseAsmLogAndExp', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAsmLogAndExp.html', attributes: []},
{name: 'dparse.parser.Parser.parseAsmLogOrExp', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAsmLogOrExp.html', attributes: []},
{name: 'dparse.parser.Parser.parseAsmMulExp', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAsmMulExp.html', attributes: []},
{name: 'dparse.parser.Parser.parseAsmOrExp', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAsmOrExp.html', attributes: []},
{name: 'dparse.parser.Parser.parseAsmPrimaryExp', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAsmPrimaryExp.html', attributes: []},
{name: 'dparse.parser.Parser.parseAsmRelExp', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAsmRelExp.html', attributes: []},
{name: 'dparse.parser.Parser.parseAsmShiftExp', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAsmShiftExp.html', attributes: []},
{name: 'dparse.parser.Parser.parseAsmStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAsmStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseAsmTypePrefix', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAsmTypePrefix.html', attributes: []},
{name: 'dparse.parser.Parser.parseAsmUnaExp', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAsmUnaExp.html', attributes: []},
{name: 'dparse.parser.Parser.parseAsmXorExp', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAsmXorExp.html', attributes: []},
{name: 'dparse.parser.Parser.parseAssertArguments', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAssertArguments.html', attributes: []},
{name: 'dparse.parser.Parser.parseAssertExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAssertExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseAssignExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAssignExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseAssocArrayLiteral', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAssocArrayLiteral.html', attributes: []},
{name: 'dparse.parser.Parser.parseAtAttribute', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAtAttribute.html', attributes: []},
{name: 'dparse.parser.Parser.parseAttribute', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAttribute.html', attributes: []},
{name: 'dparse.parser.Parser.parseAttributeDeclaration', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAttributeDeclaration.html', attributes: []},
{name: 'dparse.parser.Parser.parseAutoDeclaration', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAutoDeclaration.html', attributes: []},
{name: 'dparse.parser.Parser.parseAutoDeclarationPart', kind: "functiondeclaration", path: './dparse/parser/Parser.parseAutoDeclarationPart.html', attributes: []},
{name: 'dparse.parser.Parser.parseBaseClass', kind: "functiondeclaration", path: './dparse/parser/Parser.parseBaseClass.html', attributes: []},
{name: 'dparse.parser.Parser.parseBaseClassList', kind: "functiondeclaration", path: './dparse/parser/Parser.parseBaseClassList.html', attributes: []},
{name: 'dparse.parser.Parser.parseBitfieldWidth', kind: "functiondeclaration", path: './dparse/parser/Parser.parseBitfieldWidth.html', attributes: []},
{name: 'dparse.parser.Parser.parseBlockStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseBlockStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseBreakStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseBreakStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseBuiltinType', kind: "functiondeclaration", path: './dparse/parser/Parser.parseBuiltinType.html', attributes: []},
{name: 'dparse.parser.Parser.parseCaseRangeStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseCaseRangeStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseCaseStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseCaseStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseCastExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseCastExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseCastQualifier', kind: "functiondeclaration", path: './dparse/parser/Parser.parseCastQualifier.html', attributes: []},
{name: 'dparse.parser.Parser.parseCatch', kind: "functiondeclaration", path: './dparse/parser/Parser.parseCatch.html', attributes: []},
{name: 'dparse.parser.Parser.parseCatches', kind: "functiondeclaration", path: './dparse/parser/Parser.parseCatches.html', attributes: []},
{name: 'dparse.parser.Parser.parseClassDeclaration', kind: "functiondeclaration", path: './dparse/parser/Parser.parseClassDeclaration.html', attributes: []},
{name: 'dparse.parser.Parser.parseCmpExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseCmpExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseCompileCondition', kind: "functiondeclaration", path: './dparse/parser/Parser.parseCompileCondition.html', attributes: []},
{name: 'dparse.parser.Parser.parseConditionalDeclaration', kind: "functiondeclaration", path: './dparse/parser/Parser.parseConditionalDeclaration.html', attributes: []},
{name: 'dparse.parser.Parser.parseConditionalStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseConditionalStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseConstraint', kind: "functiondeclaration", path: './dparse/parser/Parser.parseConstraint.html', attributes: []},
{name: 'dparse.parser.Parser.parseConstructor', kind: "functiondeclaration", path: './dparse/parser/Parser.parseConstructor.html', attributes: []},
{name: 'dparse.parser.Parser.parseContinueStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseContinueStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseDebugCondition', kind: "functiondeclaration", path: './dparse/parser/Parser.parseDebugCondition.html', attributes: []},
{name: 'dparse.parser.Parser.parseDebugSpecification', kind: "functiondeclaration", path: './dparse/parser/Parser.parseDebugSpecification.html', attributes: []},
{name: 'dparse.parser.Parser.parseDeclaration', kind: "functiondeclaration", path: './dparse/parser/Parser.parseDeclaration.html', attributes: []},
{name: 'dparse.parser.Parser.parseDeclarationOrStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseDeclarationOrStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseDeclarationsAndStatements', kind: "functiondeclaration", path: './dparse/parser/Parser.parseDeclarationsAndStatements.html', attributes: []},
{name: 'dparse.parser.Parser.parseDeclarator', kind: "functiondeclaration", path: './dparse/parser/Parser.parseDeclarator.html', attributes: []},
{name: 'dparse.parser.Parser.parseDeclaratorIdentifierList', kind: "functiondeclaration", path: './dparse/parser/Parser.parseDeclaratorIdentifierList.html', attributes: []},
{name: 'dparse.parser.Parser.parseDefaultStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseDefaultStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseDeleteExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseDeleteExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseDeprecated', kind: "functiondeclaration", path: './dparse/parser/Parser.parseDeprecated.html', attributes: []},
{name: 'dparse.parser.Parser.parseDestructor', kind: "functiondeclaration", path: './dparse/parser/Parser.parseDestructor.html', attributes: []},
{name: 'dparse.parser.Parser.parseDoStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseDoStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseEnumBody', kind: "functiondeclaration", path: './dparse/parser/Parser.parseEnumBody.html', attributes: []},
{name: 'dparse.parser.Parser.parseEnumDeclaration', kind: "functiondeclaration", path: './dparse/parser/Parser.parseEnumDeclaration.html', attributes: []},
{name: 'dparse.parser.Parser.parseEnumMember', kind: "functiondeclaration", path: './dparse/parser/Parser.parseEnumMember.html', attributes: []},
{name: 'dparse.parser.Parser.parseEnumMemberAttribute', kind: "functiondeclaration", path: './dparse/parser/Parser.parseEnumMemberAttribute.html', attributes: []},
{name: 'dparse.parser.Parser.parseEponymousTemplateDeclaration', kind: "functiondeclaration", path: './dparse/parser/Parser.parseEponymousTemplateDeclaration.html', attributes: []},
{name: 'dparse.parser.Parser.parseEqualExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseEqualExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseExpressionStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseExpressionStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseFinally', kind: "functiondeclaration", path: './dparse/parser/Parser.parseFinally.html', attributes: []},
{name: 'dparse.parser.Parser.parseFinalSwitchStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseFinalSwitchStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseForeach', kind: "functiondeclaration", path: './dparse/parser/Parser.parseForeach.html', attributes: []},
{name: 'dparse.parser.Parser.parseForeachStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseForeachStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseForeachType', kind: "functiondeclaration", path: './dparse/parser/Parser.parseForeachType.html', attributes: []},
{name: 'dparse.parser.Parser.parseForeachTypeList', kind: "functiondeclaration", path: './dparse/parser/Parser.parseForeachTypeList.html', attributes: []},
{name: 'dparse.parser.Parser.parseForStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseForStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseFunctionAttribute', kind: "functiondeclaration", path: './dparse/parser/Parser.parseFunctionAttribute.html', attributes: []},
{name: 'dparse.parser.Parser.parseFunctionBody', kind: "functiondeclaration", path: './dparse/parser/Parser.parseFunctionBody.html', attributes: []},
{name: 'dparse.parser.Parser.parseFunctionCallExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseFunctionCallExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseFunctionContract', kind: "functiondeclaration", path: './dparse/parser/Parser.parseFunctionContract.html', attributes: []},
{name: 'dparse.parser.Parser.parseFunctionDeclaration', kind: "functiondeclaration", path: './dparse/parser/Parser.parseFunctionDeclaration.html', attributes: []},
{name: 'dparse.parser.Parser.parseFunctionLiteralExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseFunctionLiteralExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseGccAsmInstruction', kind: "functiondeclaration", path: './dparse/parser/Parser.parseGccAsmInstruction.html', attributes: []},
{name: 'dparse.parser.Parser.parseGccAsmOperand', kind: "functiondeclaration", path: './dparse/parser/Parser.parseGccAsmOperand.html', attributes: []},
{name: 'dparse.parser.Parser.parseGccAsmOperandList', kind: "functiondeclaration", path: './dparse/parser/Parser.parseGccAsmOperandList.html', attributes: []},
{name: 'dparse.parser.Parser.parseGotoStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseGotoStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseIdentifierChain', kind: "functiondeclaration", path: './dparse/parser/Parser.parseIdentifierChain.html', attributes: []},
{name: 'dparse.parser.Parser.parseIdentifierOrTemplateChain', kind: "functiondeclaration", path: './dparse/parser/Parser.parseIdentifierOrTemplateChain.html', attributes: []},
{name: 'dparse.parser.Parser.parseIdentifierOrTemplateInstance', kind: "functiondeclaration", path: './dparse/parser/Parser.parseIdentifierOrTemplateInstance.html', attributes: []},
{name: 'dparse.parser.Parser.parseIdentityExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseIdentityExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseIfCondition', kind: "functiondeclaration", path: './dparse/parser/Parser.parseIfCondition.html', attributes: []},
{name: 'dparse.parser.Parser.parseIfStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseIfStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseImportBind', kind: "functiondeclaration", path: './dparse/parser/Parser.parseImportBind.html', attributes: []},
{name: 'dparse.parser.Parser.parseImportBindings', kind: "functiondeclaration", path: './dparse/parser/Parser.parseImportBindings.html', attributes: []},
{name: 'dparse.parser.Parser.parseImportDeclaration', kind: "functiondeclaration", path: './dparse/parser/Parser.parseImportDeclaration.html', attributes: []},
{name: 'dparse.parser.Parser.parseImportExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseImportExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseInContractExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseInContractExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseIndex', kind: "functiondeclaration", path: './dparse/parser/Parser.parseIndex.html', attributes: []},
{name: 'dparse.parser.Parser.parseIndexExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseIndexExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseInExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseInExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseInitializer', kind: "functiondeclaration", path: './dparse/parser/Parser.parseInitializer.html', attributes: []},
{name: 'dparse.parser.Parser.parseInOutContractExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseInOutContractExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseInOutStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseInOutStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseInStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseInStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseInterfaceDeclaration', kind: "functiondeclaration", path: './dparse/parser/Parser.parseInterfaceDeclaration.html', attributes: []},
{name: 'dparse.parser.Parser.parseInvariant', kind: "functiondeclaration", path: './dparse/parser/Parser.parseInvariant.html', attributes: []},
{name: 'dparse.parser.Parser.parseIsExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseIsExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseKeyValuePair', kind: "functiondeclaration", path: './dparse/parser/Parser.parseKeyValuePair.html', attributes: []},
{name: 'dparse.parser.Parser.parseKeyValuePairs', kind: "functiondeclaration", path: './dparse/parser/Parser.parseKeyValuePairs.html', attributes: []},
{name: 'dparse.parser.Parser.parseLabeledStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseLabeledStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseLastCatch', kind: "functiondeclaration", path: './dparse/parser/Parser.parseLastCatch.html', attributes: []},
{name: 'dparse.parser.Parser.parseLinkageAttribute', kind: "functiondeclaration", path: './dparse/parser/Parser.parseLinkageAttribute.html', attributes: []},
{name: 'dparse.parser.Parser.parseMemberFunctionAttribute', kind: "functiondeclaration", path: './dparse/parser/Parser.parseMemberFunctionAttribute.html', attributes: []},
{name: 'dparse.parser.Parser.parseMissingFunctionBody', kind: "functiondeclaration", path: './dparse/parser/Parser.parseMissingFunctionBody.html', attributes: []},
{name: 'dparse.parser.Parser.parseMixinDeclaration', kind: "functiondeclaration", path: './dparse/parser/Parser.parseMixinDeclaration.html', attributes: []},
{name: 'dparse.parser.Parser.parseMixinExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseMixinExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseMixinTemplateDeclaration', kind: "functiondeclaration", path: './dparse/parser/Parser.parseMixinTemplateDeclaration.html', attributes: []},
{name: 'dparse.parser.Parser.parseMixinTemplateName', kind: "functiondeclaration", path: './dparse/parser/Parser.parseMixinTemplateName.html', attributes: []},
{name: 'dparse.parser.Parser.parseModule', kind: "functiondeclaration", path: './dparse/parser/Parser.parseModule.html', attributes: []},
{name: 'dparse.parser.Parser.parseModuleDeclaration', kind: "functiondeclaration", path: './dparse/parser/Parser.parseModuleDeclaration.html', attributes: []},
{name: 'dparse.parser.Parser.parseMulExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseMulExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseNamedArgument', kind: "functiondeclaration", path: './dparse/parser/Parser.parseNamedArgument.html', attributes: []},
{name: 'dparse.parser.Parser.parseNamedArgumentList', kind: "functiondeclaration", path: './dparse/parser/Parser.parseNamedArgumentList.html', attributes: []},
{name: 'dparse.parser.Parser.parseNamedTemplateArgument', kind: "functiondeclaration", path: './dparse/parser/Parser.parseNamedTemplateArgument.html', attributes: []},
{name: 'dparse.parser.Parser.parseNamedTemplateArgumentList', kind: "functiondeclaration", path: './dparse/parser/Parser.parseNamedTemplateArgumentList.html', attributes: []},
{name: 'dparse.parser.Parser.parseNamespaceList', kind: "functiondeclaration", path: './dparse/parser/Parser.parseNamespaceList.html', attributes: []},
{name: 'dparse.parser.Parser.parseNewAnonClassExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseNewAnonClassExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseNewExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseNewExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseNonVoidInitializer', kind: "functiondeclaration", path: './dparse/parser/Parser.parseNonVoidInitializer.html', attributes: []},
{name: 'dparse.parser.Parser.parseOperands', kind: "functiondeclaration", path: './dparse/parser/Parser.parseOperands.html', attributes: []},
{name: 'dparse.parser.Parser.parseOrExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseOrExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseOrOrExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseOrOrExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseOutContractExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseOutContractExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseOutStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseOutStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseParameter', kind: "functiondeclaration", path: './dparse/parser/Parser.parseParameter.html', attributes: []},
{name: 'dparse.parser.Parser.parseParameterAttribute', kind: "functiondeclaration", path: './dparse/parser/Parser.parseParameterAttribute.html', attributes: []},
{name: 'dparse.parser.Parser.parseParameters', kind: "functiondeclaration", path: './dparse/parser/Parser.parseParameters.html', attributes: []},
{name: 'dparse.parser.Parser.parsePostblit', kind: "functiondeclaration", path: './dparse/parser/Parser.parsePostblit.html', attributes: []},
{name: 'dparse.parser.Parser.parsePowExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parsePowExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parsePragmaDeclaration', kind: "functiondeclaration", path: './dparse/parser/Parser.parsePragmaDeclaration.html', attributes: []},
{name: 'dparse.parser.Parser.parsePragmaExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parsePragmaExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parsePragmaStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parsePragmaStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parsePrimaryExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parsePrimaryExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseRegister', kind: "functiondeclaration", path: './dparse/parser/Parser.parseRegister.html', attributes: []},
{name: 'dparse.parser.Parser.parseRelExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseRelExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseReturnStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseReturnStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseScopeGuardStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseScopeGuardStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseSharedStaticConstructor', kind: "functiondeclaration", path: './dparse/parser/Parser.parseSharedStaticConstructor.html', attributes: []},
{name: 'dparse.parser.Parser.parseSharedStaticDestructor', kind: "functiondeclaration", path: './dparse/parser/Parser.parseSharedStaticDestructor.html', attributes: []},
{name: 'dparse.parser.Parser.parseShiftExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseShiftExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseShortenedFunctionBody', kind: "functiondeclaration", path: './dparse/parser/Parser.parseShortenedFunctionBody.html', attributes: []},
{name: 'dparse.parser.Parser.parseSingleImport', kind: "functiondeclaration", path: './dparse/parser/Parser.parseSingleImport.html', attributes: []},
{name: 'dparse.parser.Parser.parseSpecifiedFunctionBody', kind: "functiondeclaration", path: './dparse/parser/Parser.parseSpecifiedFunctionBody.html', attributes: []},
{name: 'dparse.parser.Parser.parseStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseStatementNoCaseNoDefault', kind: "functiondeclaration", path: './dparse/parser/Parser.parseStatementNoCaseNoDefault.html', attributes: []},
{name: 'dparse.parser.Parser.parseStaticAssertDeclaration', kind: "functiondeclaration", path: './dparse/parser/Parser.parseStaticAssertDeclaration.html', attributes: []},
{name: 'dparse.parser.Parser.parseStaticAssertStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseStaticAssertStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseStaticConstructor', kind: "functiondeclaration", path: './dparse/parser/Parser.parseStaticConstructor.html', attributes: []},
{name: 'dparse.parser.Parser.parseStaticDestructor', kind: "functiondeclaration", path: './dparse/parser/Parser.parseStaticDestructor.html', attributes: []},
{name: 'dparse.parser.Parser.parseStaticForeachDeclaration', kind: "functiondeclaration", path: './dparse/parser/Parser.parseStaticForeachDeclaration.html', attributes: []},
{name: 'dparse.parser.Parser.parseStaticForeachStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseStaticForeachStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseStaticIfCondition', kind: "functiondeclaration", path: './dparse/parser/Parser.parseStaticIfCondition.html', attributes: []},
{name: 'dparse.parser.Parser.parseStorageClass', kind: "functiondeclaration", path: './dparse/parser/Parser.parseStorageClass.html', attributes: []},
{name: 'dparse.parser.Parser.parseStructBody', kind: "functiondeclaration", path: './dparse/parser/Parser.parseStructBody.html', attributes: []},
{name: 'dparse.parser.Parser.parseStructDeclaration', kind: "functiondeclaration", path: './dparse/parser/Parser.parseStructDeclaration.html', attributes: []},
{name: 'dparse.parser.Parser.parseStructInitializer', kind: "functiondeclaration", path: './dparse/parser/Parser.parseStructInitializer.html', attributes: []},
{name: 'dparse.parser.Parser.parseStructMemberInitializer', kind: "functiondeclaration", path: './dparse/parser/Parser.parseStructMemberInitializer.html', attributes: []},
{name: 'dparse.parser.Parser.parseStructMemberInitializers', kind: "functiondeclaration", path: './dparse/parser/Parser.parseStructMemberInitializers.html', attributes: []},
{name: 'dparse.parser.Parser.parseSwitchStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseSwitchStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseSymbol', kind: "functiondeclaration", path: './dparse/parser/Parser.parseSymbol.html', attributes: []},
{name: 'dparse.parser.Parser.parseSynchronizedStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseSynchronizedStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseTemplateAliasParameter', kind: "functiondeclaration", path: './dparse/parser/Parser.parseTemplateAliasParameter.html', attributes: []},
{name: 'dparse.parser.Parser.parseTemplateArgument', kind: "functiondeclaration", path: './dparse/parser/Parser.parseTemplateArgument.html', attributes: []},
{name: 'dparse.parser.Parser.parseTemplateArgumentList', kind: "functiondeclaration", path: './dparse/parser/Parser.parseTemplateArgumentList.html', attributes: []},
{name: 'dparse.parser.Parser.parseTemplateArguments', kind: "functiondeclaration", path: './dparse/parser/Parser.parseTemplateArguments.html', attributes: []},
{name: 'dparse.parser.Parser.parseTemplateDeclaration', kind: "functiondeclaration", path: './dparse/parser/Parser.parseTemplateDeclaration.html', attributes: []},
{name: 'dparse.parser.Parser.parseTemplateInstance', kind: "functiondeclaration", path: './dparse/parser/Parser.parseTemplateInstance.html', attributes: []},
{name: 'dparse.parser.Parser.parseTemplateMixinExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseTemplateMixinExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseTemplateParameter', kind: "functiondeclaration", path: './dparse/parser/Parser.parseTemplateParameter.html', attributes: []},
{name: 'dparse.parser.Parser.parseTemplateParameterList', kind: "functiondeclaration", path: './dparse/parser/Parser.parseTemplateParameterList.html', attributes: []},
{name: 'dparse.parser.Parser.parseTemplateParameters', kind: "functiondeclaration", path: './dparse/parser/Parser.parseTemplateParameters.html', attributes: []},
{name: 'dparse.parser.Parser.parseTemplateSingleArgument', kind: "functiondeclaration", path: './dparse/parser/Parser.parseTemplateSingleArgument.html', attributes: []},
{name: 'dparse.parser.Parser.parseTemplateThisParameter', kind: "functiondeclaration", path: './dparse/parser/Parser.parseTemplateThisParameter.html', attributes: []},
{name: 'dparse.parser.Parser.parseTemplateTupleParameter', kind: "functiondeclaration", path: './dparse/parser/Parser.parseTemplateTupleParameter.html', attributes: []},
{name: 'dparse.parser.Parser.parseTemplateTypeParameter', kind: "functiondeclaration", path: './dparse/parser/Parser.parseTemplateTypeParameter.html', attributes: []},
{name: 'dparse.parser.Parser.parseTemplateValueParameter', kind: "functiondeclaration", path: './dparse/parser/Parser.parseTemplateValueParameter.html', attributes: []},
{name: 'dparse.parser.Parser.parseTemplateValueParameterDefault', kind: "functiondeclaration", path: './dparse/parser/Parser.parseTemplateValueParameterDefault.html', attributes: []},
{name: 'dparse.parser.Parser.parseTernaryExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseTernaryExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseThrowExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseThrowExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseTraitsExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseTraitsExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseTryStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseTryStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseType', kind: "functiondeclaration", path: './dparse/parser/Parser.parseType.html', attributes: []},
{name: 'dparse.parser.Parser.parseType2', kind: "functiondeclaration", path: './dparse/parser/Parser.parseType2.html', attributes: []},
{name: 'dparse.parser.Parser.parseTypeConstructor', kind: "functiondeclaration", path: './dparse/parser/Parser.parseTypeConstructor.html', attributes: []},
{name: 'dparse.parser.Parser.parseTypeConstructors', kind: "functiondeclaration", path: './dparse/parser/Parser.parseTypeConstructors.html', attributes: []},
{name: 'dparse.parser.Parser.parseTypeIdentifierPart', kind: "functiondeclaration", path: './dparse/parser/Parser.parseTypeIdentifierPart.html', attributes: []},
{name: 'dparse.parser.Parser.parseTypeidExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseTypeidExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseTypeofExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseTypeofExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseTypeSpecialization', kind: "functiondeclaration", path: './dparse/parser/Parser.parseTypeSpecialization.html', attributes: []},
{name: 'dparse.parser.Parser.parseTypeSuffix', kind: "functiondeclaration", path: './dparse/parser/Parser.parseTypeSuffix.html', attributes: []},
{name: 'dparse.parser.Parser.parseUnaryExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseUnaryExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseUnionDeclaration', kind: "functiondeclaration", path: './dparse/parser/Parser.parseUnionDeclaration.html', attributes: []},
{name: 'dparse.parser.Parser.parseUnittest', kind: "functiondeclaration", path: './dparse/parser/Parser.parseUnittest.html', attributes: []},
{name: 'dparse.parser.Parser.parseVariableDeclaration', kind: "functiondeclaration", path: './dparse/parser/Parser.parseVariableDeclaration.html', attributes: []},
{name: 'dparse.parser.Parser.parseVariadicArgumentsAttribute', kind: "functiondeclaration", path: './dparse/parser/Parser.parseVariadicArgumentsAttribute.html', attributes: []},
{name: 'dparse.parser.Parser.parseVariadicArgumentsAttributes', kind: "functiondeclaration", path: './dparse/parser/Parser.parseVariadicArgumentsAttributes.html', attributes: []},
{name: 'dparse.parser.Parser.parseVector', kind: "functiondeclaration", path: './dparse/parser/Parser.parseVector.html', attributes: []},
{name: 'dparse.parser.Parser.parseVersionCondition', kind: "functiondeclaration", path: './dparse/parser/Parser.parseVersionCondition.html', attributes: []},
{name: 'dparse.parser.Parser.parseVersionSpecification', kind: "functiondeclaration", path: './dparse/parser/Parser.parseVersionSpecification.html', attributes: []},
{name: 'dparse.parser.Parser.parseWhileStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseWhileStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseWithStatement', kind: "functiondeclaration", path: './dparse/parser/Parser.parseWithStatement.html', attributes: []},
{name: 'dparse.parser.Parser.parseXorExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseXorExpression.html', attributes: []},
{name: 'dparse.parser.Parser.setTokens', kind: "functiondeclaration", path: './dparse/parser/Parser.setTokens.html', attributes: []},
{name: 'dparse.parser.Parser.tokens', kind: "variabledeclaration", path: './dparse/parser/Parser.tokens.html', attributes: []},
{name: 'dparse.parser.Parser.warningCount', kind: "variabledeclaration", path: './dparse/parser/Parser.warningCount.html', attributes: []},
{name: 'dparse.parser.Parser._traceDepth', kind: "variabledeclaration", path: './dparse/parser/Parser._traceDepth.html', attributes: []},
{name: 'dparse.parser.Parser.abandonBookmark', kind: "functiondeclaration", path: './dparse/parser/Parser.abandonBookmark.html', attributes: ["final", "pure", "nothrow", "nogc", "safe"]},
{name: 'dparse.parser.Parser.advance', kind: "functiondeclaration", path: './dparse/parser/Parser.advance.html', attributes: ["final", "pure", "nothrow", "nogc", "safe"]},
{name: 'dparse.parser.Parser.attachComment', kind: "functiondeclaration", path: './dparse/parser/Parser.attachComment.html', attributes: []},
{name: 'dparse.parser.Parser.attachCommentFromSemicolon', kind: "functiondeclaration", path: './dparse/parser/Parser.attachCommentFromSemicolon.html', attributes: []},
{name: 'dparse.parser.Parser.Bookmark', kind: "aliasdeclaration", path: './dparse/parser/Parser.Bookmark.html', attributes: []},
{name: 'dparse.parser.Parser.cachedAAChecks', kind: "variabledeclaration", path: './dparse/parser/Parser.cachedAAChecks.html', attributes: []},
{name: 'dparse.parser.Parser.cachedTypeChecks', kind: "variabledeclaration", path: './dparse/parser/Parser.cachedTypeChecks.html', attributes: []},
{name: 'dparse.parser.Parser.comment', kind: "variabledeclaration", path: './dparse/parser/Parser.comment.html', attributes: []},
{name: 'dparse.parser.Parser.current', kind: "functiondeclaration", path: './dparse/parser/Parser.current.html', attributes: ["final", "pure", "nothrow", "property", "nogc", "safe", "const"]},
{name: 'dparse.parser.Parser.currentIs', kind: "functiondeclaration", path: './dparse/parser/Parser.currentIs.html', attributes: ["final", "pure", "nothrow", "nogc", "safe", "const"]},
{name: 'dparse.parser.Parser.currentIsMemberFunctionAttribute', kind: "functiondeclaration", path: './dparse/parser/Parser.currentIsMemberFunctionAttribute.html', attributes: ["final", "const"]},
{name: 'dparse.parser.Parser.currentIsOneOf', kind: "functiondeclaration", path: './dparse/parser/Parser.currentIsOneOf.html', attributes: ["final", "pure", "nothrow", "nogc", "safe", "const"]},
{name: 'dparse.parser.Parser.DecType', kind: "enumdeclaration", path: './dparse/parser/Parser.DecType.html', attributes: []},
{name: 'dparse.parser.Parser.DecType.autoFun', kind: "enummemberdeclaration", path: './dparse/parser/Parser.DecType.html#autoFun', attributes: []},
{name: 'dparse.parser.Parser.DecType.autoVar', kind: "enummemberdeclaration", path: './dparse/parser/Parser.DecType.html#autoVar', attributes: []},
{name: 'dparse.parser.Parser.DecType.other', kind: "enummemberdeclaration", path: './dparse/parser/Parser.DecType.html#other', attributes: []},
{name: 'dparse.parser.Parser.error', kind: "functiondeclaration", path: './dparse/parser/Parser.error.html', attributes: ["final"]},
{name: 'dparse.parser.Parser.expect', kind: "functiondeclaration", path: './dparse/parser/Parser.expect.html', attributes: ["final"]},
{name: 'dparse.parser.Parser.goToBookmark', kind: "functiondeclaration", path: './dparse/parser/Parser.goToBookmark.html', attributes: ["final", "pure", "nothrow", "nogc", "safe"]},
{name: 'dparse.parser.Parser.hasMagicDelimiter', kind: "functiondeclaration", path: './dparse/parser/Parser.hasMagicDelimiter.html', attributes: []},
{name: 'dparse.parser.Parser.index', kind: "variabledeclaration", path: './dparse/parser/Parser.index.html', attributes: []},
{name: 'dparse.parser.Parser.isAssociativeArrayLiteral', kind: "functiondeclaration", path: './dparse/parser/Parser.isAssociativeArrayLiteral.html', attributes: ["final"]},
{name: 'dparse.parser.Parser.isAttribute', kind: "functiondeclaration", path: './dparse/parser/Parser.isAttribute.html', attributes: ["final"]},
{name: 'dparse.parser.Parser.isAutoDeclaration', kind: "functiondeclaration", path: './dparse/parser/Parser.isAutoDeclaration.html', attributes: ["final", "nothrow", "safe"]},
{name: 'dparse.parser.Parser.isCastQualifier', kind: "functiondeclaration", path: './dparse/parser/Parser.isCastQualifier.html', attributes: ["final", "const"]},
{name: 'dparse.parser.Parser.isDeclaration', kind: "functiondeclaration", path: './dparse/parser/Parser.isDeclaration.html', attributes: ["final"]},
{name: 'dparse.parser.Parser.isMemberFunctionAttribute', kind: "functiondeclaration", path: './dparse/parser/Parser.isMemberFunctionAttribute.html', attributes: ["static", "final", "pure", "nothrow", "nogc", "safe"]},
{name: 'dparse.parser.Parser.isStorageClass', kind: "functiondeclaration", path: './dparse/parser/Parser.isStorageClass.html', attributes: ["final"]},
{name: 'dparse.parser.Parser.isType', kind: "functiondeclaration", path: './dparse/parser/Parser.isType.html', attributes: ["final"]},
{name: 'dparse.parser.Parser.isTypeCtor', kind: "functiondeclaration", path: './dparse/parser/Parser.isTypeCtor.html', attributes: ["static", "final", "pure", "nothrow", "nogc", "safe"]},
{name: 'dparse.parser.Parser.MAX_ERRORS', kind: "enummemberdeclaration", path: './dparse/parser/Parser.MAX_ERRORS.html', attributes: []},
{name: 'dparse.parser.Parser.moveStartIndexBefore', kind: "functiondeclaration", path: './dparse/parser/Parser.moveStartIndexBefore.html', attributes: ["final"]},
{name: 'dparse.parser.Parser.nullCheck', kind: "enummemberdeclaration", path: './dparse/parser/Parser.nullCheck.html', attributes: []},
{name: 'dparse.parser.Parser.ownArray', kind: "functiondeclaration", path: './dparse/parser/Parser.ownArray.html', attributes: []},
{name: 'dparse.parser.Parser.parseCommaSeparatedRule', kind: "functiondeclaration", path: './dparse/parser/Parser.parseCommaSeparatedRule.html', attributes: []},
{name: 'dparse.parser.Parser.parseInterfaceOrClass', kind: "functiondeclaration", path: './dparse/parser/Parser.parseInterfaceOrClass.html', attributes: []},
{name: 'dparse.parser.Parser.parseLeftAssocBinaryExpression', kind: "functiondeclaration", path: './dparse/parser/Parser.parseLeftAssocBinaryExpression.html', attributes: []},
{name: 'dparse.parser.Parser.parseNodeQ', kind: "enummemberdeclaration", path: './dparse/parser/Parser.parseNodeQ.html', attributes: []},
{name: 'dparse.parser.Parser.parseStaticCtorDtorCommon', kind: "functiondeclaration", path: './dparse/parser/Parser.parseStaticCtorDtorCommon.html', attributes: []},
{name: 'dparse.parser.Parser.peek', kind: "functiondeclaration", path: './dparse/parser/Parser.peek.html', attributes: ["final", "pure", "nothrow", "nogc", "safe", "const"]},
{name: 'dparse.parser.Parser.peekAre', kind: "functiondeclaration", path: './dparse/parser/Parser.peekAre.html', attributes: ["final", "pure", "nothrow", "nogc", "safe", "const"]},
{name: 'dparse.parser.Parser.peekIs', kind: "functiondeclaration", path: './dparse/parser/Parser.peekIs.html', attributes: ["final", "pure", "nothrow", "nogc", "safe", "const"]},
{name: 'dparse.parser.Parser.peekIsOneOf', kind: "functiondeclaration", path: './dparse/parser/Parser.peekIsOneOf.html', attributes: ["final", "pure", "nothrow", "nogc", "safe", "const"]},
{name: 'dparse.parser.Parser.peekNIs', kind: "functiondeclaration", path: './dparse/parser/Parser.peekNIs.html', attributes: ["final", "pure", "nothrow", "nogc", "safe", "const"]},
{name: 'dparse.parser.Parser.peekNIsOneOf', kind: "functiondeclaration", path: './dparse/parser/Parser.peekNIsOneOf.html', attributes: ["final", "pure", "nothrow", "nogc", "safe", "const"]},
{name: 'dparse.parser.Parser.peekPast', kind: "functiondeclaration", path: './dparse/parser/Parser.peekPast.html', attributes: ["const", "pure", "nothrow", "nogc", "safe"]},
{name: 'dparse.parser.Parser.peekPastBraces', kind: "functiondeclaration", path: './dparse/parser/Parser.peekPastBraces.html', attributes: ["final", "pure", "nothrow", "nogc", "safe", "const"]},
{name: 'dparse.parser.Parser.peekPastBrackets', kind: "functiondeclaration", path: './dparse/parser/Parser.peekPastBrackets.html', attributes: ["final", "pure", "nothrow", "nogc", "safe", "const"]},
{name: 'dparse.parser.Parser.peekPastParens', kind: "functiondeclaration", path: './dparse/parser/Parser.peekPastParens.html', attributes: ["final", "pure", "nothrow", "nogc", "safe", "const"]},
{name: 'dparse.parser.Parser.previous', kind: "functiondeclaration", path: './dparse/parser/Parser.previous.html', attributes: ["final", "pure", "nothrow", "property", "nogc", "safe", "const"]},
{name: 'dparse.parser.Parser.REGISTER_NAMES', kind: "variabledeclaration", path: './dparse/parser/Parser.REGISTER_NAMES.html', attributes: []},
{name: 'dparse.parser.Parser.setBookmark', kind: "functiondeclaration", path: './dparse/parser/Parser.setBookmark.html', attributes: ["final", "nothrow", "safe"]},
{name: 'dparse.parser.Parser.simpleParse', kind: "enummemberdeclaration", path: './dparse/parser/Parser.simpleParse.html', attributes: []},
{name: 'dparse.parser.Parser.simpleParseItem', kind: "enummemberdeclaration", path: './dparse/parser/Parser.simpleParseItem.html', attributes: []},
{name: 'dparse.parser.Parser.simpleParseItems', kind: "enummemberdeclaration", path: './dparse/parser/Parser.simpleParseItems.html', attributes: []},
{name: 'dparse.parser.Parser.skip', kind: "functiondeclaration", path: './dparse/parser/Parser.skip.html', attributes: ["final"]},
{name: 'dparse.parser.Parser.skipBraces', kind: "functiondeclaration", path: './dparse/parser/Parser.skipBraces.html', attributes: ["final", "pure", "nothrow", "nogc", "safe"]},
{name: 'dparse.parser.Parser.skipBrackets', kind: "functiondeclaration", path: './dparse/parser/Parser.skipBrackets.html', attributes: ["final", "pure", "nothrow", "nogc", "safe"]},
{name: 'dparse.parser.Parser.skipParens', kind: "functiondeclaration", path: './dparse/parser/Parser.skipParens.html', attributes: ["final", "pure", "nothrow", "nogc", "safe"]},
{name: 'dparse.parser.Parser.startsWith', kind: "functiondeclaration", path: './dparse/parser/Parser.startsWith.html', attributes: ["final", "pure", "nothrow", "nogc", "safe", "const"]},
{name: 'dparse.parser.Parser.suppressedErrorCount', kind: "functiondeclaration", path: './dparse/parser/Parser.suppressedErrorCount.html', attributes: ["final", "pure", "nothrow", "nogc", "safe", "const"]},
{name: 'dparse.parser.Parser.suppressMessages', kind: "variabledeclaration", path: './dparse/parser/Parser.suppressMessages.html', attributes: []},
{name: 'dparse.parser.Parser.tokenCheck', kind: "enummemberdeclaration", path: './dparse/parser/Parser.tokenCheck.html', attributes: []},
{name: 'dparse.parser.Parser.trace', kind: "functiondeclaration", path: './dparse/parser/Parser.trace.html', attributes: ["final"]},
{name: 'dparse.parser.Parser.traceEnterAndExit', kind: "enummemberdeclaration", path: './dparse/parser/Parser.traceEnterAndExit.html', attributes: []},
{name: 'dparse.parser.Parser.warn', kind: "functiondeclaration", path: './dparse/parser/Parser.warn.html', attributes: ["final"]},
{name: 'dparse.parser.ParserConfig', kind: "structdeclaration", path: './dparse/parser/ParserConfig.html', attributes: []},
{name: 'dparse.parser.ParserConfig.allocator', kind: "variabledeclaration", path: './dparse/parser/ParserConfig.allocator.html', attributes: []},
{name: 'dparse.parser.ParserConfig.errorCount', kind: "variabledeclaration", path: './dparse/parser/ParserConfig.errorCount.html', attributes: []},
{name: 'dparse.parser.ParserConfig.fileName', kind: "variabledeclaration", path: './dparse/parser/ParserConfig.fileName.html', attributes: []},
{name: 'dparse.parser.ParserConfig.messageDelegate', kind: "variabledeclaration", path: './dparse/parser/ParserConfig.messageDelegate.html', attributes: []},
{name: 'dparse.parser.ParserConfig.messageFunction', kind: "variabledeclaration", path: './dparse/parser/ParserConfig.messageFunction.html', attributes: []},
{name: 'dparse.parser.ParserConfig.tokens', kind: "variabledeclaration", path: './dparse/parser/ParserConfig.tokens.html', attributes: []},
{name: 'dparse.parser.ParserConfig.warningCount', kind: "variabledeclaration", path: './dparse/parser/ParserConfig.warningCount.html', attributes: []},
{name: 'dparse.rollback_allocator', kind: "module", path: './dparse/rollback_allocator.html', attributes: []},
{name: 'dparse.rollback_allocator.RollbackAllocator', kind: "structdeclaration", path: './dparse/rollback_allocator/RollbackAllocator.html', attributes: []},
{name: 'dparse.rollback_allocator.RollbackAllocator.allocate', kind: "functiondeclaration", path: './dparse/rollback_allocator/RollbackAllocator.allocate.html', attributes: []},
{name: 'dparse.rollback_allocator.RollbackAllocator.make', kind: "functiondeclaration", path: './dparse/rollback_allocator/RollbackAllocator.make.html', attributes: ["auto"]},
{name: 'dparse.rollback_allocator.RollbackAllocator.memoryAlignment', kind: "enummemberdeclaration", path: './dparse/rollback_allocator/RollbackAllocator.memoryAlignment.html', attributes: []},
{name: 'dparse.rollback_allocator.RollbackAllocator.rollback', kind: "functiondeclaration", path: './dparse/rollback_allocator/RollbackAllocator.rollback.html', attributes: []},
{name: 'dparse.rollback_allocator.RollbackAllocator.setCheckpoint', kind: "functiondeclaration", path: './dparse/rollback_allocator/RollbackAllocator.setCheckpoint.html', attributes: ["nothrow", "nogc", "const"]},
{name: 'dparse.stack_buffer', kind: "module", path: './dparse/stack_buffer.html', attributes: []},
{name: 'dparse.stack_buffer.StackBuffer', kind: "structdeclaration", path: './dparse/stack_buffer/StackBuffer.html', attributes: []},
{name: 'dparse.stack_buffer.StackBuffer.clear', kind: "functiondeclaration", path: './dparse/stack_buffer/StackBuffer.clear.html', attributes: []},
{name: 'dparse.stack_buffer.StackBuffer.length', kind: "functiondeclaration", path: './dparse/stack_buffer/StackBuffer.length.html', attributes: ["pure", "nothrow", "property", "nogc", "safe", "const"]},
{name: 'dparse.stack_buffer.StackBuffer.opDollar', kind: "aliasdeclaration", path: './dparse/stack_buffer/StackBuffer.opDollar.html', attributes: []},
{name: 'dparse.stack_buffer.StackBuffer.opSlice', kind: "functiondeclaration", path: './dparse/stack_buffer/StackBuffer.opSlice.html', attributes: ["pure", "nothrow", "nogc", "return", "scope", "safe", "inout"]},
{name: 'dparse.stack_buffer.StackBuffer.put', kind: "functiondeclaration", path: './dparse/stack_buffer/StackBuffer.put.html', attributes: []},
{name: 'dparse.strings', kind: "module", path: './dparse/strings.html', attributes: []},
{name: 'dparse.strings.InvalidEscapeAction', kind: "enumdeclaration", path: './dparse/strings/InvalidEscapeAction.html', attributes: []},
{name: 'dparse.strings.InvalidEscapeAction.error', kind: "enummemberdeclaration", path: './dparse/strings/InvalidEscapeAction.html#error', attributes: []},
{name: 'dparse.strings.InvalidEscapeAction.keep', kind: "enummemberdeclaration", path: './dparse/strings/InvalidEscapeAction.html#keep', attributes: []},
{name: 'dparse.strings.InvalidEscapeAction.skip', kind: "enummemberdeclaration", path: './dparse/strings/InvalidEscapeAction.html#skip', attributes: []},
{name: 'dparse.strings.isStringLiteral', kind: "functiondeclaration", path: './dparse/strings/isStringLiteral.html', attributes: []},
{name: 'dparse.strings.unescapeString', kind: "functiondeclaration", path: './dparse/strings/unescapeString.html', attributes: []},
{name: 'dparse.trivia', kind: "module", path: './dparse/trivia.html', attributes: []},
{name: 'dparse.trivia.CommentType', kind: "enumdeclaration", path: './dparse/trivia/CommentType.html', attributes: []},
{name: 'dparse.trivia.CommentType.docBlock', kind: "enummemberdeclaration", path: './dparse/trivia/CommentType.html#docBlock', attributes: []},
{name: 'dparse.trivia.CommentType.docLine', kind: "enummemberdeclaration", path: './dparse/trivia/CommentType.html#docLine', attributes: []},
{name: 'dparse.trivia.CommentType.none', kind: "enummemberdeclaration", path: './dparse/trivia/CommentType.html#none', attributes: []},
{name: 'dparse.trivia.CommentType.normalBlock', kind: "enummemberdeclaration", path: './dparse/trivia/CommentType.html#normalBlock', attributes: []},
{name: 'dparse.trivia.CommentType.normalLine', kind: "enummemberdeclaration", path: './dparse/trivia/CommentType.html#normalLine', attributes: []},
{name: 'dparse.trivia.determineCommentType', kind: "functiondeclaration", path: './dparse/trivia/determineCommentType.html', attributes: ["pure", "nothrow", "safe"]},
{name: 'dparse.trivia.extractDdocFromTrivia', kind: "functiondeclaration", path: './dparse/trivia/extractDdocFromTrivia.html', attributes: ["pure", "nothrow", "safe"]},
{name: 'dparse.trivia.extractLeadingDdoc', kind: "functiondeclaration", path: './dparse/trivia/extractLeadingDdoc.html', attributes: ["pure", "nothrow", "safe"]},
{name: 'dparse.trivia.extractTrailingDdoc', kind: "functiondeclaration", path: './dparse/trivia/extractTrailingDdoc.html', attributes: ["pure", "nothrow", "safe"]},
{name: 'dparse.trivia.isDocComment', kind: "functiondeclaration", path: './dparse/trivia/isDocComment.html', attributes: ["pure", "nothrow", "safe"]},
{name: 'dparse.trivia.unDecorateComment', kind: "functiondeclaration", path: './dparse/trivia/unDecorateComment.html', attributes: []},
{name: 'std.experimental.lexer', kind: "module", path: './std/experimental/lexer.html', attributes: []},
{name: 'std.experimental.lexer.Lexer', kind: "templatedeclaration", path: './std/experimental/lexer/Lexer.html', attributes: []},
{name: 'std.experimental.lexer.Lexer._front', kind: "variabledeclaration", path: './std/experimental/lexer/Lexer._front.html', attributes: []},
{name: 'std.experimental.lexer.Lexer._IDType', kind: "aliasdeclaration", path: './std/experimental/lexer/Lexer._IDType.html', attributes: []},
{name: 'std.experimental.lexer.Lexer._popFront', kind: "functiondeclaration", path: './std/experimental/lexer/Lexer._popFront.html', attributes: ["pure", "nothrow", "safe"]},
{name: 'std.experimental.lexer.Lexer._tok', kind: "enummemberdeclaration", path: './std/experimental/lexer/Lexer._tok.html', attributes: []},
{name: 'std.experimental.lexer.Lexer.advance', kind: "functiondeclaration", path: './std/experimental/lexer/Lexer.advance.html', attributes: ["pure", "nothrow", "trusted"]},
{name: 'std.experimental.lexer.Lexer.calcSplitCount', kind: "functiondeclaration", path: './std/experimental/lexer/Lexer.calcSplitCount.html', attributes: ["static", "pure", "nothrow"]},
{name: 'std.experimental.lexer.Lexer.empty', kind: "functiondeclaration", path: './std/experimental/lexer/Lexer.empty.html', attributes: ["const", "pure", "nothrow", "nogc", "property", "safe"]},
{name: 'std.experimental.lexer.Lexer.escape', kind: "functiondeclaration", path: './std/experimental/lexer/Lexer.escape.html', attributes: ["static", "pure", "trusted"]},
{name: 'std.experimental.lexer.Lexer.front', kind: "functiondeclaration", path: './std/experimental/lexer/Lexer.front.html', attributes: ["const", "pure", "nothrow", "property", "ref", "safe"]},
{name: 'std.experimental.lexer.Lexer.generateByteMask', kind: "functiondeclaration", path: './std/experimental/lexer/Lexer.generateByteMask.html', attributes: ["static"]},
{name: 'std.experimental.lexer.Lexer.generateMask', kind: "functiondeclaration", path: './std/experimental/lexer/Lexer.generateMask.html', attributes: ["static"]},
{name: 'std.experimental.lexer.Lexer.generateStatements', kind: "functiondeclaration", path: './std/experimental/lexer/Lexer.generateStatements.html', attributes: ["static"]},
{name: 'std.experimental.lexer.Lexer.generateStatementsStep', kind: "functiondeclaration", path: './std/experimental/lexer/Lexer.generateStatementsStep.html', attributes: ["static"]},
{name: 'std.experimental.lexer.Lexer.getBeginningChars', kind: "functiondeclaration", path: './std/experimental/lexer/Lexer.getBeginningChars.html', attributes: ["static"]},
{name: 'std.experimental.lexer.Lexer.getFront', kind: "functiondeclaration", path: './std/experimental/lexer/Lexer.getFront.html', attributes: ["static", "pure", "nothrow", "trusted"]},
{name: 'std.experimental.lexer.Lexer.printCase', kind: "functiondeclaration", path: './std/experimental/lexer/Lexer.printCase.html', attributes: ["static"]},
{name: 'std.experimental.lexer.Lexer.range', kind: "variabledeclaration", path: './std/experimental/lexer/Lexer.range.html', attributes: []},
{name: 'std.experimental.lexer.Lexer.tokenSearch', kind: "enummemberdeclaration", path: './std/experimental/lexer/Lexer.tokenSearch.html', attributes: []},
{name: 'std.experimental.lexer.LexerRange', kind: "structdeclaration", path: './std/experimental/lexer/LexerRange.html', attributes: []},
{name: 'std.experimental.lexer.LexerRange.bytes', kind: "variabledeclaration", path: './std/experimental/lexer/LexerRange.bytes.html', attributes: []},
{name: 'std.experimental.lexer.LexerRange.canPeek', kind: "functiondeclaration", path: './std/experimental/lexer/LexerRange.canPeek.html', attributes: ["const"]},
{name: 'std.experimental.lexer.LexerRange.column', kind: "variabledeclaration", path: './std/experimental/lexer/LexerRange.column.html', attributes: []},
{name: 'std.experimental.lexer.LexerRange.empty', kind: "functiondeclaration", path: './std/experimental/lexer/LexerRange.empty.html', attributes: ["const"]},
{name: 'std.experimental.lexer.LexerRange.front', kind: "functiondeclaration", path: './std/experimental/lexer/LexerRange.front.html', attributes: ["const"]},
{name: 'std.experimental.lexer.LexerRange.incrementLine', kind: "functiondeclaration", path: './std/experimental/lexer/LexerRange.incrementLine.html', attributes: []},
{name: 'std.experimental.lexer.LexerRange.index', kind: "variabledeclaration", path: './std/experimental/lexer/LexerRange.index.html', attributes: []},
{name: 'std.experimental.lexer.LexerRange.line', kind: "variabledeclaration", path: './std/experimental/lexer/LexerRange.line.html', attributes: []},
{name: 'std.experimental.lexer.LexerRange.mark', kind: "functiondeclaration", path: './std/experimental/lexer/LexerRange.mark.html', attributes: ["const"]},
{name: 'std.experimental.lexer.LexerRange.peek', kind: "functiondeclaration", path: './std/experimental/lexer/LexerRange.peek.html', attributes: ["pure", "nothrow", "nogc", "safe", "const"]},
{name: 'std.experimental.lexer.LexerRange.peekAt', kind: "functiondeclaration", path: './std/experimental/lexer/LexerRange.peekAt.html', attributes: ["const"]},
{name: 'std.experimental.lexer.LexerRange.popFront', kind: "functiondeclaration", path: './std/experimental/lexer/LexerRange.popFront.html', attributes: []},
{name: 'std.experimental.lexer.LexerRange.popFrontN', kind: "functiondeclaration", path: './std/experimental/lexer/LexerRange.popFrontN.html', attributes: []},
{name: 'std.experimental.lexer.LexerRange.seek', kind: "functiondeclaration", path: './std/experimental/lexer/LexerRange.seek.html', attributes: []},
{name: 'std.experimental.lexer.LexerRange.slice', kind: "functiondeclaration", path: './std/experimental/lexer/LexerRange.slice.html', attributes: ["const"]},
{name: 'std.experimental.lexer.LexerRange.startsWith', kind: "functiondeclaration", path: './std/experimental/lexer/LexerRange.startsWith.html', attributes: ["pure", "nothrow", "nogc", "safe", "const"]},
{name: 'std.experimental.lexer.LexerRange.this', kind: "functiondeclaration", path: './std/experimental/lexer/LexerRange.this.html', attributes: ["pure", "nothrow", "ref", "nogc", "safe"]},
{name: 'std.experimental.lexer.TokenId', kind: "aliasdeclaration", path: './std/experimental/lexer/TokenId.html', attributes: []},
{name: 'std.experimental.lexer.TokenIdType', kind: "aliasdeclaration", path: './std/experimental/lexer/TokenIdType.html', attributes: []},
{name: 'std.experimental.lexer.tokenStringRepresentation', kind: "functiondeclaration", path: './std/experimental/lexer/tokenStringRepresentation.html', attributes: ["pure", "nothrow", "nogc", "property", "safe"]},
{name: 'std.experimental.lexer.TokenStructure', kind: "structdeclaration", path: './std/experimental/lexer/TokenStructure.html', attributes: []},
{name: 'std.experimental.lexer.TokenStructure.column', kind: "variabledeclaration", path: './std/experimental/lexer/TokenStructure.column.html', attributes: []},
{name: 'std.experimental.lexer.TokenStructure.index', kind: "variabledeclaration", path: './std/experimental/lexer/TokenStructure.index.html', attributes: []},
{name: 'std.experimental.lexer.TokenStructure.line', kind: "variabledeclaration", path: './std/experimental/lexer/TokenStructure.line.html', attributes: []},
{name: 'std.experimental.lexer.TokenStructure.opEquals', kind: "functiondeclaration", path: './std/experimental/lexer/TokenStructure.opEquals.html', attributes: ["const"]},
{name: 'std.experimental.lexer.TokenStructure.text', kind: "variabledeclaration", path: './std/experimental/lexer/TokenStructure.text.html', attributes: []},
{name: 'std.experimental.lexer.TokenStructure.this', kind: "functiondeclaration", path: './std/experimental/lexer/TokenStructure.this.html', attributes: []},
{name: 'std.experimental.lexer.TokenStructure.type', kind: "variabledeclaration", path: './std/experimental/lexer/TokenStructure.type.html', attributes: []},
];
